[{"_1":2,"_777":778},"layout:/docs/api-reference",{"_3":4},"data",{"_5":6,"_763":764,"_769":-7,"_770":768,"_771":772},"sidebarGroups",[7,24,46,76,91,314,392,506,753],{"_8":9,"_10":11},"group","API Reference","items",[12],{"_13":14,"_15":16,"_17":18,"_19":20,"_21":22,"_23":22},"title","Introduction","href","/docs/api-reference/introduction","active",false,"uniqIndex",0,"icon","","sidebarTitle",{"_8":25,"_10":26},"Responses",[27],{"_13":25,"_15":22,"_17":18,"_19":28,"_21":-7,"_10":29},5,[30,34,38,42],{"_13":31,"_15":32,"_17":18,"_19":33,"_21":22,"_23":22},"Create a model response","/docs/api-reference/responses/create",1,{"_13":35,"_15":36,"_17":18,"_19":37,"_21":22,"_23":22},"Get a model response","/docs/api-reference/responses/get",2,{"_13":39,"_15":40,"_17":18,"_19":41,"_21":22,"_23":22},"Delete a model response","/docs/api-reference/responses/delete",3,{"_13":43,"_15":44,"_17":18,"_19":45,"_21":22,"_23":22},"List input items","/docs/api-reference/responses/input-items",4,{"_8":47,"_10":48},"Chat Completions",[49],{"_13":47,"_15":22,"_17":18,"_19":50,"_21":-7,"_10":51},12,[52,56,60,64,68,72],{"_13":53,"_15":54,"_17":18,"_19":55,"_21":22,"_23":22},"Create chat completion","/docs/api-reference/chat/create",6,{"_13":57,"_15":58,"_17":18,"_19":59,"_21":22,"_23":22},"Get chat completion","/docs/api-reference/chat/get",7,{"_13":61,"_15":62,"_17":18,"_19":63,"_21":22,"_23":22},"Get chat messages","/docs/api-reference/chat/getMessages",8,{"_13":65,"_15":66,"_17":18,"_19":67,"_21":22,"_23":22},"List Chat Completions","/docs/api-reference/chat/list",9,{"_13":69,"_15":70,"_17":18,"_19":71,"_21":22,"_23":22},"Update chat completion","/docs/api-reference/chat/update",10,{"_13":73,"_15":74,"_17":18,"_19":75,"_21":22,"_23":22},"Delete chat completion","/docs/api-reference/chat/delete",11,{"_8":77,"_10":78},"Realtime",[79],{"_13":80,"_15":22,"_17":18,"_19":81,"_21":-7,"_10":82},"Session tokens",15,[83,87],{"_13":84,"_15":85,"_17":18,"_19":86,"_21":22,"_23":22},"Create session","/docs/api-reference/realtime-sessions/create",13,{"_13":88,"_15":89,"_17":18,"_19":90,"_21":22,"_23":22},"Create transcription session","/docs/api-reference/realtime-sessions/create-transcription",14,{"_8":92,"_10":93},"Platform APIs",[94,110,126,134,186,226,246,270,290,306],{"_13":95,"_15":22,"_17":18,"_19":96,"_21":-7,"_10":97},"Audio",19,[98,102,106],{"_13":99,"_15":100,"_17":18,"_19":101,"_21":22,"_23":22},"Create speech","/docs/api-reference/audio/createSpeech",16,{"_13":103,"_15":104,"_17":18,"_19":105,"_21":22,"_23":22},"Create transcription","/docs/api-reference/audio/createTranscription",17,{"_13":107,"_15":108,"_17":18,"_19":109,"_21":22,"_23":22},"Create translation","/docs/api-reference/audio/createTranslation",18,{"_13":111,"_15":22,"_17":18,"_19":112,"_21":-7,"_10":113},"Images",23,[114,118,122],{"_13":115,"_15":116,"_17":18,"_19":117,"_21":22,"_23":22},"Create image","/docs/api-reference/images/create",20,{"_13":119,"_15":120,"_17":18,"_19":121,"_21":22,"_23":22},"Create image edit","/docs/api-reference/images/createEdit",21,{"_13":123,"_15":124,"_17":18,"_19":125,"_21":22,"_23":22},"Create image variation","/docs/api-reference/images/createVariation",22,{"_13":127,"_15":22,"_17":18,"_19":128,"_21":-7,"_10":129},"Embeddings",25,[130],{"_13":131,"_15":132,"_17":18,"_19":133,"_21":22,"_23":22},"Create embeddings","/docs/api-reference/embeddings/create",24,{"_13":135,"_15":22,"_17":18,"_19":136,"_21":-7,"_10":137},"Evals",38,[138,142,146,150,154,158,162,166,170,174,178,182],{"_13":139,"_15":140,"_17":18,"_19":141,"_21":22,"_23":22},"Create eval","/docs/api-reference/evals/create",26,{"_13":143,"_15":144,"_17":18,"_19":145,"_21":22,"_23":22},"Get an eval","/docs/api-reference/evals/get",27,{"_13":147,"_15":148,"_17":18,"_19":149,"_21":22,"_23":22},"Update an eval","/docs/api-reference/evals/update",28,{"_13":151,"_15":152,"_17":18,"_19":153,"_21":22,"_23":22},"Delete an eval","/docs/api-reference/evals/delete",29,{"_13":155,"_15":156,"_17":18,"_19":157,"_21":22,"_23":22},"List evals","/docs/api-reference/evals/list",30,{"_13":159,"_15":160,"_17":18,"_19":161,"_21":22,"_23":22},"Get eval runs","/docs/api-reference/evals/getRuns",31,{"_13":163,"_15":164,"_17":18,"_19":165,"_21":22,"_23":22},"Get an eval run","/docs/api-reference/evals/getRun",32,{"_13":167,"_15":168,"_17":18,"_19":169,"_21":22,"_23":22},"Create eval run","/docs/api-reference/evals/createRun",33,{"_13":171,"_15":172,"_17":18,"_19":173,"_21":22,"_23":22},"Cancel eval run","/docs/api-reference/evals/cancelRun",34,{"_13":175,"_15":176,"_17":18,"_19":177,"_21":22,"_23":22},"Delete eval run","/docs/api-reference/evals/deleteRun",35,{"_13":179,"_15":180,"_17":18,"_19":181,"_21":22,"_23":22},"Get an output item of an eval run","/docs/api-reference/evals/getRunOutputItem",36,{"_13":183,"_15":184,"_17":18,"_19":185,"_21":22,"_23":22},"Get eval run output items","/docs/api-reference/evals/getRunOutputItems",37,{"_13":187,"_15":22,"_17":18,"_19":188,"_21":-7,"_10":189},"Fine-tuning",48,[190,194,198,202,206,210,214,218,222],{"_13":191,"_15":192,"_17":18,"_19":193,"_21":22,"_23":22},"Create fine-tuning job","/docs/api-reference/fine-tuning/create",39,{"_13":195,"_15":196,"_17":18,"_19":197,"_21":22,"_23":22},"List fine-tuning jobs","/docs/api-reference/fine-tuning/list",40,{"_13":199,"_15":200,"_17":18,"_19":201,"_21":22,"_23":22},"List fine-tuning events","/docs/api-reference/fine-tuning/list-events",41,{"_13":203,"_15":204,"_17":18,"_19":205,"_21":22,"_23":22},"List fine-tuning checkpoints","/docs/api-reference/fine-tuning/list-checkpoints",42,{"_13":207,"_15":208,"_17":18,"_19":209,"_21":22,"_23":22},"List checkpoint permissions","/docs/api-reference/fine-tuning/list-permissions",43,{"_13":211,"_15":212,"_17":18,"_19":213,"_21":22,"_23":22},"Create checkpoint permissions","/docs/api-reference/fine-tuning/create-permission",44,{"_13":215,"_15":216,"_17":18,"_19":217,"_21":22,"_23":22},"Delete checkpoint permission","/docs/api-reference/fine-tuning/delete-permission",45,{"_13":219,"_15":220,"_17":18,"_19":221,"_21":22,"_23":22},"Retrieve fine-tuning job","/docs/api-reference/fine-tuning/retrieve",46,{"_13":223,"_15":224,"_17":18,"_19":225,"_21":22,"_23":22},"Cancel fine-tuning","/docs/api-reference/fine-tuning/cancel",47,{"_13":227,"_15":22,"_17":18,"_19":228,"_21":-7,"_10":229},"Batch",53,[230,234,238,242],{"_13":231,"_15":232,"_17":18,"_19":233,"_21":22,"_23":22},"Create batch","/docs/api-reference/batch/create",49,{"_13":235,"_15":236,"_17":18,"_19":237,"_21":22,"_23":22},"Retrieve batch","/docs/api-reference/batch/retrieve",50,{"_13":239,"_15":240,"_17":18,"_19":241,"_21":22,"_23":22},"Cancel batch","/docs/api-reference/batch/cancel",51,{"_13":243,"_15":244,"_17":18,"_19":245,"_21":22,"_23":22},"List batch","/docs/api-reference/batch/list",52,{"_13":247,"_15":22,"_17":18,"_19":248,"_21":-7,"_10":249},"Files",59,[250,254,258,262,266],{"_13":251,"_15":252,"_17":18,"_19":253,"_21":22,"_23":22},"Upload file","/docs/api-reference/files/create",54,{"_13":255,"_15":256,"_17":18,"_19":257,"_21":22,"_23":22},"List files","/docs/api-reference/files/list",55,{"_13":259,"_15":260,"_17":18,"_19":261,"_21":22,"_23":22},"Retrieve file","/docs/api-reference/files/retrieve",56,{"_13":263,"_15":264,"_17":18,"_19":265,"_21":22,"_23":22},"Delete file","/docs/api-reference/files/delete",57,{"_13":267,"_15":268,"_17":18,"_19":269,"_21":22,"_23":22},"Retrieve file content","/docs/api-reference/files/retrieve-contents",58,{"_13":271,"_15":22,"_17":18,"_19":272,"_21":-7,"_10":273},"Uploads",64,[274,278,282,286],{"_13":275,"_15":276,"_17":18,"_19":277,"_21":22,"_23":22},"Create upload","/docs/api-reference/uploads/create",60,{"_13":279,"_15":280,"_17":18,"_19":281,"_21":22,"_23":22},"Add upload part","/docs/api-reference/uploads/add-part",61,{"_13":283,"_15":284,"_17":18,"_19":285,"_21":22,"_23":22},"Complete upload","/docs/api-reference/uploads/complete",62,{"_13":287,"_15":288,"_17":18,"_19":289,"_21":22,"_23":22},"Cancel upload","/docs/api-reference/uploads/cancel",63,{"_13":291,"_15":22,"_17":18,"_19":292,"_21":-7,"_10":293},"Models",68,[294,298,302],{"_13":295,"_15":296,"_17":18,"_19":297,"_21":22,"_23":22},"List models","/docs/api-reference/models/list",65,{"_13":299,"_15":300,"_17":18,"_19":301,"_21":22,"_23":22},"Retrieve model","/docs/api-reference/models/retrieve",66,{"_13":303,"_15":304,"_17":18,"_19":305,"_21":22,"_23":22},"Delete a fine-tuned model","/docs/api-reference/models/delete",67,{"_13":307,"_15":22,"_17":18,"_19":308,"_21":-7,"_10":309},"Moderations",70,[310],{"_13":311,"_15":312,"_17":18,"_19":313,"_21":22,"_23":22},"Create moderation","/docs/api-reference/moderations/create",69,{"_8":315,"_10":316},"Vector stores",[317,344,372],{"_13":315,"_15":22,"_17":18,"_19":318,"_21":-7,"_10":319},77,[320,324,328,332,336,340],{"_13":321,"_15":322,"_17":18,"_19":323,"_21":22,"_23":22},"Create vector store","/docs/api-reference/vector-stores/create",71,{"_13":325,"_15":326,"_17":18,"_19":327,"_21":22,"_23":22},"List vector stores","/docs/api-reference/vector-stores/list",72,{"_13":329,"_15":330,"_17":18,"_19":331,"_21":22,"_23":22},"Retrieve vector store","/docs/api-reference/vector-stores/retrieve",73,{"_13":333,"_15":334,"_17":18,"_19":335,"_21":22,"_23":22},"Modify vector store","/docs/api-reference/vector-stores/modify",74,{"_13":337,"_15":338,"_17":18,"_19":339,"_21":22,"_23":22},"Delete vector store","/docs/api-reference/vector-stores/delete",75,{"_13":341,"_15":342,"_17":18,"_19":343,"_21":22,"_23":22},"Search vector store","/docs/api-reference/vector-stores/search",76,{"_13":345,"_15":22,"_17":18,"_19":346,"_21":-7,"_10":347},"Vector store files",84,[348,352,356,360,364,368],{"_13":349,"_15":350,"_17":18,"_19":351,"_21":22,"_23":22},"Create vector store file","/docs/api-reference/vector-stores-files/createFile",78,{"_13":353,"_15":354,"_17":18,"_19":355,"_21":22,"_23":22},"List vector store files","/docs/api-reference/vector-stores-files/listFiles",79,{"_13":357,"_15":358,"_17":18,"_19":359,"_21":22,"_23":22},"Retrieve vector store file","/docs/api-reference/vector-stores-files/getFile",80,{"_13":361,"_15":362,"_17":18,"_19":363,"_21":22,"_23":22},"Retrieve vector store file content","/docs/api-reference/vector-stores-files/getContent",81,{"_13":365,"_15":366,"_17":18,"_19":367,"_21":22,"_23":22},"Update vector store file attributes","/docs/api-reference/vector-stores-files/updateAttributes",82,{"_13":369,"_15":370,"_17":18,"_19":371,"_21":22,"_23":22},"Delete vector store file","/docs/api-reference/vector-stores-files/deleteFile",83,{"_13":373,"_15":22,"_17":18,"_19":374,"_21":-7,"_10":375},"Vector store file batches",89,[376,380,384,388],{"_13":377,"_15":378,"_17":18,"_19":379,"_21":22,"_23":22},"Create vector store file batch","/docs/api-reference/vector-stores-file-batches/createBatch",85,{"_13":381,"_15":382,"_17":18,"_19":383,"_21":22,"_23":22},"Retrieve vector store file batch","/docs/api-reference/vector-stores-file-batches/getBatch",86,{"_13":385,"_15":386,"_17":18,"_19":387,"_21":22,"_23":22},"Cancel vector store file batch","/docs/api-reference/vector-stores-file-batches/cancelBatch",87,{"_13":389,"_15":390,"_17":18,"_19":391,"_21":22,"_23":22},"List vector store files in a batch","/docs/api-reference/vector-stores-file-batches/listBatchFiles",88,{"_8":393,"_10":394},"Assistants",[395,418,438,462,494],{"_13":393,"_15":22,"_17":18,"_19":396,"_21":-7,"_10":397},95,[398,402,406,410,414],{"_13":399,"_15":400,"_17":18,"_19":401,"_21":22,"_23":22},"Create assistant","/docs/api-reference/assistants/createAssistant",90,{"_13":403,"_15":404,"_17":18,"_19":405,"_21":22,"_23":22},"List assistants","/docs/api-reference/assistants/listAssistants",91,{"_13":407,"_15":408,"_17":18,"_19":409,"_21":22,"_23":22},"Retrieve assistant","/docs/api-reference/assistants/getAssistant",92,{"_13":411,"_15":412,"_17":18,"_19":413,"_21":22,"_23":22},"Modify assistant","/docs/api-reference/assistants/modifyAssistant",93,{"_13":415,"_15":416,"_17":18,"_19":417,"_21":22,"_23":22},"Delete assistant","/docs/api-reference/assistants/deleteAssistant",94,{"_13":419,"_15":22,"_17":18,"_19":420,"_21":-7,"_10":421},"Threads",100,[422,426,430,434],{"_13":423,"_15":424,"_17":18,"_19":425,"_21":22,"_23":22},"Create thread","/docs/api-reference/threads/createThread",96,{"_13":427,"_15":428,"_17":18,"_19":429,"_21":22,"_23":22},"Retrieve thread","/docs/api-reference/threads/getThread",97,{"_13":431,"_15":432,"_17":18,"_19":433,"_21":22,"_23":22},"Modify thread","/docs/api-reference/threads/modifyThread",98,{"_13":435,"_15":436,"_17":18,"_19":437,"_21":22,"_23":22},"Delete thread","/docs/api-reference/threads/deleteThread",99,{"_13":439,"_15":22,"_17":18,"_19":440,"_21":-7,"_10":441},"Messages",106,[442,446,450,454,458],{"_13":443,"_15":444,"_17":18,"_19":445,"_21":22,"_23":22},"Create message","/docs/api-reference/messages/createMessage",101,{"_13":447,"_15":448,"_17":18,"_19":449,"_21":22,"_23":22},"List messages","/docs/api-reference/messages/listMessages",102,{"_13":451,"_15":452,"_17":18,"_19":453,"_21":22,"_23":22},"Retrieve message","/docs/api-reference/messages/getMessage",103,{"_13":455,"_15":456,"_17":18,"_19":457,"_21":22,"_23":22},"Modify message","/docs/api-reference/messages/modifyMessage",104,{"_13":459,"_15":460,"_17":18,"_19":461,"_21":22,"_23":22},"Delete message","/docs/api-reference/messages/deleteMessage",105,{"_13":463,"_15":22,"_17":18,"_19":464,"_21":-7,"_10":465},"Runs",114,[466,470,474,478,482,486,490],{"_13":467,"_15":468,"_17":18,"_19":469,"_21":22,"_23":22},"Create run","/docs/api-reference/runs/createRun",107,{"_13":471,"_15":472,"_17":18,"_19":473,"_21":22,"_23":22},"Create thread and run","/docs/api-reference/runs/createThreadAndRun",108,{"_13":475,"_15":476,"_17":18,"_19":477,"_21":22,"_23":22},"List runs","/docs/api-reference/runs/listRuns",109,{"_13":479,"_15":480,"_17":18,"_19":481,"_21":22,"_23":22},"Retrieve run","/docs/api-reference/runs/getRun",110,{"_13":483,"_15":484,"_17":18,"_19":485,"_21":22,"_23":22},"Modify run","/docs/api-reference/runs/modifyRun",111,{"_13":487,"_15":488,"_17":18,"_19":489,"_21":22,"_23":22},"Submit tool outputs to run","/docs/api-reference/runs/submitToolOutputs",112,{"_13":491,"_15":492,"_17":18,"_19":493,"_21":22,"_23":22},"Cancel a run","/docs/api-reference/runs/cancelRun",113,{"_13":495,"_15":22,"_17":18,"_19":496,"_21":-7,"_10":497},"Run steps",117,[498,502],{"_13":499,"_15":500,"_17":18,"_19":501,"_21":22,"_23":22},"List run steps","/docs/api-reference/run-steps/listRunSteps",115,{"_13":503,"_15":504,"_17":18,"_19":505,"_21":22,"_23":22},"Retrieve run step","/docs/api-reference/run-steps/getRunStep",116,{"_8":507,"_10":508},"Administration",[509,529,549,569,593,617,637,653,665,673,709],{"_13":510,"_15":22,"_17":18,"_19":511,"_21":-7,"_10":512},"Admin API Keys",122,[513,517,521,525],{"_13":514,"_15":515,"_17":18,"_19":516,"_21":22,"_23":22},"List all organization and project API keys.","/docs/api-reference/admin-api-keys/list",118,{"_13":518,"_15":519,"_17":18,"_19":520,"_21":22,"_23":22},"Create admin API key","/docs/api-reference/admin-api-keys/create",119,{"_13":522,"_15":523,"_17":18,"_19":524,"_21":22,"_23":22},"Retrieve admin API key","/docs/api-reference/admin-api-keys/listget",120,{"_13":526,"_15":527,"_17":18,"_19":528,"_21":22,"_23":22},"Delete admin API key","/docs/api-reference/admin-api-keys/delete",121,{"_13":530,"_15":22,"_17":18,"_19":531,"_21":-7,"_10":532},"Invites",127,[533,537,541,545],{"_13":534,"_15":535,"_17":18,"_19":536,"_21":22,"_23":22},"List invites","/docs/api-reference/invite/list",123,{"_13":538,"_15":539,"_17":18,"_19":540,"_21":22,"_23":22},"Create invite","/docs/api-reference/invite/create",124,{"_13":542,"_15":543,"_17":18,"_19":544,"_21":22,"_23":22},"Retrieve invite","/docs/api-reference/invite/retrieve",125,{"_13":546,"_15":547,"_17":18,"_19":548,"_21":22,"_23":22},"Delete invite","/docs/api-reference/invite/delete",126,{"_13":550,"_15":22,"_17":18,"_19":551,"_21":-7,"_10":552},"Users",132,[553,557,561,565],{"_13":554,"_15":555,"_17":18,"_19":556,"_21":22,"_23":22},"List users","/docs/api-reference/users/list",128,{"_13":558,"_15":559,"_17":18,"_19":560,"_21":22,"_23":22},"Modify user","/docs/api-reference/users/modify",129,{"_13":562,"_15":563,"_17":18,"_19":564,"_21":22,"_23":22},"Retrieve user","/docs/api-reference/users/retrieve",130,{"_13":566,"_15":567,"_17":18,"_19":568,"_21":22,"_23":22},"Delete user","/docs/api-reference/users/delete",131,{"_13":570,"_15":22,"_17":18,"_19":571,"_21":-7,"_10":572},"Projects",138,[573,577,581,585,589],{"_13":574,"_15":575,"_17":18,"_19":576,"_21":22,"_23":22},"List projects","/docs/api-reference/projects/list",133,{"_13":578,"_15":579,"_17":18,"_19":580,"_21":22,"_23":22},"Create project","/docs/api-reference/projects/create",134,{"_13":582,"_15":583,"_17":18,"_19":584,"_21":22,"_23":22},"Retrieve project","/docs/api-reference/projects/retrieve",135,{"_13":586,"_15":587,"_17":18,"_19":588,"_21":22,"_23":22},"Modify project","/docs/api-reference/projects/modify",136,{"_13":590,"_15":591,"_17":18,"_19":592,"_21":22,"_23":22},"Archive project","/docs/api-reference/projects/archive",137,{"_13":594,"_15":22,"_17":18,"_19":595,"_21":-7,"_10":596},"Project users",144,[597,601,605,609,613],{"_13":598,"_15":599,"_17":18,"_19":600,"_21":22,"_23":22},"List project users","/docs/api-reference/project-users/list",139,{"_13":602,"_15":603,"_17":18,"_19":604,"_21":22,"_23":22},"Create project user","/docs/api-reference/project-users/creeate",140,{"_13":606,"_15":607,"_17":18,"_19":608,"_21":22,"_23":22},"Retrieve project user","/docs/api-reference/project-users/retrieve",141,{"_13":610,"_15":611,"_17":18,"_19":612,"_21":22,"_23":22},"Modify project user","/docs/api-reference/project-users/modify",142,{"_13":614,"_15":615,"_17":18,"_19":616,"_21":22,"_23":22},"Delete project user","/docs/api-reference/project-users/delete",143,{"_13":618,"_15":22,"_17":18,"_19":619,"_21":-7,"_10":620},"Project service accounts",149,[621,625,629,633],{"_13":622,"_15":623,"_17":18,"_19":624,"_21":22,"_23":22},"List project service accounts","/docs/api-reference/project-service-accounts/list",145,{"_13":626,"_15":627,"_17":18,"_19":628,"_21":22,"_23":22},"Create project service account","/docs/api-reference/project-service-accounts/create",146,{"_13":630,"_15":631,"_17":18,"_19":632,"_21":22,"_23":22},"Retrieve project service account","/docs/api-reference/project-service-accounts/retrieve",147,{"_13":634,"_15":635,"_17":18,"_19":636,"_21":22,"_23":22},"Delete project service account","/docs/api-reference/project-service-accounts/delete",148,{"_13":638,"_15":22,"_17":18,"_19":639,"_21":-7,"_10":640},"Project API keys",153,[641,645,649],{"_13":642,"_15":643,"_17":18,"_19":644,"_21":22,"_23":22},"List project API keys","/docs/api-reference/project-api-keys/list",150,{"_13":646,"_15":647,"_17":18,"_19":648,"_21":22,"_23":22},"Retrieve project API key","/docs/api-reference/project-api-keys/retrieve",151,{"_13":650,"_15":651,"_17":18,"_19":652,"_21":22,"_23":22},"Delete project API key","/docs/api-reference/project-api-keys/delete",152,{"_13":654,"_15":22,"_17":18,"_19":655,"_21":-7,"_10":656},"Project rate limits",156,[657,661],{"_13":658,"_15":659,"_17":18,"_19":660,"_21":22,"_23":22},"List project rate limits","/docs/api-reference/project-rate-limits/list",154,{"_13":662,"_15":663,"_17":18,"_19":664,"_21":22,"_23":22},"Modify project rate limit","/docs/api-reference/project-rate-limits/update",155,{"_13":666,"_15":22,"_17":18,"_19":667,"_21":-7,"_10":668},"Audit logs",158,[669],{"_13":670,"_15":671,"_17":18,"_19":672,"_21":22,"_23":22},"List audit logs","/docs/api-reference/audit-logs/list",157,{"_13":674,"_15":22,"_17":18,"_19":675,"_21":-7,"_10":676},"Usage",168,[677,681,684,687,690,694,698,701,705],{"_13":678,"_15":679,"_17":18,"_19":680,"_21":22,"_23":22},"Completions","/docs/api-reference/usage/completions",159,{"_13":127,"_15":682,"_17":18,"_19":683,"_21":22,"_23":22},"/docs/api-reference/usage/embeddings",160,{"_13":307,"_15":685,"_17":18,"_19":686,"_21":22,"_23":22},"/docs/api-reference/usage/moderations",161,{"_13":111,"_15":688,"_17":18,"_19":689,"_21":22,"_23":22},"/docs/api-reference/usage/images",162,{"_13":691,"_15":692,"_17":18,"_19":693,"_21":22,"_23":22},"Audio speeches","/docs/api-reference/usage/audio_speeches",163,{"_13":695,"_15":696,"_17":18,"_19":697,"_21":22,"_23":22},"Audio transcriptions","/docs/api-reference/usage/audio_transcriptions",164,{"_13":315,"_15":699,"_17":18,"_19":700,"_21":22,"_23":22},"/docs/api-reference/usage/vector_stores",165,{"_13":702,"_15":703,"_17":18,"_19":704,"_21":22,"_23":22},"Code interpreter sessions","/docs/api-reference/usage/code_interpreter_sessions",166,{"_13":706,"_15":707,"_17":18,"_19":708,"_21":22,"_23":22},"Costs","/docs/api-reference/usage/costs",167,{"_13":710,"_15":22,"_17":18,"_19":711,"_21":-7,"_10":712},"Certificates",179,[713,717,721,725,729,733,737,741,745,749],{"_13":714,"_15":715,"_17":18,"_19":716,"_21":22,"_23":22},"Upload certificate","/docs/api-reference/certificates/uploadCertificate",169,{"_13":718,"_15":719,"_17":18,"_19":720,"_21":22,"_23":22},"Get certificate","/docs/api-reference/certificates/getCertificate",170,{"_13":722,"_15":723,"_17":18,"_19":724,"_21":22,"_23":22},"Modify certificate","/docs/api-reference/certificates/modifyCertificate",171,{"_13":726,"_15":727,"_17":18,"_19":728,"_21":22,"_23":22},"Delete certificate","/docs/api-reference/certificates/deleteCertificate",172,{"_13":730,"_15":731,"_17":18,"_19":732,"_21":22,"_23":22},"List organization certificates","/docs/api-reference/certificates/listOrganizationCertificates",173,{"_13":734,"_15":735,"_17":18,"_19":736,"_21":22,"_23":22},"List project certificates","/docs/api-reference/certificates/listProjectCertificates",174,{"_13":738,"_15":739,"_17":18,"_19":740,"_21":22,"_23":22},"Activate certificates for organization","/docs/api-reference/certificates/activateOrganizationCertificates",175,{"_13":742,"_15":743,"_17":18,"_19":744,"_21":22,"_23":22},"Deactivate certificates for organization","/docs/api-reference/certificates/deactivateOrganizationCertificates",176,{"_13":746,"_15":747,"_17":18,"_19":748,"_21":22,"_23":22},"Activate certificates for project","/docs/api-reference/certificates/activateProjectCertificates",177,{"_13":750,"_15":751,"_17":18,"_19":752,"_21":22,"_23":22},"Deactivate certificates for project","/docs/api-reference/certificates/deactivateProjectCertificates",178,{"_8":754,"_10":755},"Legacy",[756],{"_13":678,"_15":22,"_17":18,"_19":757,"_21":-7,"_10":758},181,[759],{"_13":760,"_15":761,"_17":18,"_19":762,"_21":22,"_23":22},"Create completion","/docs/api-reference/completions/create",180,"breadcrumbs",[765,766,767],{"_13":135,"_15":22},{"_13":135,"_15":22},{"_13":167,"_15":768},"docs/api-reference/evals/createRun","navlinks","slug","metadata",{"_13":167,"_773":774,"_775":776},"layout","wide","openapi","~/openapi.yaml#POST /evals/{eval_id}/runs","/docs/api-reference",{"_3":779},{"_5":780,"_763":1014,"_769":-7,"_770":768,"_1018":1019,"_771":1020,"_1021":1022},[781,784,792,802,808,875,899,934,1009],{"_8":9,"_10":782},[783],{"_13":14,"_15":16,"_17":18,"_19":20,"_21":22,"_23":22},{"_8":25,"_10":785},[786],{"_13":25,"_15":22,"_17":18,"_19":28,"_21":-7,"_10":787},[788,789,790,791],{"_13":31,"_15":32,"_17":18,"_19":33,"_21":22,"_23":22},{"_13":35,"_15":36,"_17":18,"_19":37,"_21":22,"_23":22},{"_13":39,"_15":40,"_17":18,"_19":41,"_21":22,"_23":22},{"_13":43,"_15":44,"_17":18,"_19":45,"_21":22,"_23":22},{"_8":47,"_10":793},[794],{"_13":47,"_15":22,"_17":18,"_19":50,"_21":-7,"_10":795},[796,797,798,799,800,801],{"_13":53,"_15":54,"_17":18,"_19":55,"_21":22,"_23":22},{"_13":57,"_15":58,"_17":18,"_19":59,"_21":22,"_23":22},{"_13":61,"_15":62,"_17":18,"_19":63,"_21":22,"_23":22},{"_13":65,"_15":66,"_17":18,"_19":67,"_21":22,"_23":22},{"_13":69,"_15":70,"_17":18,"_19":71,"_21":22,"_23":22},{"_13":73,"_15":74,"_17":18,"_19":75,"_21":22,"_23":22},{"_8":77,"_10":803},[804],{"_13":80,"_15":22,"_17":18,"_19":81,"_21":-7,"_10":805},[806,807],{"_13":84,"_15":85,"_17":18,"_19":86,"_21":22,"_23":22},{"_13":88,"_15":89,"_17":18,"_19":90,"_21":22,"_23":22},{"_8":92,"_10":809},[810,815,820,823,837,848,854,861,867,872],{"_13":95,"_15":22,"_17":18,"_19":96,"_21":-7,"_10":811},[812,813,814],{"_13":99,"_15":100,"_17":18,"_19":101,"_21":22,"_23":22},{"_13":103,"_15":104,"_17":18,"_19":105,"_21":22,"_23":22},{"_13":107,"_15":108,"_17":18,"_19":109,"_21":22,"_23":22},{"_13":111,"_15":22,"_17":18,"_19":112,"_21":-7,"_10":816},[817,818,819],{"_13":115,"_15":116,"_17":18,"_19":117,"_21":22,"_23":22},{"_13":119,"_15":120,"_17":18,"_19":121,"_21":22,"_23":22},{"_13":123,"_15":124,"_17":18,"_19":125,"_21":22,"_23":22},{"_13":127,"_15":22,"_17":18,"_19":128,"_21":-7,"_10":821},[822],{"_13":131,"_15":132,"_17":18,"_19":133,"_21":22,"_23":22},{"_13":135,"_15":22,"_17":18,"_19":136,"_21":-7,"_10":824},[825,826,827,828,829,830,831,832,833,834,835,836],{"_13":139,"_15":140,"_17":18,"_19":141,"_21":22,"_23":22},{"_13":143,"_15":144,"_17":18,"_19":145,"_21":22,"_23":22},{"_13":147,"_15":148,"_17":18,"_19":149,"_21":22,"_23":22},{"_13":151,"_15":152,"_17":18,"_19":153,"_21":22,"_23":22},{"_13":155,"_15":156,"_17":18,"_19":157,"_21":22,"_23":22},{"_13":159,"_15":160,"_17":18,"_19":161,"_21":22,"_23":22},{"_13":163,"_15":164,"_17":18,"_19":165,"_21":22,"_23":22},{"_13":167,"_15":168,"_17":18,"_19":169,"_21":22,"_23":22},{"_13":171,"_15":172,"_17":18,"_19":173,"_21":22,"_23":22},{"_13":175,"_15":176,"_17":18,"_19":177,"_21":22,"_23":22},{"_13":179,"_15":180,"_17":18,"_19":181,"_21":22,"_23":22},{"_13":183,"_15":184,"_17":18,"_19":185,"_21":22,"_23":22},{"_13":187,"_15":22,"_17":18,"_19":188,"_21":-7,"_10":838},[839,840,841,842,843,844,845,846,847],{"_13":191,"_15":192,"_17":18,"_19":193,"_21":22,"_23":22},{"_13":195,"_15":196,"_17":18,"_19":197,"_21":22,"_23":22},{"_13":199,"_15":200,"_17":18,"_19":201,"_21":22,"_23":22},{"_13":203,"_15":204,"_17":18,"_19":205,"_21":22,"_23":22},{"_13":207,"_15":208,"_17":18,"_19":209,"_21":22,"_23":22},{"_13":211,"_15":212,"_17":18,"_19":213,"_21":22,"_23":22},{"_13":215,"_15":216,"_17":18,"_19":217,"_21":22,"_23":22},{"_13":219,"_15":220,"_17":18,"_19":221,"_21":22,"_23":22},{"_13":223,"_15":224,"_17":18,"_19":225,"_21":22,"_23":22},{"_13":227,"_15":22,"_17":18,"_19":228,"_21":-7,"_10":849},[850,851,852,853],{"_13":231,"_15":232,"_17":18,"_19":233,"_21":22,"_23":22},{"_13":235,"_15":236,"_17":18,"_19":237,"_21":22,"_23":22},{"_13":239,"_15":240,"_17":18,"_19":241,"_21":22,"_23":22},{"_13":243,"_15":244,"_17":18,"_19":245,"_21":22,"_23":22},{"_13":247,"_15":22,"_17":18,"_19":248,"_21":-7,"_10":855},[856,857,858,859,860],{"_13":251,"_15":252,"_17":18,"_19":253,"_21":22,"_23":22},{"_13":255,"_15":256,"_17":18,"_19":257,"_21":22,"_23":22},{"_13":259,"_15":260,"_17":18,"_19":261,"_21":22,"_23":22},{"_13":263,"_15":264,"_17":18,"_19":265,"_21":22,"_23":22},{"_13":267,"_15":268,"_17":18,"_19":269,"_21":22,"_23":22},{"_13":271,"_15":22,"_17":18,"_19":272,"_21":-7,"_10":862},[863,864,865,866],{"_13":275,"_15":276,"_17":18,"_19":277,"_21":22,"_23":22},{"_13":279,"_15":280,"_17":18,"_19":281,"_21":22,"_23":22},{"_13":283,"_15":284,"_17":18,"_19":285,"_21":22,"_23":22},{"_13":287,"_15":288,"_17":18,"_19":289,"_21":22,"_23":22},{"_13":291,"_15":22,"_17":18,"_19":292,"_21":-7,"_10":868},[869,870,871],{"_13":295,"_15":296,"_17":18,"_19":297,"_21":22,"_23":22},{"_13":299,"_15":300,"_17":18,"_19":301,"_21":22,"_23":22},{"_13":303,"_15":304,"_17":18,"_19":305,"_21":22,"_23":22},{"_13":307,"_15":22,"_17":18,"_19":308,"_21":-7,"_10":873},[874],{"_13":311,"_15":312,"_17":18,"_19":313,"_21":22,"_23":22},{"_8":315,"_10":876},[877,885,893],{"_13":315,"_15":22,"_17":18,"_19":318,"_21":-7,"_10":878},[879,880,881,882,883,884],{"_13":321,"_15":322,"_17":18,"_19":323,"_21":22,"_23":22},{"_13":325,"_15":326,"_17":18,"_19":327,"_21":22,"_23":22},{"_13":329,"_15":330,"_17":18,"_19":331,"_21":22,"_23":22},{"_13":333,"_15":334,"_17":18,"_19":335,"_21":22,"_23":22},{"_13":337,"_15":338,"_17":18,"_19":339,"_21":22,"_23":22},{"_13":341,"_15":342,"_17":18,"_19":343,"_21":22,"_23":22},{"_13":345,"_15":22,"_17":18,"_19":346,"_21":-7,"_10":886},[887,888,889,890,891,892],{"_13":349,"_15":350,"_17":18,"_19":351,"_21":22,"_23":22},{"_13":353,"_15":354,"_17":18,"_19":355,"_21":22,"_23":22},{"_13":357,"_15":358,"_17":18,"_19":359,"_21":22,"_23":22},{"_13":361,"_15":362,"_17":18,"_19":363,"_21":22,"_23":22},{"_13":365,"_15":366,"_17":18,"_19":367,"_21":22,"_23":22},{"_13":369,"_15":370,"_17":18,"_19":371,"_21":22,"_23":22},{"_13":373,"_15":22,"_17":18,"_19":374,"_21":-7,"_10":894},[895,896,897,898],{"_13":377,"_15":378,"_17":18,"_19":379,"_21":22,"_23":22},{"_13":381,"_15":382,"_17":18,"_19":383,"_21":22,"_23":22},{"_13":385,"_15":386,"_17":18,"_19":387,"_21":22,"_23":22},{"_13":389,"_15":390,"_17":18,"_19":391,"_21":22,"_23":22},{"_8":393,"_10":900},[901,908,914,921,930],{"_13":393,"_15":22,"_17":18,"_19":396,"_21":-7,"_10":902},[903,904,905,906,907],{"_13":399,"_15":400,"_17":18,"_19":401,"_21":22,"_23":22},{"_13":403,"_15":404,"_17":18,"_19":405,"_21":22,"_23":22},{"_13":407,"_15":408,"_17":18,"_19":409,"_21":22,"_23":22},{"_13":411,"_15":412,"_17":18,"_19":413,"_21":22,"_23":22},{"_13":415,"_15":416,"_17":18,"_19":417,"_21":22,"_23":22},{"_13":419,"_15":22,"_17":18,"_19":420,"_21":-7,"_10":909},[910,911,912,913],{"_13":423,"_15":424,"_17":18,"_19":425,"_21":22,"_23":22},{"_13":427,"_15":428,"_17":18,"_19":429,"_21":22,"_23":22},{"_13":431,"_15":432,"_17":18,"_19":433,"_21":22,"_23":22},{"_13":435,"_15":436,"_17":18,"_19":437,"_21":22,"_23":22},{"_13":439,"_15":22,"_17":18,"_19":440,"_21":-7,"_10":915},[916,917,918,919,920],{"_13":443,"_15":444,"_17":18,"_19":445,"_21":22,"_23":22},{"_13":447,"_15":448,"_17":18,"_19":449,"_21":22,"_23":22},{"_13":451,"_15":452,"_17":18,"_19":453,"_21":22,"_23":22},{"_13":455,"_15":456,"_17":18,"_19":457,"_21":22,"_23":22},{"_13":459,"_15":460,"_17":18,"_19":461,"_21":22,"_23":22},{"_13":463,"_15":22,"_17":18,"_19":464,"_21":-7,"_10":922},[923,924,925,926,927,928,929],{"_13":467,"_15":468,"_17":18,"_19":469,"_21":22,"_23":22},{"_13":471,"_15":472,"_17":18,"_19":473,"_21":22,"_23":22},{"_13":475,"_15":476,"_17":18,"_19":477,"_21":22,"_23":22},{"_13":479,"_15":480,"_17":18,"_19":481,"_21":22,"_23":22},{"_13":483,"_15":484,"_17":18,"_19":485,"_21":22,"_23":22},{"_13":487,"_15":488,"_17":18,"_19":489,"_21":22,"_23":22},{"_13":491,"_15":492,"_17":18,"_19":493,"_21":22,"_23":22},{"_13":495,"_15":22,"_17":18,"_19":496,"_21":-7,"_10":931},[932,933],{"_13":499,"_15":500,"_17":18,"_19":501,"_21":22,"_23":22},{"_13":503,"_15":504,"_17":18,"_19":505,"_21":22,"_23":22},{"_8":507,"_10":935},[936,942,948,954,961,968,974,979,983,986,997],{"_13":510,"_15":22,"_17":18,"_19":511,"_21":-7,"_10":937},[938,939,940,941],{"_13":514,"_15":515,"_17":18,"_19":516,"_21":22,"_23":22},{"_13":518,"_15":519,"_17":18,"_19":520,"_21":22,"_23":22},{"_13":522,"_15":523,"_17":18,"_19":524,"_21":22,"_23":22},{"_13":526,"_15":527,"_17":18,"_19":528,"_21":22,"_23":22},{"_13":530,"_15":22,"_17":18,"_19":531,"_21":-7,"_10":943},[944,945,946,947],{"_13":534,"_15":535,"_17":18,"_19":536,"_21":22,"_23":22},{"_13":538,"_15":539,"_17":18,"_19":540,"_21":22,"_23":22},{"_13":542,"_15":543,"_17":18,"_19":544,"_21":22,"_23":22},{"_13":546,"_15":547,"_17":18,"_19":548,"_21":22,"_23":22},{"_13":550,"_15":22,"_17":18,"_19":551,"_21":-7,"_10":949},[950,951,952,953],{"_13":554,"_15":555,"_17":18,"_19":556,"_21":22,"_23":22},{"_13":558,"_15":559,"_17":18,"_19":560,"_21":22,"_23":22},{"_13":562,"_15":563,"_17":18,"_19":564,"_21":22,"_23":22},{"_13":566,"_15":567,"_17":18,"_19":568,"_21":22,"_23":22},{"_13":570,"_15":22,"_17":18,"_19":571,"_21":-7,"_10":955},[956,957,958,959,960],{"_13":574,"_15":575,"_17":18,"_19":576,"_21":22,"_23":22},{"_13":578,"_15":579,"_17":18,"_19":580,"_21":22,"_23":22},{"_13":582,"_15":583,"_17":18,"_19":584,"_21":22,"_23":22},{"_13":586,"_15":587,"_17":18,"_19":588,"_21":22,"_23":22},{"_13":590,"_15":591,"_17":18,"_19":592,"_21":22,"_23":22},{"_13":594,"_15":22,"_17":18,"_19":595,"_21":-7,"_10":962},[963,964,965,966,967],{"_13":598,"_15":599,"_17":18,"_19":600,"_21":22,"_23":22},{"_13":602,"_15":603,"_17":18,"_19":604,"_21":22,"_23":22},{"_13":606,"_15":607,"_17":18,"_19":608,"_21":22,"_23":22},{"_13":610,"_15":611,"_17":18,"_19":612,"_21":22,"_23":22},{"_13":614,"_15":615,"_17":18,"_19":616,"_21":22,"_23":22},{"_13":618,"_15":22,"_17":18,"_19":619,"_21":-7,"_10":969},[970,971,972,973],{"_13":622,"_15":623,"_17":18,"_19":624,"_21":22,"_23":22},{"_13":626,"_15":627,"_17":18,"_19":628,"_21":22,"_23":22},{"_13":630,"_15":631,"_17":18,"_19":632,"_21":22,"_23":22},{"_13":634,"_15":635,"_17":18,"_19":636,"_21":22,"_23":22},{"_13":638,"_15":22,"_17":18,"_19":639,"_21":-7,"_10":975},[976,977,978],{"_13":642,"_15":643,"_17":18,"_19":644,"_21":22,"_23":22},{"_13":646,"_15":647,"_17":18,"_19":648,"_21":22,"_23":22},{"_13":650,"_15":651,"_17":18,"_19":652,"_21":22,"_23":22},{"_13":654,"_15":22,"_17":18,"_19":655,"_21":-7,"_10":980},[981,982],{"_13":658,"_15":659,"_17":18,"_19":660,"_21":22,"_23":22},{"_13":662,"_15":663,"_17":18,"_19":664,"_21":22,"_23":22},{"_13":666,"_15":22,"_17":18,"_19":667,"_21":-7,"_10":984},[985],{"_13":670,"_15":671,"_17":18,"_19":672,"_21":22,"_23":22},{"_13":674,"_15":22,"_17":18,"_19":675,"_21":-7,"_10":987},[988,989,990,991,992,993,994,995,996],{"_13":678,"_15":679,"_17":18,"_19":680,"_21":22,"_23":22},{"_13":127,"_15":682,"_17":18,"_19":683,"_21":22,"_23":22},{"_13":307,"_15":685,"_17":18,"_19":686,"_21":22,"_23":22},{"_13":111,"_15":688,"_17":18,"_19":689,"_21":22,"_23":22},{"_13":691,"_15":692,"_17":18,"_19":693,"_21":22,"_23":22},{"_13":695,"_15":696,"_17":18,"_19":697,"_21":22,"_23":22},{"_13":315,"_15":699,"_17":18,"_19":700,"_21":22,"_23":22},{"_13":702,"_15":703,"_17":18,"_19":704,"_21":22,"_23":22},{"_13":706,"_15":707,"_17":18,"_19":708,"_21":22,"_23":22},{"_13":710,"_15":22,"_17":18,"_19":711,"_21":-7,"_10":998},[999,1000,1001,1002,1003,1004,1005,1006,1007,1008],{"_13":714,"_15":715,"_17":18,"_19":716,"_21":22,"_23":22},{"_13":718,"_15":719,"_17":18,"_19":720,"_21":22,"_23":22},{"_13":722,"_15":723,"_17":18,"_19":724,"_21":22,"_23":22},{"_13":726,"_15":727,"_17":18,"_19":728,"_21":22,"_23":22},{"_13":730,"_15":731,"_17":18,"_19":732,"_21":22,"_23":22},{"_13":734,"_15":735,"_17":18,"_19":736,"_21":22,"_23":22},{"_13":738,"_15":739,"_17":18,"_19":740,"_21":22,"_23":22},{"_13":742,"_15":743,"_17":18,"_19":744,"_21":22,"_23":22},{"_13":746,"_15":747,"_17":18,"_19":748,"_21":22,"_23":22},{"_13":750,"_15":751,"_17":18,"_19":752,"_21":22,"_23":22},{"_8":754,"_10":1010},[1011],{"_13":678,"_15":22,"_17":18,"_19":757,"_21":-7,"_10":1012},[1013],{"_13":760,"_15":761,"_17":18,"_19":762,"_21":22,"_23":22},[1015,1016,1017],{"_13":135,"_15":22},{"_13":135,"_15":22},{"_13":167,"_15":768},"code","\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst toc = [];\nconst frontmatter = {\n  \"title\": \"Create eval run\",\n  \"layout\": \"wide\",\n  \"openapi\": \"~/openapi.yaml#POST /evals/{eval_id}/runs\"\n};\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    p: \"p\",\n    strong: \"strong\",\n    ...props.components\n  }, {Atlas} = _components;\n  if (!Atlas) _missingMdxReference(\"Atlas\", true);\n  return _jsx(Atlas, {\n    references: [{\n      __UNSAFE_selector: function noRefCheck() {},\n      canonical: 'createEvalRun',\n      category: 'rest',\n      context: {\n        fullPath: 'https:/api.openai.com/v1/evals/{eval_id}/runs',\n        group: ['evals'],\n        method: 'post',\n        path: '/evals/{eval_id}/runs',\n        scopes: []\n      },\n      definitions: [{\n        properties: [{\n          description: 'The ID of the evaluation to create a run for.',\n          meta: [{\n            name: 'required',\n            value: 'true'\n          }],\n          name: 'eval_id',\n          type: 'string'\n        }],\n        title: 'Path parameters'\n      }, {\n        meta: [{\n          name: 'contentType',\n          value: 'application/json'\n        }, {\n          name: 'required',\n          value: 'true'\n        }],\n        properties: [{\n          description: 'The name of the run.',\n          meta: [],\n          name: 'name',\n          type: 'string'\n        }, {\n          description: 'Set of 16 key-value pairs that can be attached to an object. This can be\\nuseful for storing additional information about the object in a structured\\nformat, and querying for objects via API or the dashboard. \\n\\nKeys are strings with a maximum length of 64 characters. Values are strings\\nwith a maximum length of 512 characters.\\n',\n          meta: [{\n            name: 'nullable',\n            value: 'true'\n          }],\n          name: 'metadata',\n          type: 'object'\n        }, {\n          description: 'Details about the run\\'s data source.',\n          name: 'data_source',\n          properties: [{\n            description: 'A JsonlRunDataSource object with that specifies a JSONL file that matches the eval\\n',\n            meta: [{\n              name: 'required',\n              value: 'true'\n            }],\n            name: 'JsonlRunDataSource',\n            properties: [{\n              description: _jsxs(_components.p, {\n                children: [\"The type of data source. Always\", ' ', _jsx(_components.code, {\n                  children: \"jsonl\"\n                }), \".\"]\n              }),\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }, {\n                name: 'defaults',\n                value: 'jsonl'\n              }, {\n                name: 'enum-type',\n                value: 'string'\n              }],\n              name: 'type',\n              properties: [{\n                description: '',\n                meta: [],\n                name: 'jsonl',\n                type: 'string'\n              }],\n              type: '$$enum'\n            }, {\n              description: '',\n              name: 'source',\n              properties: [{\n                description: '',\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'EvalJsonlFileContentSource',\n                properties: [{\n                  description: _jsxs(_components.p, {\n                    children: [\"The type of jsonl source. Always\", ' ', _jsx(_components.code, {\n                      children: \"file_content\"\n                    }), \".\"]\n                  }),\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }, {\n                    name: 'defaults',\n                    value: 'file_content'\n                  }, {\n                    name: 'enum-type',\n                    value: 'string'\n                  }],\n                  name: 'type',\n                  properties: [{\n                    description: '',\n                    meta: [],\n                    name: 'file_content',\n                    type: 'string'\n                  }],\n                  type: '$$enum'\n                }, {\n                  description: 'The content of the jsonl file.',\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }],\n                  name: 'content',\n                  properties: [{\n                    description: '',\n                    meta: [],\n                    name: 'items',\n                    properties: [{\n                      description: '',\n                      meta: [{\n                        name: 'required',\n                        value: 'true'\n                      }],\n                      name: 'item',\n                      type: 'object'\n                    }, {\n                      description: '',\n                      meta: [],\n                      name: 'sample',\n                      type: 'object'\n                    }],\n                    type: 'object'\n                  }],\n                  type: '$$array'\n                }],\n                type: 'object'\n              }, {\n                description: '',\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'EvalJsonlFileIdSource',\n                properties: [{\n                  description: _jsxs(_components.p, {\n                    children: [\"The type of jsonl source. Always\", ' ', _jsx(_components.code, {\n                      children: \"file_id\"\n                    }), \".\"]\n                  }),\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }, {\n                    name: 'defaults',\n                    value: 'file_id'\n                  }, {\n                    name: 'enum-type',\n                    value: 'string'\n                  }],\n                  name: 'type',\n                  properties: [{\n                    description: '',\n                    meta: [],\n                    name: 'file_id',\n                    type: 'string'\n                  }],\n                  type: '$$enum'\n                }, {\n                  description: 'The identifier of the file.',\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }],\n                  name: 'id',\n                  type: 'string'\n                }],\n                type: 'object'\n              }],\n              type: '$$xor'\n            }],\n            type: 'object'\n          }, {\n            description: 'A CompletionsRunDataSource object describing a model sampling configuration.\\n',\n            meta: [{\n              name: 'required',\n              value: 'true'\n            }],\n            name: 'CompletionsRunDataSource',\n            properties: [{\n              description: _jsxs(_components.p, {\n                children: [\"The type of run data source. Always\", ' ', _jsx(_components.code, {\n                  children: \"completions\"\n                }), \".\"]\n              }),\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }, {\n                name: 'defaults',\n                value: 'completions'\n              }, {\n                name: 'enum-type',\n                value: 'string'\n              }],\n              name: 'type',\n              properties: [{\n                description: '',\n                meta: [],\n                name: 'completions',\n                type: 'string'\n              }],\n              type: '$$enum'\n            }, {\n              description: '',\n              name: 'input_messages',\n              properties: [{\n                description: '',\n                meta: [],\n                name: 'TemplateInputMessages',\n                properties: [{\n                  description: _jsxs(_components.p, {\n                    children: [\"The type of input messages. Always\", ' ', _jsx(_components.code, {\n                      children: \"template\"\n                    }), \".\"]\n                  }),\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }, {\n                    name: 'enum-type',\n                    value: 'string'\n                  }],\n                  name: 'type',\n                  properties: [{\n                    description: '',\n                    meta: [],\n                    name: 'template',\n                    type: 'string'\n                  }],\n                  type: '$$enum'\n                }, {\n                  description: 'A list of chat messages forming the prompt or context. May include variable references to the \"item\" namespace, ie {{item.name}}.',\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }],\n                  name: 'template',\n                  properties: [{\n                    description: _jsxs(_components.p, {\n                      children: [\"A message input to the model with a role indicating instruction following hierarchy. Instructions given with the\", ' ', _jsx(_components.code, {\n                        children: \"developer\"\n                      }), ' ', \"or\", ' ', _jsx(_components.code, {\n                        children: \"system\"\n                      }), ' ', \"role take precedence over instructions given with the\", ' ', _jsx(_components.code, {\n                        children: \"user\"\n                      }), ' ', \"role. Messages with the\", ' ', _jsx(_components.code, {\n                        children: \"assistant\"\n                      }), ' ', \"role are presumed to have been generated by the model in previous interactions.\"]\n                    }),\n                    meta: [],\n                    name: 'Input message',\n                    properties: [{\n                      description: _jsxs(_components.p, {\n                        children: [\"The role of the message input. One of\", ' ', _jsx(_components.code, {\n                          children: \"user\"\n                        }), \",\", ' ', _jsx(_components.code, {\n                          children: \"assistant\"\n                        }), \",\", ' ', _jsx(_components.code, {\n                          children: \"system\"\n                        }), \", or\", ' ', _jsx(_components.code, {\n                          children: \"developer\"\n                        }), \".\"]\n                      }),\n                      meta: [{\n                        name: 'required',\n                        value: 'true'\n                      }, {\n                        name: 'enum-type',\n                        value: 'string'\n                      }],\n                      name: 'role',\n                      properties: [{\n                        description: '',\n                        meta: [],\n                        name: 'user',\n                        type: 'string'\n                      }, {\n                        description: '',\n                        meta: [],\n                        name: 'assistant',\n                        type: 'string'\n                      }, {\n                        description: '',\n                        meta: [],\n                        name: 'system',\n                        type: 'string'\n                      }, {\n                        description: '',\n                        meta: [],\n                        name: 'developer',\n                        type: 'string'\n                      }],\n                      type: '$$enum'\n                    }, {\n                      description: 'Text, image, or audio input to the model, used to generate a response.\\nCan also contain previous assistant responses.\\n',\n                      name: 'content',\n                      properties: [{\n                        description: 'A text input to the model.\\n',\n                        meta: [{\n                          name: 'required',\n                          value: 'true'\n                        }],\n                        name: 'Text input',\n                        type: 'string'\n                      }, {\n                        description: 'A list of one or many input items to the model, containing different content \\ntypes.\\n',\n                        meta: [{\n                          name: 'required',\n                          value: 'true'\n                        }],\n                        name: 'Input item content list',\n                        properties: [{\n                          description: 'A text input to the model.',\n                          meta: [],\n                          name: 'Input text',\n                          properties: [{\n                            description: _jsxs(_components.p, {\n                              children: [\"The type of the input item. Always\", ' ', _jsx(_components.code, {\n                                children: \"input_text\"\n                              }), \".\"]\n                            }),\n                            meta: [{\n                              name: 'required',\n                              value: 'true'\n                            }, {\n                              name: 'defaults',\n                              value: 'input_text'\n                            }, {\n                              name: 'enum-type',\n                              value: 'string'\n                            }],\n                            name: 'type',\n                            properties: [{\n                              description: '',\n                              meta: [],\n                              name: 'input_text',\n                              type: 'string'\n                            }],\n                            type: '$$enum'\n                          }, {\n                            description: 'The text input to the model.',\n                            meta: [{\n                              name: 'required',\n                              value: 'true'\n                            }],\n                            name: 'text',\n                            type: 'string'\n                          }],\n                          type: 'object'\n                        }, {\n                          description: _jsxs(_components.p, {\n                            children: [\"An image input to the model. Learn about\", ' ', _jsx(_components.a, {\n                              href: \"/docs/guides/vision\",\n                              children: \"image inputs\"\n                            }), \".\"]\n                          }),\n                          meta: [],\n                          name: 'Input image',\n                          properties: [{\n                            description: _jsxs(_components.p, {\n                              children: [\"The type of the input item. Always\", ' ', _jsx(_components.code, {\n                                children: \"input_image\"\n                              }), \".\"]\n                            }),\n                            meta: [{\n                              name: 'required',\n                              value: 'true'\n                            }, {\n                              name: 'defaults',\n                              value: 'input_image'\n                            }, {\n                              name: 'enum-type',\n                              value: 'string'\n                            }],\n                            name: 'type',\n                            properties: [{\n                              description: '',\n                              meta: [],\n                              name: 'input_image',\n                              type: 'string'\n                            }],\n                            type: '$$enum'\n                          }, {\n                            description: '',\n                            name: 'image_url',\n                            properties: [{\n                              description: 'The URL of the image to be sent to the model. A fully qualified URL or base64 encoded image in a data URL.',\n                              meta: [],\n                              name: 'image_url',\n                              type: 'string'\n                            }, {\n                              description: '',\n                              meta: [],\n                              name: 'image_url',\n                              type: 'null'\n                            }],\n                            type: '$$union'\n                          }, {\n                            description: '',\n                            name: 'file_id',\n                            properties: [{\n                              description: 'The ID of the file to be sent to the model.',\n                              meta: [],\n                              name: 'file_id',\n                              type: 'string'\n                            }, {\n                              description: '',\n                              meta: [],\n                              name: 'file_id',\n                              type: 'null'\n                            }],\n                            type: '$$union'\n                          }, {\n                            description: _jsxs(_components.p, {\n                              children: [\"The detail level of the image to be sent to the model. One of\", ' ', _jsx(_components.code, {\n                                children: \"high\"\n                              }), \",\", ' ', _jsx(_components.code, {\n                                children: \"low\"\n                              }), \", or\", ' ', _jsx(_components.code, {\n                                children: \"auto\"\n                              }), \". Defaults to\", ' ', _jsx(_components.code, {\n                                children: \"auto\"\n                              }), \".\"]\n                            }),\n                            meta: [{\n                              name: 'required',\n                              value: 'true'\n                            }, {\n                              name: 'enum-type',\n                              value: 'string'\n                            }],\n                            name: 'detail',\n                            properties: [{\n                              description: '',\n                              meta: [],\n                              name: 'low',\n                              type: 'string'\n                            }, {\n                              description: '',\n                              meta: [],\n                              name: 'high',\n                              type: 'string'\n                            }, {\n                              description: '',\n                              meta: [],\n                              name: 'auto',\n                              type: 'string'\n                            }],\n                            type: '$$enum'\n                          }],\n                          type: 'object'\n                        }, {\n                          description: 'A file input to the model.',\n                          meta: [],\n                          name: 'Input file',\n                          properties: [{\n                            description: _jsxs(_components.p, {\n                              children: [\"The type of the input item. Always\", ' ', _jsx(_components.code, {\n                                children: \"input_file\"\n                              }), \".\"]\n                            }),\n                            meta: [{\n                              name: 'required',\n                              value: 'true'\n                            }, {\n                              name: 'defaults',\n                              value: 'input_file'\n                            }, {\n                              name: 'enum-type',\n                              value: 'string'\n                            }],\n                            name: 'type',\n                            properties: [{\n                              description: '',\n                              meta: [],\n                              name: 'input_file',\n                              type: 'string'\n                            }],\n                            type: '$$enum'\n                          }, {\n                            description: '',\n                            name: 'file_id',\n                            properties: [{\n                              description: 'The ID of the file to be sent to the model.',\n                              meta: [],\n                              name: 'file_id',\n                              type: 'string'\n                            }, {\n                              description: '',\n                              meta: [],\n                              name: 'file_id',\n                              type: 'null'\n                            }],\n                            type: '$$union'\n                          }, {\n                            description: 'The name of the file to be sent to the model.',\n                            meta: [],\n                            name: 'filename',\n                            type: 'string'\n                          }, {\n                            description: 'The content of the file to be sent to the model.\\n',\n                            meta: [],\n                            name: 'file_data',\n                            type: 'string'\n                          }],\n                          type: 'object'\n                        }],\n                        type: '$$array'\n                      }],\n                      type: '$$xor'\n                    }, {\n                      description: _jsxs(_components.p, {\n                        children: [\"The type of the message input. Always\", ' ', _jsx(_components.code, {\n                          children: \"message\"\n                        }), \".\"]\n                      }),\n                      meta: [{\n                        name: 'enum-type',\n                        value: 'string'\n                      }],\n                      name: 'type',\n                      properties: [{\n                        description: '',\n                        meta: [],\n                        name: 'message',\n                        type: 'string'\n                      }],\n                      type: '$$enum'\n                    }],\n                    type: 'object'\n                  }, {\n                    description: _jsxs(_components.p, {\n                      children: [\"A message input to the model with a role indicating instruction following hierarchy. Instructions given with the\", ' ', _jsx(_components.code, {\n                        children: \"developer\"\n                      }), ' ', \"or\", ' ', _jsx(_components.code, {\n                        children: \"system\"\n                      }), ' ', \"role take precedence over instructions given with the\", ' ', _jsx(_components.code, {\n                        children: \"user\"\n                      }), ' ', \"role. Messages with the\", ' ', _jsx(_components.code, {\n                        children: \"assistant\"\n                      }), ' ', \"role are presumed to have been generated by the model in previous interactions.\"]\n                    }),\n                    meta: [],\n                    name: 'Eval message object',\n                    properties: [{\n                      description: _jsxs(_components.p, {\n                        children: [\"The role of the message input. One of\", ' ', _jsx(_components.code, {\n                          children: \"user\"\n                        }), \",\", ' ', _jsx(_components.code, {\n                          children: \"assistant\"\n                        }), \",\", ' ', _jsx(_components.code, {\n                          children: \"system\"\n                        }), \", or\", ' ', _jsx(_components.code, {\n                          children: \"developer\"\n                        }), \".\"]\n                      }),\n                      meta: [{\n                        name: 'required',\n                        value: 'true'\n                      }, {\n                        name: 'enum-type',\n                        value: 'string'\n                      }],\n                      name: 'role',\n                      properties: [{\n                        description: '',\n                        meta: [],\n                        name: 'user',\n                        type: 'string'\n                      }, {\n                        description: '',\n                        meta: [],\n                        name: 'assistant',\n                        type: 'string'\n                      }, {\n                        description: '',\n                        meta: [],\n                        name: 'system',\n                        type: 'string'\n                      }, {\n                        description: '',\n                        meta: [],\n                        name: 'developer',\n                        type: 'string'\n                      }],\n                      type: '$$enum'\n                    }, {\n                      description: 'Text inputs to the model - can contain template strings.\\n',\n                      name: 'content',\n                      properties: [{\n                        description: 'A text input to the model.\\n',\n                        meta: [{\n                          name: 'required',\n                          value: 'true'\n                        }],\n                        name: 'Text input',\n                        type: 'string'\n                      }, {\n                        description: 'A text input to the model.',\n                        meta: [{\n                          name: 'required',\n                          value: 'true'\n                        }],\n                        name: 'Input text',\n                        properties: [{\n                          description: _jsxs(_components.p, {\n                            children: [\"The type of the input item. Always\", ' ', _jsx(_components.code, {\n                              children: \"input_text\"\n                            }), \".\"]\n                          }),\n                          meta: [{\n                            name: 'required',\n                            value: 'true'\n                          }, {\n                            name: 'defaults',\n                            value: 'input_text'\n                          }, {\n                            name: 'enum-type',\n                            value: 'string'\n                          }],\n                          name: 'type',\n                          properties: [{\n                            description: '',\n                            meta: [],\n                            name: 'input_text',\n                            type: 'string'\n                          }],\n                          type: '$$enum'\n                        }, {\n                          description: 'The text input to the model.',\n                          meta: [{\n                            name: 'required',\n                            value: 'true'\n                          }],\n                          name: 'text',\n                          type: 'string'\n                        }],\n                        type: 'object'\n                      }, {\n                        description: 'A text output from the model.\\n',\n                        meta: [{\n                          name: 'required',\n                          value: 'true'\n                        }],\n                        name: 'Output text',\n                        properties: [{\n                          description: _jsxs(_components.p, {\n                            children: [\"The type of the output text. Always\", ' ', _jsx(_components.code, {\n                              children: \"output_text\"\n                            }), \".\"]\n                          }),\n                          meta: [{\n                            name: 'required',\n                            value: 'true'\n                          }, {\n                            name: 'enum-type',\n                            value: 'string'\n                          }],\n                          name: 'type',\n                          properties: [{\n                            description: '',\n                            meta: [],\n                            name: 'output_text',\n                            type: 'string'\n                          }],\n                          type: '$$enum'\n                        }, {\n                          description: 'The text output from the model.\\n',\n                          meta: [{\n                            name: 'required',\n                            value: 'true'\n                          }],\n                          name: 'text',\n                          type: 'string'\n                        }],\n                        type: 'object'\n                      }],\n                      type: '$$xor'\n                    }, {\n                      description: _jsxs(_components.p, {\n                        children: [\"The type of the message input. Always\", ' ', _jsx(_components.code, {\n                          children: \"message\"\n                        }), \".\"]\n                      }),\n                      meta: [{\n                        name: 'enum-type',\n                        value: 'string'\n                      }],\n                      name: 'type',\n                      properties: [{\n                        description: '',\n                        meta: [],\n                        name: 'message',\n                        type: 'string'\n                      }],\n                      type: '$$enum'\n                    }],\n                    type: 'object'\n                  }],\n                  type: '$$array'\n                }],\n                type: 'object'\n              }, {\n                description: '',\n                meta: [],\n                name: 'ItemReferenceInputMessages',\n                properties: [{\n                  description: _jsxs(_components.p, {\n                    children: [\"The type of input messages. Always\", ' ', _jsx(_components.code, {\n                      children: \"item_reference\"\n                    }), \".\"]\n                  }),\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }, {\n                    name: 'enum-type',\n                    value: 'string'\n                  }],\n                  name: 'type',\n                  properties: [{\n                    description: '',\n                    meta: [],\n                    name: 'item_reference',\n                    type: 'string'\n                  }],\n                  type: '$$enum'\n                }, {\n                  description: 'A reference to a variable in the \"item\" namespace. Ie, \"item.name\"',\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }],\n                  name: 'item_reference',\n                  type: 'string'\n                }],\n                type: 'object'\n              }],\n              type: '$$xor'\n            }, {\n              description: '',\n              meta: [],\n              name: 'sampling_params',\n              properties: [{\n                description: 'A higher temperature increases randomness in the outputs.',\n                meta: [{\n                  name: 'defaults',\n                  value: 1\n                }],\n                name: 'temperature',\n                type: 'number'\n              }, {\n                description: 'The maximum number of tokens in the generated output.',\n                meta: [],\n                name: 'max_completion_tokens',\n                type: 'integer'\n              }, {\n                description: 'An alternative to temperature for nucleus sampling; 1.0 includes all tokens.',\n                meta: [{\n                  name: 'defaults',\n                  value: 1\n                }],\n                name: 'top_p',\n                type: 'number'\n              }, {\n                description: 'A seed value to initialize the randomness, during sampling.',\n                meta: [{\n                  name: 'defaults',\n                  value: 42\n                }],\n                name: 'seed',\n                type: 'integer'\n              }],\n              type: 'object'\n            }, {\n              description: 'The name of the model to use for generating completions (e.g. \"o3-mini\").',\n              meta: [],\n              name: 'model',\n              type: 'string'\n            }, {\n              description: '',\n              name: 'source',\n              properties: [{\n                description: '',\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'EvalJsonlFileContentSource',\n                properties: [{\n                  description: _jsxs(_components.p, {\n                    children: [\"The type of jsonl source. Always\", ' ', _jsx(_components.code, {\n                      children: \"file_content\"\n                    }), \".\"]\n                  }),\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }, {\n                    name: 'defaults',\n                    value: 'file_content'\n                  }, {\n                    name: 'enum-type',\n                    value: 'string'\n                  }],\n                  name: 'type',\n                  properties: [{\n                    description: '',\n                    meta: [],\n                    name: 'file_content',\n                    type: 'string'\n                  }],\n                  type: '$$enum'\n                }, {\n                  description: 'The content of the jsonl file.',\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }],\n                  name: 'content',\n                  properties: [{\n                    description: '',\n                    meta: [],\n                    name: 'items',\n                    properties: [{\n                      description: '',\n                      meta: [{\n                        name: 'required',\n                        value: 'true'\n                      }],\n                      name: 'item',\n                      type: 'object'\n                    }, {\n                      description: '',\n                      meta: [],\n                      name: 'sample',\n                      type: 'object'\n                    }],\n                    type: 'object'\n                  }],\n                  type: '$$array'\n                }],\n                type: 'object'\n              }, {\n                description: '',\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'EvalJsonlFileIdSource',\n                properties: [{\n                  description: _jsxs(_components.p, {\n                    children: [\"The type of jsonl source. Always\", ' ', _jsx(_components.code, {\n                      children: \"file_id\"\n                    }), \".\"]\n                  }),\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }, {\n                    name: 'defaults',\n                    value: 'file_id'\n                  }, {\n                    name: 'enum-type',\n                    value: 'string'\n                  }],\n                  name: 'type',\n                  properties: [{\n                    description: '',\n                    meta: [],\n                    name: 'file_id',\n                    type: 'string'\n                  }],\n                  type: '$$enum'\n                }, {\n                  description: 'The identifier of the file.',\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }],\n                  name: 'id',\n                  type: 'string'\n                }],\n                type: 'object'\n              }, {\n                description: 'A StoredCompletionsRunDataSource configuration describing a set of filters\\n',\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'StoredCompletionsRunDataSource',\n                properties: [{\n                  description: _jsxs(_components.p, {\n                    children: [\"The type of source. Always\", ' ', _jsx(_components.code, {\n                      children: \"stored_completions\"\n                    }), \".\"]\n                  }),\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }, {\n                    name: 'defaults',\n                    value: 'stored_completions'\n                  }, {\n                    name: 'enum-type',\n                    value: 'string'\n                  }],\n                  name: 'type',\n                  properties: [{\n                    description: '',\n                    meta: [],\n                    name: 'stored_completions',\n                    type: 'string'\n                  }],\n                  type: '$$enum'\n                }, {\n                  description: 'Set of 16 key-value pairs that can be attached to an object. This can be\\nuseful for storing additional information about the object in a structured\\nformat, and querying for objects via API or the dashboard. \\n\\nKeys are strings with a maximum length of 64 characters. Values are strings\\nwith a maximum length of 512 characters.\\n',\n                  meta: [{\n                    name: 'nullable',\n                    value: 'true'\n                  }],\n                  name: 'metadata',\n                  type: 'object'\n                }, {\n                  description: 'An optional model to filter by (e.g., \\'gpt-4o\\').',\n                  meta: [{\n                    name: 'nullable',\n                    value: 'true'\n                  }],\n                  name: 'model',\n                  type: 'string'\n                }, {\n                  description: 'An optional Unix timestamp to filter items created after this time.',\n                  meta: [{\n                    name: 'nullable',\n                    value: 'true'\n                  }],\n                  name: 'created_after',\n                  type: 'integer'\n                }, {\n                  description: 'An optional Unix timestamp to filter items created before this time.',\n                  meta: [{\n                    name: 'nullable',\n                    value: 'true'\n                  }],\n                  name: 'created_before',\n                  type: 'integer'\n                }, {\n                  description: 'An optional maximum number of items to return.',\n                  meta: [{\n                    name: 'nullable',\n                    value: 'true'\n                  }],\n                  name: 'limit',\n                  type: 'integer'\n                }],\n                type: 'object'\n              }],\n              type: '$$xor'\n            }],\n            type: 'object'\n          }, {\n            description: 'A ResponsesRunDataSource object describing a model sampling configuration.\\n',\n            meta: [{\n              name: 'required',\n              value: 'true'\n            }],\n            name: 'ResponsesRunDataSource',\n            properties: [{\n              description: _jsxs(_components.p, {\n                children: [\"The type of run data source. Always\", ' ', _jsx(_components.code, {\n                  children: \"completions\"\n                }), \".\"]\n              }),\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }, {\n                name: 'defaults',\n                value: 'completions'\n              }, {\n                name: 'enum-type',\n                value: 'string'\n              }],\n              name: 'type',\n              properties: [{\n                description: '',\n                meta: [],\n                name: 'completions',\n                type: 'string'\n              }],\n              type: '$$enum'\n            }, {\n              description: '',\n              name: 'input_messages',\n              properties: [{\n                description: '',\n                meta: [],\n                name: 'input_messages',\n                properties: [{\n                  description: _jsxs(_components.p, {\n                    children: [\"The type of input messages. Always\", ' ', _jsx(_components.code, {\n                      children: \"template\"\n                    }), \".\"]\n                  }),\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }, {\n                    name: 'enum-type',\n                    value: 'string'\n                  }],\n                  name: 'type',\n                  properties: [{\n                    description: '',\n                    meta: [],\n                    name: 'template',\n                    type: 'string'\n                  }],\n                  type: '$$enum'\n                }, {\n                  description: 'A list of chat messages forming the prompt or context. May include variable references to the \"item\" namespace, ie {{item.name}}.',\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }],\n                  name: 'template',\n                  properties: [{\n                    description: '',\n                    meta: [],\n                    name: 'ChatMessage',\n                    properties: [{\n                      description: 'The role of the message (e.g. \"system\", \"assistant\", \"user\").',\n                      meta: [{\n                        name: 'required',\n                        value: 'true'\n                      }],\n                      name: 'role',\n                      type: 'string'\n                    }, {\n                      description: 'The content of the message.',\n                      meta: [{\n                        name: 'required',\n                        value: 'true'\n                      }],\n                      name: 'content',\n                      type: 'string'\n                    }],\n                    type: 'object'\n                  }, {\n                    description: _jsxs(_components.p, {\n                      children: [\"A message input to the model with a role indicating instruction following hierarchy. Instructions given with the\", ' ', _jsx(_components.code, {\n                        children: \"developer\"\n                      }), ' ', \"or\", ' ', _jsx(_components.code, {\n                        children: \"system\"\n                      }), ' ', \"role take precedence over instructions given with the\", ' ', _jsx(_components.code, {\n                        children: \"user\"\n                      }), ' ', \"role. Messages with the\", ' ', _jsx(_components.code, {\n                        children: \"assistant\"\n                      }), ' ', \"role are presumed to have been generated by the model in previous interactions.\"]\n                    }),\n                    meta: [],\n                    name: 'Eval message object',\n                    properties: [{\n                      description: _jsxs(_components.p, {\n                        children: [\"The role of the message input. One of\", ' ', _jsx(_components.code, {\n                          children: \"user\"\n                        }), \",\", ' ', _jsx(_components.code, {\n                          children: \"assistant\"\n                        }), \",\", ' ', _jsx(_components.code, {\n                          children: \"system\"\n                        }), \", or\", ' ', _jsx(_components.code, {\n                          children: \"developer\"\n                        }), \".\"]\n                      }),\n                      meta: [{\n                        name: 'required',\n                        value: 'true'\n                      }, {\n                        name: 'enum-type',\n                        value: 'string'\n                      }],\n                      name: 'role',\n                      properties: [{\n                        description: '',\n                        meta: [],\n                        name: 'user',\n                        type: 'string'\n                      }, {\n                        description: '',\n                        meta: [],\n                        name: 'assistant',\n                        type: 'string'\n                      }, {\n                        description: '',\n                        meta: [],\n                        name: 'system',\n                        type: 'string'\n                      }, {\n                        description: '',\n                        meta: [],\n                        name: 'developer',\n                        type: 'string'\n                      }],\n                      type: '$$enum'\n                    }, {\n                      description: 'Text inputs to the model - can contain template strings.\\n',\n                      name: 'content',\n                      properties: [{\n                        description: 'A text input to the model.\\n',\n                        meta: [{\n                          name: 'required',\n                          value: 'true'\n                        }],\n                        name: 'Text input',\n                        type: 'string'\n                      }, {\n                        description: 'A text input to the model.',\n                        meta: [{\n                          name: 'required',\n                          value: 'true'\n                        }],\n                        name: 'Input text',\n                        properties: [{\n                          description: _jsxs(_components.p, {\n                            children: [\"The type of the input item. Always\", ' ', _jsx(_components.code, {\n                              children: \"input_text\"\n                            }), \".\"]\n                          }),\n                          meta: [{\n                            name: 'required',\n                            value: 'true'\n                          }, {\n                            name: 'defaults',\n                            value: 'input_text'\n                          }, {\n                            name: 'enum-type',\n                            value: 'string'\n                          }],\n                          name: 'type',\n                          properties: [{\n                            description: '',\n                            meta: [],\n                            name: 'input_text',\n                            type: 'string'\n                          }],\n                          type: '$$enum'\n                        }, {\n                          description: 'The text input to the model.',\n                          meta: [{\n                            name: 'required',\n                            value: 'true'\n                          }],\n                          name: 'text',\n                          type: 'string'\n                        }],\n                        type: 'object'\n                      }, {\n                        description: 'A text output from the model.\\n',\n                        meta: [{\n                          name: 'required',\n                          value: 'true'\n                        }],\n                        name: 'Output text',\n                        properties: [{\n                          description: _jsxs(_components.p, {\n                            children: [\"The type of the output text. Always\", ' ', _jsx(_components.code, {\n                              children: \"output_text\"\n                            }), \".\"]\n                          }),\n                          meta: [{\n                            name: 'required',\n                            value: 'true'\n                          }, {\n                            name: 'enum-type',\n                            value: 'string'\n                          }],\n                          name: 'type',\n                          properties: [{\n                            description: '',\n                            meta: [],\n                            name: 'output_text',\n                            type: 'string'\n                          }],\n                          type: '$$enum'\n                        }, {\n                          description: 'The text output from the model.\\n',\n                          meta: [{\n                            name: 'required',\n                            value: 'true'\n                          }],\n                          name: 'text',\n                          type: 'string'\n                        }],\n                        type: 'object'\n                      }],\n                      type: '$$xor'\n                    }, {\n                      description: _jsxs(_components.p, {\n                        children: [\"The type of the message input. Always\", ' ', _jsx(_components.code, {\n                          children: \"message\"\n                        }), \".\"]\n                      }),\n                      meta: [{\n                        name: 'enum-type',\n                        value: 'string'\n                      }],\n                      name: 'type',\n                      properties: [{\n                        description: '',\n                        meta: [],\n                        name: 'message',\n                        type: 'string'\n                      }],\n                      type: '$$enum'\n                    }],\n                    type: 'object'\n                  }],\n                  type: '$$array'\n                }],\n                type: 'object'\n              }, {\n                description: '',\n                meta: [],\n                name: 'input_messages',\n                properties: [{\n                  description: _jsxs(_components.p, {\n                    children: [\"The type of input messages. Always\", ' ', _jsx(_components.code, {\n                      children: \"item_reference\"\n                    }), \".\"]\n                  }),\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }, {\n                    name: 'enum-type',\n                    value: 'string'\n                  }],\n                  name: 'type',\n                  properties: [{\n                    description: '',\n                    meta: [],\n                    name: 'item_reference',\n                    type: 'string'\n                  }],\n                  type: '$$enum'\n                }, {\n                  description: 'A reference to a variable in the \"item\" namespace. Ie, \"item.name\"',\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }],\n                  name: 'item_reference',\n                  type: 'string'\n                }],\n                type: 'object'\n              }],\n              type: '$$xor'\n            }, {\n              description: '',\n              meta: [],\n              name: 'sampling_params',\n              properties: [{\n                description: 'A higher temperature increases randomness in the outputs.',\n                meta: [{\n                  name: 'defaults',\n                  value: 1\n                }],\n                name: 'temperature',\n                type: 'number'\n              }, {\n                description: 'The maximum number of tokens in the generated output.',\n                meta: [],\n                name: 'max_completion_tokens',\n                type: 'integer'\n              }, {\n                description: 'An alternative to temperature for nucleus sampling; 1.0 includes all tokens.',\n                meta: [{\n                  name: 'defaults',\n                  value: 1\n                }],\n                name: 'top_p',\n                type: 'number'\n              }, {\n                description: 'A seed value to initialize the randomness, during sampling.',\n                meta: [{\n                  name: 'defaults',\n                  value: 42\n                }],\n                name: 'seed',\n                type: 'integer'\n              }],\n              type: 'object'\n            }, {\n              description: 'The name of the model to use for generating completions (e.g. \"o3-mini\").',\n              meta: [],\n              name: 'model',\n              type: 'string'\n            }, {\n              description: '',\n              name: 'source',\n              properties: [{\n                description: '',\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'EvalJsonlFileContentSource',\n                properties: [{\n                  description: _jsxs(_components.p, {\n                    children: [\"The type of jsonl source. Always\", ' ', _jsx(_components.code, {\n                      children: \"file_content\"\n                    }), \".\"]\n                  }),\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }, {\n                    name: 'defaults',\n                    value: 'file_content'\n                  }, {\n                    name: 'enum-type',\n                    value: 'string'\n                  }],\n                  name: 'type',\n                  properties: [{\n                    description: '',\n                    meta: [],\n                    name: 'file_content',\n                    type: 'string'\n                  }],\n                  type: '$$enum'\n                }, {\n                  description: 'The content of the jsonl file.',\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }],\n                  name: 'content',\n                  properties: [{\n                    description: '',\n                    meta: [],\n                    name: 'items',\n                    properties: [{\n                      description: '',\n                      meta: [{\n                        name: 'required',\n                        value: 'true'\n                      }],\n                      name: 'item',\n                      type: 'object'\n                    }, {\n                      description: '',\n                      meta: [],\n                      name: 'sample',\n                      type: 'object'\n                    }],\n                    type: 'object'\n                  }],\n                  type: '$$array'\n                }],\n                type: 'object'\n              }, {\n                description: '',\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'EvalJsonlFileIdSource',\n                properties: [{\n                  description: _jsxs(_components.p, {\n                    children: [\"The type of jsonl source. Always\", ' ', _jsx(_components.code, {\n                      children: \"file_id\"\n                    }), \".\"]\n                  }),\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }, {\n                    name: 'defaults',\n                    value: 'file_id'\n                  }, {\n                    name: 'enum-type',\n                    value: 'string'\n                  }],\n                  name: 'type',\n                  properties: [{\n                    description: '',\n                    meta: [],\n                    name: 'file_id',\n                    type: 'string'\n                  }],\n                  type: '$$enum'\n                }, {\n                  description: 'The identifier of the file.',\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }],\n                  name: 'id',\n                  type: 'string'\n                }],\n                type: 'object'\n              }, {\n                description: 'A EvalResponsesSource object describing a run data source configuration.\\n',\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'EvalResponsesSource',\n                properties: [{\n                  description: _jsxs(_components.p, {\n                    children: [\"The type of run data source. Always\", ' ', _jsx(_components.code, {\n                      children: \"responses\"\n                    }), \".\"]\n                  }),\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }, {\n                    name: 'enum-type',\n                    value: 'string'\n                  }],\n                  name: 'type',\n                  properties: [{\n                    description: '',\n                    meta: [],\n                    name: 'responses',\n                    type: 'string'\n                  }],\n                  type: '$$enum'\n                }, {\n                  description: 'Metadata filter for the responses. This is a query parameter used to select responses.',\n                  meta: [{\n                    name: 'nullable',\n                    value: 'true'\n                  }],\n                  name: 'metadata',\n                  type: 'object'\n                }, {\n                  description: 'The name of the model to find responses for. This is a query parameter used to select responses.',\n                  meta: [{\n                    name: 'nullable',\n                    value: 'true'\n                  }],\n                  name: 'model',\n                  type: 'string'\n                }, {\n                  description: 'Optional search string for instructions. This is a query parameter used to select responses.',\n                  meta: [{\n                    name: 'nullable',\n                    value: 'true'\n                  }],\n                  name: 'instructions_search',\n                  type: 'string'\n                }, {\n                  description: 'Only include items created after this timestamp (inclusive). This is a query parameter used to select responses.',\n                  meta: [{\n                    name: 'nullable',\n                    value: 'true'\n                  }],\n                  name: 'created_after',\n                  type: 'integer'\n                }, {\n                  description: 'Only include items created before this timestamp (inclusive). This is a query parameter used to select responses.',\n                  meta: [{\n                    name: 'nullable',\n                    value: 'true'\n                  }],\n                  name: 'created_before',\n                  type: 'integer'\n                }, {\n                  description: 'Whether the response has tool calls. This is a query parameter used to select responses.',\n                  meta: [{\n                    name: 'nullable',\n                    value: 'true'\n                  }],\n                  name: 'has_tool_calls',\n                  type: 'boolean'\n                }, {\n                  description: _jsxs(_Fragment, {\n                    children: [_jsx(_components.p, {\n                      children: _jsx(_components.strong, {\n                        children: \"o-series models only\"\n                      })\n                    }), _jsxs(_components.p, {\n                      children: [\"Constrains effort on reasoning for\", ' ', _jsx(_components.a, {\n                        href: \"https://platform.openai.com/docs/guides/reasoning\",\n                        children: \"reasoning models\"\n                      }), \". Currently supported values are\", ' ', _jsx(_components.code, {\n                        children: \"low\"\n                      }), \",\", ' ', _jsx(_components.code, {\n                        children: \"medium\"\n                      }), \", and\", ' ', _jsx(_components.code, {\n                        children: \"high\"\n                      }), \". Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.\"]\n                    })]\n                  }),\n                  meta: [{\n                    name: 'defaults',\n                    value: 'medium'\n                  }, {\n                    name: 'nullable',\n                    value: 'true'\n                  }, {\n                    name: 'enum-type',\n                    value: 'string'\n                  }],\n                  name: 'reasoning_effort',\n                  properties: [{\n                    description: '',\n                    meta: [],\n                    name: 'low',\n                    type: 'string'\n                  }, {\n                    description: '',\n                    meta: [],\n                    name: 'medium',\n                    type: 'string'\n                  }, {\n                    description: '',\n                    meta: [],\n                    name: 'high',\n                    type: 'string'\n                  }],\n                  type: '$$enum'\n                }, {\n                  description: 'Sampling temperature. This is a query parameter used to select responses.',\n                  meta: [{\n                    name: 'nullable',\n                    value: 'true'\n                  }],\n                  name: 'temperature',\n                  type: 'number'\n                }, {\n                  description: 'Nucleus sampling parameter. This is a query parameter used to select responses.',\n                  meta: [{\n                    name: 'nullable',\n                    value: 'true'\n                  }],\n                  name: 'top_p',\n                  type: 'number'\n                }, {\n                  description: 'List of user identifiers. This is a query parameter used to select responses.',\n                  meta: [{\n                    name: 'nullable',\n                    value: 'true'\n                  }],\n                  name: 'users',\n                  properties: [{\n                    description: '',\n                    meta: [],\n                    name: 'items',\n                    type: 'string'\n                  }],\n                  type: '$$array'\n                }, {\n                  description: 'Whether to allow parallel tool calls. This is a query parameter used to select responses.',\n                  meta: [{\n                    name: 'nullable',\n                    value: 'true'\n                  }],\n                  name: 'allow_parallel_tool_calls',\n                  type: 'boolean'\n                }],\n                type: 'object'\n              }],\n              type: '$$xor'\n            }],\n            type: 'object'\n          }],\n          type: '$$xor'\n        }],\n        rootProperty: undefined,\n        symbolDef: undefined,\n        title: 'Request body'\n      }, {\n        description: _jsxs(_components.p, {\n          children: [\"The\", ' ', _jsx(_components.a, {\n            href: \"/docs/api-reference/evals/run-object\",\n            children: \"EvalRun\"\n          }), ' ', \"object matching the specified ID.\"]\n        }),\n        properties: [],\n        title: 'Response'\n      }],\n      description: _jsx(_components.p, {\n        children: \"Create a new evaluation run. This is the endpoint that will kick off grading.\"\n      }),\n      examples: {\n        groups: [{\n          description: 'Example request',\n          examples: [{\n            codeblock: {\n              tabs: [{\n                code: 'curl https://api.openai.com/v1/evals/eval_67e579652b548190aaa83ada4b125f47/runs \\\\\\n  -X POST \\\\\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\\\\n  -H \"Content-Type: application/json\" \\\\\\n  -d \\'{\"name\":\"gpt-4o-mini\",\"data_source\":{\"type\":\"completions\",\"input_messages\":{\"type\":\"template\",\"template\":[{\"role\":\"developer\",\"content\":\"Categorize a given news headline into one of the following topics: Technology, Markets, World, Business, or Sports.\\\\n\\\\n# Steps\\\\n\\\\n1. Analyze the content of the news headline to understand its primary focus.\\\\n2. Extract the subject matter, identifying any key indicators or keywords.\\\\n3. Use the identified indicators to determine the most suitable category out of the five options: Technology, Markets, World, Business, or Sports.\\\\n4. Ensure only one category is selected per headline.\\\\n\\\\n# Output Format\\\\n\\\\nRespond with the chosen category as a single word. For instance: \\\\\"Technology\\\\\", \\\\\"Markets\\\\\", \\\\\"World\\\\\", \\\\\"Business\\\\\", or \\\\\"Sports\\\\\".\\\\n\\\\n# Examples\\\\n\\\\n**Input**: \\\\\"Apple Unveils New iPhone Model, Featuring Advanced AI Features\\\\\"  \\\\n**Output**: \\\\\"Technology\\\\\"\\\\n\\\\n**Input**: \\\\\"Global Stocks Mixed as Investors Await Central Bank Decisions\\\\\"  \\\\n**Output**: \\\\\"Markets\\\\\"\\\\n\\\\n**Input**: \\\\\"War in Ukraine: Latest Updates on Negotiation Status\\\\\"  \\\\n**Output**: \\\\\"World\\\\\"\\\\n\\\\n**Input**: \\\\\"Microsoft in Talks to Acquire Gaming Company for $2 Billion\\\\\"  \\\\n**Output**: \\\\\"Business\\\\\"\\\\n\\\\n**Input**: \\\\\"Manchester United Secures Win in Premier League Football Match\\\\\"  \\\\n**Output**: \\\\\"Sports\\\\\" \\\\n\\\\n# Notes\\\\n\\\\n- If the headline appears to fit into more than one category, choose the most dominant theme.\\\\n- Keywords or phrases such as \\\\\"stocks\\\\\", \\\\\"company acquisition\\\\\", \\\\\"match\\\\\", or technological brands can be good indicators for classification.\\\\n\"} , {\"role\":\"user\",\"content\":\"{{item.input}}\"}]},\"sampling_params\":{\"temperature\":1,\"max_completions_tokens\":2048,\"top_p\":1,\"seed\":42},\"model\":\"gpt-4o-mini\",\"source\":{\"type\":\"file_content\",\"content\":[{\"item\":{\"input\":\"Tech Company Launches Advanced Artificial Intelligence Platform\",\"ground_truth\":\"Technology\"}}]}}\\'\\n',\n                highlighted: {\n                  annotations: [],\n                  code: 'curl https://api.openai.com/v1/evals/eval_67e579652b548190aaa83ada4b125f47/runs \\\\\\n  -X POST \\\\\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\\\\n  -H \"Content-Type: application/json\" \\\\\\n  -d \\'{\"name\":\"gpt-4o-mini\",\"data_source\":{\"type\":\"completions\",\"input_messages\":{\"type\":\"template\",\"template\":[{\"role\":\"developer\",\"content\":\"Categorize a given news headline into one of the following topics: Technology, Markets, World, Business, or Sports.\\\\n\\\\n# Steps\\\\n\\\\n1. Analyze the content of the news headline to understand its primary focus.\\\\n2. Extract the subject matter, identifying any key indicators or keywords.\\\\n3. Use the identified indicators to determine the most suitable category out of the five options: Technology, Markets, World, Business, or Sports.\\\\n4. Ensure only one category is selected per headline.\\\\n\\\\n# Output Format\\\\n\\\\nRespond with the chosen category as a single word. For instance: \\\\\"Technology\\\\\", \\\\\"Markets\\\\\", \\\\\"World\\\\\", \\\\\"Business\\\\\", or \\\\\"Sports\\\\\".\\\\n\\\\n# Examples\\\\n\\\\n**Input**: \\\\\"Apple Unveils New iPhone Model, Featuring Advanced AI Features\\\\\"  \\\\n**Output**: \\\\\"Technology\\\\\"\\\\n\\\\n**Input**: \\\\\"Global Stocks Mixed as Investors Await Central Bank Decisions\\\\\"  \\\\n**Output**: \\\\\"Markets\\\\\"\\\\n\\\\n**Input**: \\\\\"War in Ukraine: Latest Updates on Negotiation Status\\\\\"  \\\\n**Output**: \\\\\"World\\\\\"\\\\n\\\\n**Input**: \\\\\"Microsoft in Talks to Acquire Gaming Company for $2 Billion\\\\\"  \\\\n**Output**: \\\\\"Business\\\\\"\\\\n\\\\n**Input**: \\\\\"Manchester United Secures Win in Premier League Football Match\\\\\"  \\\\n**Output**: \\\\\"Sports\\\\\" \\\\n\\\\n# Notes\\\\n\\\\n- If the headline appears to fit into more than one category, choose the most dominant theme.\\\\n- Keywords or phrases such as \\\\\"stocks\\\\\", \\\\\"company acquisition\\\\\", \\\\\"match\\\\\", or technological brands can be good indicators for classification.\\\\n\"} , {\"role\":\"user\",\"content\":\"{{item.input}}\"}]},\"sampling_params\":{\"temperature\":1,\"max_completions_tokens\":2048,\"top_p\":1,\"seed\":42},\"model\":\"gpt-4o-mini\",\"source\":{\"type\":\"file_content\",\"content\":[{\"item\":{\"input\":\"Tech Company Launches Advanced Artificial Intelligence Platform\",\"ground_truth\":\"Technology\"}}]}}\\'\\n',\n                  lang: 'shellscript',\n                  meta: 'bash',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['curl', '#DCDCAA'], ' ', ['https://api.openai.com/v1/evals/eval_67e579652b548190aaa83ada4b125f47/runs', '#CE9178'], ' ', ['\\\\', '#D7BA7D'], '\\n  ', ['-X POST', '#CE9178'], ' ', ['\\\\', '#D7BA7D'], '\\n  ', ['-H \"Authorization: Bearer', '#CE9178'], ' ', ['$OPENAI_API_KEY', '#9CDCFE'], ['\"', '#CE9178'], ' ', ['\\\\', '#D7BA7D'], '\\n  ', ['-H \"Content-Type: application/json\"', '#CE9178'], ' ', ['\\\\', '#D7BA7D'], '\\n  ', ['-d \\'{\"name\":\"gpt-4o-mini\",\"data_source\":{\"type\":\"completions\",\"input_messages\":{\"type\":\"template\",\"template\":[{\"role\":\"developer\",\"content\":\"Categorize a given news headline into one of the following topics: Technology, Markets, World, Business, or Sports.\\\\n\\\\n# Steps\\\\n\\\\n1. Analyze the content of the news headline to understand its primary focus.\\\\n2. Extract the subject matter, identifying any key indicators or keywords.\\\\n3. Use the identified indicators to determine the most suitable category out of the five options: Technology, Markets, World, Business, or Sports.\\\\n4. Ensure only one category is selected per headline.\\\\n\\\\n# Output Format\\\\n\\\\nRespond with the chosen category as a single word. For instance: \\\\\"Technology\\\\\", \\\\\"Markets\\\\\", \\\\\"World\\\\\", \\\\\"Business\\\\\", or \\\\\"Sports\\\\\".\\\\n\\\\n# Examples\\\\n\\\\n**Input**: \\\\\"Apple Unveils New iPhone Model, Featuring Advanced AI Features\\\\\"  \\\\n**Output**: \\\\\"Technology\\\\\"\\\\n\\\\n**Input**: \\\\\"Global Stocks Mixed as Investors Await Central Bank Decisions\\\\\"  \\\\n**Output**: \\\\\"Markets\\\\\"\\\\n\\\\n**Input**: \\\\\"War in Ukraine: Latest Updates on Negotiation Status\\\\\"  \\\\n**Output**: \\\\\"World\\\\\"\\\\n\\\\n**Input**: \\\\\"Microsoft in Talks to Acquire Gaming Company for $2 Billion\\\\\"  \\\\n**Output**: \\\\\"Business\\\\\"\\\\n\\\\n**Input**: \\\\\"Manchester United Secures Win in Premier League Football Match\\\\\"  \\\\n**Output**: \\\\\"Sports\\\\\" \\\\n\\\\n# Notes\\\\n\\\\n- If the headline appears to fit into more than one category, choose the most dominant theme.\\\\n- Keywords or phrases such as \\\\\"stocks\\\\\", \\\\\"company acquisition\\\\\", \\\\\"match\\\\\", or technological brands can be good indicators for classification.\\\\n\"} , {\"role\":\"user\",\"content\":\"{{item.input}}\"}]},\"sampling_params\":{\"temperature\":1,\"max_completions_tokens\":2048,\"top_p\":1,\"seed\":42},\"model\":\"gpt-4o-mini\",\"source\":{\"type\":\"file_content\",\"content\":[{\"item\":{\"input\":\"Tech Company Launches Advanced Artificial Intelligence Platform\",\"ground_truth\":\"Technology\"}}]}}\\'', '#CE9178'], '\\n'],\n                  value: 'curl https://api.openai.com/v1/evals/eval_67e579652b548190aaa83ada4b125f47/runs \\\\\\n  -X POST \\\\\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\\\\n  -H \"Content-Type: application/json\" \\\\\\n  -d \\'{\"name\":\"gpt-4o-mini\",\"data_source\":{\"type\":\"completions\",\"input_messages\":{\"type\":\"template\",\"template\":[{\"role\":\"developer\",\"content\":\"Categorize a given news headline into one of the following topics: Technology, Markets, World, Business, or Sports.\\\\n\\\\n# Steps\\\\n\\\\n1. Analyze the content of the news headline to understand its primary focus.\\\\n2. Extract the subject matter, identifying any key indicators or keywords.\\\\n3. Use the identified indicators to determine the most suitable category out of the five options: Technology, Markets, World, Business, or Sports.\\\\n4. Ensure only one category is selected per headline.\\\\n\\\\n# Output Format\\\\n\\\\nRespond with the chosen category as a single word. For instance: \\\\\"Technology\\\\\", \\\\\"Markets\\\\\", \\\\\"World\\\\\", \\\\\"Business\\\\\", or \\\\\"Sports\\\\\".\\\\n\\\\n# Examples\\\\n\\\\n**Input**: \\\\\"Apple Unveils New iPhone Model, Featuring Advanced AI Features\\\\\"  \\\\n**Output**: \\\\\"Technology\\\\\"\\\\n\\\\n**Input**: \\\\\"Global Stocks Mixed as Investors Await Central Bank Decisions\\\\\"  \\\\n**Output**: \\\\\"Markets\\\\\"\\\\n\\\\n**Input**: \\\\\"War in Ukraine: Latest Updates on Negotiation Status\\\\\"  \\\\n**Output**: \\\\\"World\\\\\"\\\\n\\\\n**Input**: \\\\\"Microsoft in Talks to Acquire Gaming Company for $2 Billion\\\\\"  \\\\n**Output**: \\\\\"Business\\\\\"\\\\n\\\\n**Input**: \\\\\"Manchester United Secures Win in Premier League Football Match\\\\\"  \\\\n**Output**: \\\\\"Sports\\\\\" \\\\n\\\\n# Notes\\\\n\\\\n- If the headline appears to fit into more than one category, choose the most dominant theme.\\\\n- Keywords or phrases such as \\\\\"stocks\\\\\", \\\\\"company acquisition\\\\\", \\\\\"match\\\\\", or technological brands can be good indicators for classification.\\\\n\"} , {\"role\":\"user\",\"content\":\"{{item.input}}\"}]},\"sampling_params\":{\"temperature\":1,\"max_completions_tokens\":2048,\"top_p\":1,\"seed\":42},\"model\":\"gpt-4o-mini\",\"source\":{\"type\":\"file_content\",\"content\":[{\"item\":{\"input\":\"Tech Company Launches Advanced Artificial Intelligence Platform\",\"ground_truth\":\"Technology\"}}]}}\\'\\n'\n                },\n                language: 'bash',\n                title: 'bash'\n              }]\n            },\n            description: ''\n          }]\n        }, {\n          description: 'Example response',\n          examples: [{\n            codeblock: {\n              tabs: [{\n                code: '{\\n  \"object\": \"eval.run\",\\n  \"id\": \"evalrun_67e57965b480819094274e3a32235e4c\",\\n  \"eval_id\": \"eval_67e579652b548190aaa83ada4b125f47\",\\n  \"report_url\": \"https://platform.openai.com/evaluations/eval_67e579652b548190aaa83ada4b125f47&run_id=evalrun_67e57965b480819094274e3a32235e4c\",\\n  \"status\": \"queued\",\\n  \"model\": \"gpt-4o-mini\",\\n  \"name\": \"gpt-4o-mini\",\\n  \"created_at\": 1743092069,\\n  \"result_counts\": {\\n    \"total\": 0,\\n    \"errored\": 0,\\n    \"failed\": 0,\\n    \"passed\": 0\\n  },\\n  \"per_model_usage\": null,\\n  \"per_testing_criteria_results\": null,\\n  \"data_source\": {\\n    \"type\": \"completions\",\\n    \"source\": {\\n      \"type\": \"file_content\",\\n      \"content\": [\\n        {\\n          \"item\": {\\n            \"input\": \"Tech Company Launches Advanced Artificial Intelligence Platform\",\\n            \"ground_truth\": \"Technology\"\\n          }\\n        }\\n      ]\\n    },\\n    \"input_messages\": {\\n      \"type\": \"template\",\\n      \"template\": [\\n        {\\n          \"type\": \"message\",\\n          \"role\": \"developer\",\\n          \"content\": {\\n            \"type\": \"input_text\",\\n            \"text\": \"Categorize a given news headline into one of the following topics: Technology, Markets, World, Business, or Sports.\\\\n\\\\n# Steps\\\\n\\\\n1. Analyze the content of the news headline to understand its primary focus.\\\\n2. Extract the subject matter, identifying any key indicators or keywords.\\\\n3. Use the identified indicators to determine the most suitable category out of the five options: Technology, Markets, World, Business, or Sports.\\\\n4. Ensure only one category is selected per headline.\\\\n\\\\n# Output Format\\\\n\\\\nRespond with the chosen category as a single word. For instance: \\\\\"Technology\\\\\", \\\\\"Markets\\\\\", \\\\\"World\\\\\", \\\\\"Business\\\\\", or \\\\\"Sports\\\\\".\\\\n\\\\n# Examples\\\\n\\\\n**Input**: \\\\\"Apple Unveils New iPhone Model, Featuring Advanced AI Features\\\\\"  \\\\n**Output**: \\\\\"Technology\\\\\"\\\\n\\\\n**Input**: \\\\\"Global Stocks Mixed as Investors Await Central Bank Decisions\\\\\"  \\\\n**Output**: \\\\\"Markets\\\\\"\\\\n\\\\n**Input**: \\\\\"War in Ukraine: Latest Updates on Negotiation Status\\\\\"  \\\\n**Output**: \\\\\"World\\\\\"\\\\n\\\\n**Input**: \\\\\"Microsoft in Talks to Acquire Gaming Company for $2 Billion\\\\\"  \\\\n**Output**: \\\\\"Business\\\\\"\\\\n\\\\n**Input**: \\\\\"Manchester United Secures Win in Premier League Football Match\\\\\"  \\\\n**Output**: \\\\\"Sports\\\\\" \\\\n\\\\n# Notes\\\\n\\\\n- If the headline appears to fit into more than one category, choose the most dominant theme.\\\\n- Keywords or phrases such as \\\\\"stocks\\\\\", \\\\\"company acquisition\\\\\", \\\\\"match\\\\\", or technological brands can be good indicators for classification.\\\\n\"\\n          }\\n        },\\n        {\\n          \"type\": \"message\",\\n          \"role\": \"user\",\\n          \"content\": {\\n            \"type\": \"input_text\",\\n            \"text\": \"{{item.input}}\"\\n          }\\n        }\\n      ]\\n    },\\n    \"model\": \"gpt-4o-mini\",\\n    \"sampling_params\": {\\n      \"seed\": 42,\\n      \"temperature\": 1.0,\\n      \"top_p\": 1.0,\\n      \"max_completions_tokens\": 2048\\n    }\\n  },\\n  \"error\": null,\\n  \"metadata\": {}\\n}\\n',\n                highlighted: {\n                  annotations: [],\n                  code: '{\\n  \"object\": \"eval.run\",\\n  \"id\": \"evalrun_67e57965b480819094274e3a32235e4c\",\\n  \"eval_id\": \"eval_67e579652b548190aaa83ada4b125f47\",\\n  \"report_url\": \"https://platform.openai.com/evaluations/eval_67e579652b548190aaa83ada4b125f47&run_id=evalrun_67e57965b480819094274e3a32235e4c\",\\n  \"status\": \"queued\",\\n  \"model\": \"gpt-4o-mini\",\\n  \"name\": \"gpt-4o-mini\",\\n  \"created_at\": 1743092069,\\n  \"result_counts\": {\\n    \"total\": 0,\\n    \"errored\": 0,\\n    \"failed\": 0,\\n    \"passed\": 0\\n  },\\n  \"per_model_usage\": null,\\n  \"per_testing_criteria_results\": null,\\n  \"data_source\": {\\n    \"type\": \"completions\",\\n    \"source\": {\\n      \"type\": \"file_content\",\\n      \"content\": [\\n        {\\n          \"item\": {\\n            \"input\": \"Tech Company Launches Advanced Artificial Intelligence Platform\",\\n            \"ground_truth\": \"Technology\"\\n          }\\n        }\\n      ]\\n    },\\n    \"input_messages\": {\\n      \"type\": \"template\",\\n      \"template\": [\\n        {\\n          \"type\": \"message\",\\n          \"role\": \"developer\",\\n          \"content\": {\\n            \"type\": \"input_text\",\\n            \"text\": \"Categorize a given news headline into one of the following topics: Technology, Markets, World, Business, or Sports.\\\\n\\\\n# Steps\\\\n\\\\n1. Analyze the content of the news headline to understand its primary focus.\\\\n2. Extract the subject matter, identifying any key indicators or keywords.\\\\n3. Use the identified indicators to determine the most suitable category out of the five options: Technology, Markets, World, Business, or Sports.\\\\n4. Ensure only one category is selected per headline.\\\\n\\\\n# Output Format\\\\n\\\\nRespond with the chosen category as a single word. For instance: \\\\\"Technology\\\\\", \\\\\"Markets\\\\\", \\\\\"World\\\\\", \\\\\"Business\\\\\", or \\\\\"Sports\\\\\".\\\\n\\\\n# Examples\\\\n\\\\n**Input**: \\\\\"Apple Unveils New iPhone Model, Featuring Advanced AI Features\\\\\"  \\\\n**Output**: \\\\\"Technology\\\\\"\\\\n\\\\n**Input**: \\\\\"Global Stocks Mixed as Investors Await Central Bank Decisions\\\\\"  \\\\n**Output**: \\\\\"Markets\\\\\"\\\\n\\\\n**Input**: \\\\\"War in Ukraine: Latest Updates on Negotiation Status\\\\\"  \\\\n**Output**: \\\\\"World\\\\\"\\\\n\\\\n**Input**: \\\\\"Microsoft in Talks to Acquire Gaming Company for $2 Billion\\\\\"  \\\\n**Output**: \\\\\"Business\\\\\"\\\\n\\\\n**Input**: \\\\\"Manchester United Secures Win in Premier League Football Match\\\\\"  \\\\n**Output**: \\\\\"Sports\\\\\" \\\\n\\\\n# Notes\\\\n\\\\n- If the headline appears to fit into more than one category, choose the most dominant theme.\\\\n- Keywords or phrases such as \\\\\"stocks\\\\\", \\\\\"company acquisition\\\\\", \\\\\"match\\\\\", or technological brands can be good indicators for classification.\\\\n\"\\n          }\\n        },\\n        {\\n          \"type\": \"message\",\\n          \"role\": \"user\",\\n          \"content\": {\\n            \"type\": \"input_text\",\\n            \"text\": \"{{item.input}}\"\\n          }\\n        }\\n      ]\\n    },\\n    \"model\": \"gpt-4o-mini\",\\n    \"sampling_params\": {\\n      \"seed\": 42,\\n      \"temperature\": 1.0,\\n      \"top_p\": 1.0,\\n      \"max_completions_tokens\": 2048\\n    }\\n  },\\n  \"error\": null,\\n  \"metadata\": {}\\n}\\n',\n                  lang: 'json',\n                  meta: '',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['{', '#D4D4D4'], '\\n  ', ['\"object\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"eval.run\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['\"id\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"evalrun_67e57965b480819094274e3a32235e4c\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['\"eval_id\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"eval_67e579652b548190aaa83ada4b125f47\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['\"report_url\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"https://platform.openai.com/evaluations/eval_67e579652b548190aaa83ada4b125f47&run_id=evalrun_67e57965b480819094274e3a32235e4c\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['\"status\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"queued\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['\"model\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"gpt-4o-mini\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['\"name\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"gpt-4o-mini\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['\"created_at\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['1743092069', '#B5CEA8'], [',', '#D4D4D4'], '\\n  ', ['\"result_counts\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n    ', ['\"total\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], [',', '#D4D4D4'], '\\n    ', ['\"errored\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], [',', '#D4D4D4'], '\\n    ', ['\"failed\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], [',', '#D4D4D4'], '\\n    ', ['\"passed\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], '\\n  ', ['},', '#D4D4D4'], '\\n  ', ['\"per_model_usage\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['null', '#569CD6'], [',', '#D4D4D4'], '\\n  ', ['\"per_testing_criteria_results\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['null', '#569CD6'], [',', '#D4D4D4'], '\\n  ', ['\"data_source\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n    ', ['\"type\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"completions\"', '#CE9178'], [',', '#D4D4D4'], '\\n    ', ['\"source\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n      ', ['\"type\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"file_content\"', '#CE9178'], [',', '#D4D4D4'], '\\n      ', ['\"content\"', '#9CDCFE'], [': [', '#D4D4D4'], '\\n        ', ['{', '#D4D4D4'], '\\n          ', ['\"item\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n            ', ['\"input\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"Tech Company Launches Advanced Artificial Intelligence Platform\"', '#CE9178'], [',', '#D4D4D4'], '\\n            ', ['\"ground_truth\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"Technology\"', '#CE9178'], '\\n          ', ['}', '#D4D4D4'], '\\n        ', ['}', '#D4D4D4'], '\\n      ', [']', '#D4D4D4'], '\\n    ', ['},', '#D4D4D4'], '\\n    ', ['\"input_messages\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n      ', ['\"type\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"template\"', '#CE9178'], [',', '#D4D4D4'], '\\n      ', ['\"template\"', '#9CDCFE'], [': [', '#D4D4D4'], '\\n        ', ['{', '#D4D4D4'], '\\n          ', ['\"type\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"message\"', '#CE9178'], [',', '#D4D4D4'], '\\n          ', ['\"role\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"developer\"', '#CE9178'], [',', '#D4D4D4'], '\\n          ', ['\"content\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n            ', ['\"type\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"input_text\"', '#CE9178'], [',', '#D4D4D4'], '\\n            ', ['\"text\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"Categorize a given news headline into one of the following topics: Technology, Markets, World, Business, or Sports.', '#CE9178'], ['\\\\n\\\\n', '#D7BA7D'], ['# Steps', '#CE9178'], ['\\\\n\\\\n', '#D7BA7D'], ['1. Analyze the content of the news headline to understand its primary focus.', '#CE9178'], ['\\\\n', '#D7BA7D'], ['2. Extract the subject matter, identifying any key indicators or keywords.', '#CE9178'], ['\\\\n', '#D7BA7D'], ['3. Use the identified indicators to determine the most suitable category out of the five options: Technology, Markets, World, Business, or Sports.', '#CE9178'], ['\\\\n', '#D7BA7D'], ['4. Ensure only one category is selected per headline.', '#CE9178'], ['\\\\n\\\\n', '#D7BA7D'], ['# Output Format', '#CE9178'], ['\\\\n\\\\n', '#D7BA7D'], ['Respond with the chosen category as a single word. For instance:', '#CE9178'], ' ', ['\\\\\"', '#D7BA7D'], ['Technology', '#CE9178'], ['\\\\\"', '#D7BA7D'], [',', '#CE9178'], ' ', ['\\\\\"', '#D7BA7D'], ['Markets', '#CE9178'], ['\\\\\"', '#D7BA7D'], [',', '#CE9178'], ' ', ['\\\\\"', '#D7BA7D'], ['World', '#CE9178'], ['\\\\\"', '#D7BA7D'], [',', '#CE9178'], ' ', ['\\\\\"', '#D7BA7D'], ['Business', '#CE9178'], ['\\\\\"', '#D7BA7D'], [', or', '#CE9178'], ' ', ['\\\\\"', '#D7BA7D'], ['Sports', '#CE9178'], ['\\\\\"', '#D7BA7D'], ['.', '#CE9178'], ['\\\\n\\\\n', '#D7BA7D'], ['# Examples', '#CE9178'], ['\\\\n\\\\n', '#D7BA7D'], ['**Input**:', '#CE9178'], ' ', ['\\\\\"', '#D7BA7D'], ['Apple Unveils New iPhone Model, Featuring Advanced AI Features', '#CE9178'], ['\\\\\"  \\\\n', '#D7BA7D'], ['**Output**:', '#CE9178'], ' ', ['\\\\\"', '#D7BA7D'], ['Technology', '#CE9178'], ['\\\\\"\\\\n\\\\n', '#D7BA7D'], ['**Input**:', '#CE9178'], ' ', ['\\\\\"', '#D7BA7D'], ['Global Stocks Mixed as Investors Await Central Bank Decisions', '#CE9178'], ['\\\\\"  \\\\n', '#D7BA7D'], ['**Output**:', '#CE9178'], ' ', ['\\\\\"', '#D7BA7D'], ['Markets', '#CE9178'], ['\\\\\"\\\\n\\\\n', '#D7BA7D'], ['**Input**:', '#CE9178'], ' ', ['\\\\\"', '#D7BA7D'], ['War in Ukraine: Latest Updates on Negotiation Status', '#CE9178'], ['\\\\\"  \\\\n', '#D7BA7D'], ['**Output**:', '#CE9178'], ' ', ['\\\\\"', '#D7BA7D'], ['World', '#CE9178'], ['\\\\\"\\\\n\\\\n', '#D7BA7D'], ['**Input**:', '#CE9178'], ' ', ['\\\\\"', '#D7BA7D'], ['Microsoft in Talks to Acquire Gaming Company for $2 Billion', '#CE9178'], ['\\\\\"  \\\\n', '#D7BA7D'], ['**Output**:', '#CE9178'], ' ', ['\\\\\"', '#D7BA7D'], ['Business', '#CE9178'], ['\\\\\"\\\\n\\\\n', '#D7BA7D'], ['**Input**:', '#CE9178'], ' ', ['\\\\\"', '#D7BA7D'], ['Manchester United Secures Win in Premier League Football Match', '#CE9178'], ['\\\\\"  \\\\n', '#D7BA7D'], ['**Output**:', '#CE9178'], ' ', ['\\\\\"', '#D7BA7D'], ['Sports', '#CE9178'], ['\\\\\" \\\\n\\\\n', '#D7BA7D'], ['# Notes', '#CE9178'], ['\\\\n\\\\n', '#D7BA7D'], ['- If the headline appears to fit into more than one category, choose the most dominant theme.', '#CE9178'], ['\\\\n', '#D7BA7D'], ['- Keywords or phrases such as', '#CE9178'], ' ', ['\\\\\"', '#D7BA7D'], ['stocks', '#CE9178'], ['\\\\\"', '#D7BA7D'], [',', '#CE9178'], ' ', ['\\\\\"', '#D7BA7D'], ['company acquisition', '#CE9178'], ['\\\\\"', '#D7BA7D'], [',', '#CE9178'], ' ', ['\\\\\"', '#D7BA7D'], ['match', '#CE9178'], ['\\\\\"', '#D7BA7D'], [', or technological brands can be good indicators for classification.', '#CE9178'], ['\\\\n', '#D7BA7D'], ['\"', '#CE9178'], '\\n          ', ['}', '#D4D4D4'], '\\n        ', ['},', '#D4D4D4'], '\\n        ', ['{', '#D4D4D4'], '\\n          ', ['\"type\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"message\"', '#CE9178'], [',', '#D4D4D4'], '\\n          ', ['\"role\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"user\"', '#CE9178'], [',', '#D4D4D4'], '\\n          ', ['\"content\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n            ', ['\"type\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"input_text\"', '#CE9178'], [',', '#D4D4D4'], '\\n            ', ['\"text\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"{{item.input}}\"', '#CE9178'], '\\n          ', ['}', '#D4D4D4'], '\\n        ', ['}', '#D4D4D4'], '\\n      ', [']', '#D4D4D4'], '\\n    ', ['},', '#D4D4D4'], '\\n    ', ['\"model\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"gpt-4o-mini\"', '#CE9178'], [',', '#D4D4D4'], '\\n    ', ['\"sampling_params\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n      ', ['\"seed\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['42', '#B5CEA8'], [',', '#D4D4D4'], '\\n      ', ['\"temperature\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['1.0', '#B5CEA8'], [',', '#D4D4D4'], '\\n      ', ['\"top_p\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['1.0', '#B5CEA8'], [',', '#D4D4D4'], '\\n      ', ['\"max_completions_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['2048', '#B5CEA8'], '\\n    ', ['}', '#D4D4D4'], '\\n  ', ['},', '#D4D4D4'], '\\n  ', ['\"error\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['null', '#569CD6'], [',', '#D4D4D4'], '\\n  ', ['\"metadata\"', '#9CDCFE'], [': {}', '#D4D4D4'], '\\n', ['}', '#D4D4D4'], '\\n'],\n                  value: '{\\n  \"object\": \"eval.run\",\\n  \"id\": \"evalrun_67e57965b480819094274e3a32235e4c\",\\n  \"eval_id\": \"eval_67e579652b548190aaa83ada4b125f47\",\\n  \"report_url\": \"https://platform.openai.com/evaluations/eval_67e579652b548190aaa83ada4b125f47&run_id=evalrun_67e57965b480819094274e3a32235e4c\",\\n  \"status\": \"queued\",\\n  \"model\": \"gpt-4o-mini\",\\n  \"name\": \"gpt-4o-mini\",\\n  \"created_at\": 1743092069,\\n  \"result_counts\": {\\n    \"total\": 0,\\n    \"errored\": 0,\\n    \"failed\": 0,\\n    \"passed\": 0\\n  },\\n  \"per_model_usage\": null,\\n  \"per_testing_criteria_results\": null,\\n  \"data_source\": {\\n    \"type\": \"completions\",\\n    \"source\": {\\n      \"type\": \"file_content\",\\n      \"content\": [\\n        {\\n          \"item\": {\\n            \"input\": \"Tech Company Launches Advanced Artificial Intelligence Platform\",\\n            \"ground_truth\": \"Technology\"\\n          }\\n        }\\n      ]\\n    },\\n    \"input_messages\": {\\n      \"type\": \"template\",\\n      \"template\": [\\n        {\\n          \"type\": \"message\",\\n          \"role\": \"developer\",\\n          \"content\": {\\n            \"type\": \"input_text\",\\n            \"text\": \"Categorize a given news headline into one of the following topics: Technology, Markets, World, Business, or Sports.\\\\n\\\\n# Steps\\\\n\\\\n1. Analyze the content of the news headline to understand its primary focus.\\\\n2. Extract the subject matter, identifying any key indicators or keywords.\\\\n3. Use the identified indicators to determine the most suitable category out of the five options: Technology, Markets, World, Business, or Sports.\\\\n4. Ensure only one category is selected per headline.\\\\n\\\\n# Output Format\\\\n\\\\nRespond with the chosen category as a single word. For instance: \\\\\"Technology\\\\\", \\\\\"Markets\\\\\", \\\\\"World\\\\\", \\\\\"Business\\\\\", or \\\\\"Sports\\\\\".\\\\n\\\\n# Examples\\\\n\\\\n**Input**: \\\\\"Apple Unveils New iPhone Model, Featuring Advanced AI Features\\\\\"  \\\\n**Output**: \\\\\"Technology\\\\\"\\\\n\\\\n**Input**: \\\\\"Global Stocks Mixed as Investors Await Central Bank Decisions\\\\\"  \\\\n**Output**: \\\\\"Markets\\\\\"\\\\n\\\\n**Input**: \\\\\"War in Ukraine: Latest Updates on Negotiation Status\\\\\"  \\\\n**Output**: \\\\\"World\\\\\"\\\\n\\\\n**Input**: \\\\\"Microsoft in Talks to Acquire Gaming Company for $2 Billion\\\\\"  \\\\n**Output**: \\\\\"Business\\\\\"\\\\n\\\\n**Input**: \\\\\"Manchester United Secures Win in Premier League Football Match\\\\\"  \\\\n**Output**: \\\\\"Sports\\\\\" \\\\n\\\\n# Notes\\\\n\\\\n- If the headline appears to fit into more than one category, choose the most dominant theme.\\\\n- Keywords or phrases such as \\\\\"stocks\\\\\", \\\\\"company acquisition\\\\\", \\\\\"match\\\\\", or technological brands can be good indicators for classification.\\\\n\"\\n          }\\n        },\\n        {\\n          \"type\": \"message\",\\n          \"role\": \"user\",\\n          \"content\": {\\n            \"type\": \"input_text\",\\n            \"text\": \"{{item.input}}\"\\n          }\\n        }\\n      ]\\n    },\\n    \"model\": \"gpt-4o-mini\",\\n    \"sampling_params\": {\\n      \"seed\": 42,\\n      \"temperature\": 1.0,\\n      \"top_p\": 1.0,\\n      \"max_completions_tokens\": 2048\\n    }\\n  },\\n  \"error\": null,\\n  \"metadata\": {}\\n}\\n'\n                },\n                language: 'json',\n                title: ''\n              }]\n            },\n            description: ''\n          }]\n        }]\n      },\n      title: 'Create eval run',\n      type: 'rest_post'\n    }]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  toc,\n  frontmatter,\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",{"_13":167,"_773":774,"_775":776},"rawPage","---\ntitle: Create eval run\nlayout: wide\nopenapi: '~/openapi.yaml#POST /evals/{eval_id}/runs'\n---\n\n"]
