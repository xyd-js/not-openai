[{"_1":2,"_777":778},"layout:/docs/api-reference",{"_3":4},"data",{"_5":6,"_763":764,"_769":-7,"_770":768,"_771":772},"sidebarGroups",[7,24,46,76,91,314,392,506,753],{"_8":9,"_10":11},"group","API Reference","items",[12],{"_13":14,"_15":16,"_17":18,"_19":20,"_21":22,"_23":22},"title","Introduction","href","/docs/api-reference/introduction","active",false,"uniqIndex",0,"icon","","sidebarTitle",{"_8":25,"_10":26},"Responses",[27],{"_13":25,"_15":22,"_17":18,"_19":28,"_21":-7,"_10":29},5,[30,34,38,42],{"_13":31,"_15":32,"_17":18,"_19":33,"_21":22,"_23":22},"Create a model response","/docs/api-reference/responses/create",1,{"_13":35,"_15":36,"_17":18,"_19":37,"_21":22,"_23":22},"Get a model response","/docs/api-reference/responses/get",2,{"_13":39,"_15":40,"_17":18,"_19":41,"_21":22,"_23":22},"Delete a model response","/docs/api-reference/responses/delete",3,{"_13":43,"_15":44,"_17":18,"_19":45,"_21":22,"_23":22},"List input items","/docs/api-reference/responses/input-items",4,{"_8":47,"_10":48},"Chat Completions",[49],{"_13":47,"_15":22,"_17":18,"_19":50,"_21":-7,"_10":51},12,[52,56,60,64,68,72],{"_13":53,"_15":54,"_17":18,"_19":55,"_21":22,"_23":22},"Create chat completion","/docs/api-reference/chat/create",6,{"_13":57,"_15":58,"_17":18,"_19":59,"_21":22,"_23":22},"Get chat completion","/docs/api-reference/chat/get",7,{"_13":61,"_15":62,"_17":18,"_19":63,"_21":22,"_23":22},"Get chat messages","/docs/api-reference/chat/getMessages",8,{"_13":65,"_15":66,"_17":18,"_19":67,"_21":22,"_23":22},"List Chat Completions","/docs/api-reference/chat/list",9,{"_13":69,"_15":70,"_17":18,"_19":71,"_21":22,"_23":22},"Update chat completion","/docs/api-reference/chat/update",10,{"_13":73,"_15":74,"_17":18,"_19":75,"_21":22,"_23":22},"Delete chat completion","/docs/api-reference/chat/delete",11,{"_8":77,"_10":78},"Realtime",[79],{"_13":80,"_15":22,"_17":18,"_19":81,"_21":-7,"_10":82},"Session tokens",15,[83,87],{"_13":84,"_15":85,"_17":18,"_19":86,"_21":22,"_23":22},"Create session","/docs/api-reference/realtime-sessions/create",13,{"_13":88,"_15":89,"_17":18,"_19":90,"_21":22,"_23":22},"Create transcription session","/docs/api-reference/realtime-sessions/create-transcription",14,{"_8":92,"_10":93},"Platform APIs",[94,110,126,134,186,226,246,270,290,306],{"_13":95,"_15":22,"_17":18,"_19":96,"_21":-7,"_10":97},"Audio",19,[98,102,106],{"_13":99,"_15":100,"_17":18,"_19":101,"_21":22,"_23":22},"Create speech","/docs/api-reference/audio/createSpeech",16,{"_13":103,"_15":104,"_17":18,"_19":105,"_21":22,"_23":22},"Create transcription","/docs/api-reference/audio/createTranscription",17,{"_13":107,"_15":108,"_17":18,"_19":109,"_21":22,"_23":22},"Create translation","/docs/api-reference/audio/createTranslation",18,{"_13":111,"_15":22,"_17":18,"_19":112,"_21":-7,"_10":113},"Images",23,[114,118,122],{"_13":115,"_15":116,"_17":18,"_19":117,"_21":22,"_23":22},"Create image","/docs/api-reference/images/create",20,{"_13":119,"_15":120,"_17":18,"_19":121,"_21":22,"_23":22},"Create image edit","/docs/api-reference/images/createEdit",21,{"_13":123,"_15":124,"_17":18,"_19":125,"_21":22,"_23":22},"Create image variation","/docs/api-reference/images/createVariation",22,{"_13":127,"_15":22,"_17":18,"_19":128,"_21":-7,"_10":129},"Embeddings",25,[130],{"_13":131,"_15":132,"_17":18,"_19":133,"_21":22,"_23":22},"Create embeddings","/docs/api-reference/embeddings/create",24,{"_13":135,"_15":22,"_17":18,"_19":136,"_21":-7,"_10":137},"Evals",38,[138,142,146,150,154,158,162,166,170,174,178,182],{"_13":139,"_15":140,"_17":18,"_19":141,"_21":22,"_23":22},"Create eval","/docs/api-reference/evals/create",26,{"_13":143,"_15":144,"_17":18,"_19":145,"_21":22,"_23":22},"Get an eval","/docs/api-reference/evals/get",27,{"_13":147,"_15":148,"_17":18,"_19":149,"_21":22,"_23":22},"Update an eval","/docs/api-reference/evals/update",28,{"_13":151,"_15":152,"_17":18,"_19":153,"_21":22,"_23":22},"Delete an eval","/docs/api-reference/evals/delete",29,{"_13":155,"_15":156,"_17":18,"_19":157,"_21":22,"_23":22},"List evals","/docs/api-reference/evals/list",30,{"_13":159,"_15":160,"_17":18,"_19":161,"_21":22,"_23":22},"Get eval runs","/docs/api-reference/evals/getRuns",31,{"_13":163,"_15":164,"_17":18,"_19":165,"_21":22,"_23":22},"Get an eval run","/docs/api-reference/evals/getRun",32,{"_13":167,"_15":168,"_17":18,"_19":169,"_21":22,"_23":22},"Create eval run","/docs/api-reference/evals/createRun",33,{"_13":171,"_15":172,"_17":18,"_19":173,"_21":22,"_23":22},"Cancel eval run","/docs/api-reference/evals/cancelRun",34,{"_13":175,"_15":176,"_17":18,"_19":177,"_21":22,"_23":22},"Delete eval run","/docs/api-reference/evals/deleteRun",35,{"_13":179,"_15":180,"_17":18,"_19":181,"_21":22,"_23":22},"Get an output item of an eval run","/docs/api-reference/evals/getRunOutputItem",36,{"_13":183,"_15":184,"_17":18,"_19":185,"_21":22,"_23":22},"Get eval run output items","/docs/api-reference/evals/getRunOutputItems",37,{"_13":187,"_15":22,"_17":18,"_19":188,"_21":-7,"_10":189},"Fine-tuning",48,[190,194,198,202,206,210,214,218,222],{"_13":191,"_15":192,"_17":18,"_19":193,"_21":22,"_23":22},"Create fine-tuning job","/docs/api-reference/fine-tuning/create",39,{"_13":195,"_15":196,"_17":18,"_19":197,"_21":22,"_23":22},"List fine-tuning jobs","/docs/api-reference/fine-tuning/list",40,{"_13":199,"_15":200,"_17":18,"_19":201,"_21":22,"_23":22},"List fine-tuning events","/docs/api-reference/fine-tuning/list-events",41,{"_13":203,"_15":204,"_17":18,"_19":205,"_21":22,"_23":22},"List fine-tuning checkpoints","/docs/api-reference/fine-tuning/list-checkpoints",42,{"_13":207,"_15":208,"_17":18,"_19":209,"_21":22,"_23":22},"List checkpoint permissions","/docs/api-reference/fine-tuning/list-permissions",43,{"_13":211,"_15":212,"_17":18,"_19":213,"_21":22,"_23":22},"Create checkpoint permissions","/docs/api-reference/fine-tuning/create-permission",44,{"_13":215,"_15":216,"_17":18,"_19":217,"_21":22,"_23":22},"Delete checkpoint permission","/docs/api-reference/fine-tuning/delete-permission",45,{"_13":219,"_15":220,"_17":18,"_19":221,"_21":22,"_23":22},"Retrieve fine-tuning job","/docs/api-reference/fine-tuning/retrieve",46,{"_13":223,"_15":224,"_17":18,"_19":225,"_21":22,"_23":22},"Cancel fine-tuning","/docs/api-reference/fine-tuning/cancel",47,{"_13":227,"_15":22,"_17":18,"_19":228,"_21":-7,"_10":229},"Batch",53,[230,234,238,242],{"_13":231,"_15":232,"_17":18,"_19":233,"_21":22,"_23":22},"Create batch","/docs/api-reference/batch/create",49,{"_13":235,"_15":236,"_17":18,"_19":237,"_21":22,"_23":22},"Retrieve batch","/docs/api-reference/batch/retrieve",50,{"_13":239,"_15":240,"_17":18,"_19":241,"_21":22,"_23":22},"Cancel batch","/docs/api-reference/batch/cancel",51,{"_13":243,"_15":244,"_17":18,"_19":245,"_21":22,"_23":22},"List batch","/docs/api-reference/batch/list",52,{"_13":247,"_15":22,"_17":18,"_19":248,"_21":-7,"_10":249},"Files",59,[250,254,258,262,266],{"_13":251,"_15":252,"_17":18,"_19":253,"_21":22,"_23":22},"Upload file","/docs/api-reference/files/create",54,{"_13":255,"_15":256,"_17":18,"_19":257,"_21":22,"_23":22},"List files","/docs/api-reference/files/list",55,{"_13":259,"_15":260,"_17":18,"_19":261,"_21":22,"_23":22},"Retrieve file","/docs/api-reference/files/retrieve",56,{"_13":263,"_15":264,"_17":18,"_19":265,"_21":22,"_23":22},"Delete file","/docs/api-reference/files/delete",57,{"_13":267,"_15":268,"_17":18,"_19":269,"_21":22,"_23":22},"Retrieve file content","/docs/api-reference/files/retrieve-contents",58,{"_13":271,"_15":22,"_17":18,"_19":272,"_21":-7,"_10":273},"Uploads",64,[274,278,282,286],{"_13":275,"_15":276,"_17":18,"_19":277,"_21":22,"_23":22},"Create upload","/docs/api-reference/uploads/create",60,{"_13":279,"_15":280,"_17":18,"_19":281,"_21":22,"_23":22},"Add upload part","/docs/api-reference/uploads/add-part",61,{"_13":283,"_15":284,"_17":18,"_19":285,"_21":22,"_23":22},"Complete upload","/docs/api-reference/uploads/complete",62,{"_13":287,"_15":288,"_17":18,"_19":289,"_21":22,"_23":22},"Cancel upload","/docs/api-reference/uploads/cancel",63,{"_13":291,"_15":22,"_17":18,"_19":292,"_21":-7,"_10":293},"Models",68,[294,298,302],{"_13":295,"_15":296,"_17":18,"_19":297,"_21":22,"_23":22},"List models","/docs/api-reference/models/list",65,{"_13":299,"_15":300,"_17":18,"_19":301,"_21":22,"_23":22},"Retrieve model","/docs/api-reference/models/retrieve",66,{"_13":303,"_15":304,"_17":18,"_19":305,"_21":22,"_23":22},"Delete a fine-tuned model","/docs/api-reference/models/delete",67,{"_13":307,"_15":22,"_17":18,"_19":308,"_21":-7,"_10":309},"Moderations",70,[310],{"_13":311,"_15":312,"_17":18,"_19":313,"_21":22,"_23":22},"Create moderation","/docs/api-reference/moderations/create",69,{"_8":315,"_10":316},"Vector stores",[317,344,372],{"_13":315,"_15":22,"_17":18,"_19":318,"_21":-7,"_10":319},77,[320,324,328,332,336,340],{"_13":321,"_15":322,"_17":18,"_19":323,"_21":22,"_23":22},"Create vector store","/docs/api-reference/vector-stores/create",71,{"_13":325,"_15":326,"_17":18,"_19":327,"_21":22,"_23":22},"List vector stores","/docs/api-reference/vector-stores/list",72,{"_13":329,"_15":330,"_17":18,"_19":331,"_21":22,"_23":22},"Retrieve vector store","/docs/api-reference/vector-stores/retrieve",73,{"_13":333,"_15":334,"_17":18,"_19":335,"_21":22,"_23":22},"Modify vector store","/docs/api-reference/vector-stores/modify",74,{"_13":337,"_15":338,"_17":18,"_19":339,"_21":22,"_23":22},"Delete vector store","/docs/api-reference/vector-stores/delete",75,{"_13":341,"_15":342,"_17":18,"_19":343,"_21":22,"_23":22},"Search vector store","/docs/api-reference/vector-stores/search",76,{"_13":345,"_15":22,"_17":18,"_19":346,"_21":-7,"_10":347},"Vector store files",84,[348,352,356,360,364,368],{"_13":349,"_15":350,"_17":18,"_19":351,"_21":22,"_23":22},"Create vector store file","/docs/api-reference/vector-stores-files/createFile",78,{"_13":353,"_15":354,"_17":18,"_19":355,"_21":22,"_23":22},"List vector store files","/docs/api-reference/vector-stores-files/listFiles",79,{"_13":357,"_15":358,"_17":18,"_19":359,"_21":22,"_23":22},"Retrieve vector store file","/docs/api-reference/vector-stores-files/getFile",80,{"_13":361,"_15":362,"_17":18,"_19":363,"_21":22,"_23":22},"Retrieve vector store file content","/docs/api-reference/vector-stores-files/getContent",81,{"_13":365,"_15":366,"_17":18,"_19":367,"_21":22,"_23":22},"Update vector store file attributes","/docs/api-reference/vector-stores-files/updateAttributes",82,{"_13":369,"_15":370,"_17":18,"_19":371,"_21":22,"_23":22},"Delete vector store file","/docs/api-reference/vector-stores-files/deleteFile",83,{"_13":373,"_15":22,"_17":18,"_19":374,"_21":-7,"_10":375},"Vector store file batches",89,[376,380,384,388],{"_13":377,"_15":378,"_17":18,"_19":379,"_21":22,"_23":22},"Create vector store file batch","/docs/api-reference/vector-stores-file-batches/createBatch",85,{"_13":381,"_15":382,"_17":18,"_19":383,"_21":22,"_23":22},"Retrieve vector store file batch","/docs/api-reference/vector-stores-file-batches/getBatch",86,{"_13":385,"_15":386,"_17":18,"_19":387,"_21":22,"_23":22},"Cancel vector store file batch","/docs/api-reference/vector-stores-file-batches/cancelBatch",87,{"_13":389,"_15":390,"_17":18,"_19":391,"_21":22,"_23":22},"List vector store files in a batch","/docs/api-reference/vector-stores-file-batches/listBatchFiles",88,{"_8":393,"_10":394},"Assistants",[395,418,438,462,494],{"_13":393,"_15":22,"_17":18,"_19":396,"_21":-7,"_10":397},95,[398,402,406,410,414],{"_13":399,"_15":400,"_17":18,"_19":401,"_21":22,"_23":22},"Create assistant","/docs/api-reference/assistants/createAssistant",90,{"_13":403,"_15":404,"_17":18,"_19":405,"_21":22,"_23":22},"List assistants","/docs/api-reference/assistants/listAssistants",91,{"_13":407,"_15":408,"_17":18,"_19":409,"_21":22,"_23":22},"Retrieve assistant","/docs/api-reference/assistants/getAssistant",92,{"_13":411,"_15":412,"_17":18,"_19":413,"_21":22,"_23":22},"Modify assistant","/docs/api-reference/assistants/modifyAssistant",93,{"_13":415,"_15":416,"_17":18,"_19":417,"_21":22,"_23":22},"Delete assistant","/docs/api-reference/assistants/deleteAssistant",94,{"_13":419,"_15":22,"_17":18,"_19":420,"_21":-7,"_10":421},"Threads",100,[422,426,430,434],{"_13":423,"_15":424,"_17":18,"_19":425,"_21":22,"_23":22},"Create thread","/docs/api-reference/threads/createThread",96,{"_13":427,"_15":428,"_17":18,"_19":429,"_21":22,"_23":22},"Retrieve thread","/docs/api-reference/threads/getThread",97,{"_13":431,"_15":432,"_17":18,"_19":433,"_21":22,"_23":22},"Modify thread","/docs/api-reference/threads/modifyThread",98,{"_13":435,"_15":436,"_17":18,"_19":437,"_21":22,"_23":22},"Delete thread","/docs/api-reference/threads/deleteThread",99,{"_13":439,"_15":22,"_17":18,"_19":440,"_21":-7,"_10":441},"Messages",106,[442,446,450,454,458],{"_13":443,"_15":444,"_17":18,"_19":445,"_21":22,"_23":22},"Create message","/docs/api-reference/messages/createMessage",101,{"_13":447,"_15":448,"_17":18,"_19":449,"_21":22,"_23":22},"List messages","/docs/api-reference/messages/listMessages",102,{"_13":451,"_15":452,"_17":18,"_19":453,"_21":22,"_23":22},"Retrieve message","/docs/api-reference/messages/getMessage",103,{"_13":455,"_15":456,"_17":18,"_19":457,"_21":22,"_23":22},"Modify message","/docs/api-reference/messages/modifyMessage",104,{"_13":459,"_15":460,"_17":18,"_19":461,"_21":22,"_23":22},"Delete message","/docs/api-reference/messages/deleteMessage",105,{"_13":463,"_15":22,"_17":18,"_19":464,"_21":-7,"_10":465},"Runs",114,[466,470,474,478,482,486,490],{"_13":467,"_15":468,"_17":18,"_19":469,"_21":22,"_23":22},"Create run","/docs/api-reference/runs/createRun",107,{"_13":471,"_15":472,"_17":18,"_19":473,"_21":22,"_23":22},"Create thread and run","/docs/api-reference/runs/createThreadAndRun",108,{"_13":475,"_15":476,"_17":18,"_19":477,"_21":22,"_23":22},"List runs","/docs/api-reference/runs/listRuns",109,{"_13":479,"_15":480,"_17":18,"_19":481,"_21":22,"_23":22},"Retrieve run","/docs/api-reference/runs/getRun",110,{"_13":483,"_15":484,"_17":18,"_19":485,"_21":22,"_23":22},"Modify run","/docs/api-reference/runs/modifyRun",111,{"_13":487,"_15":488,"_17":18,"_19":489,"_21":22,"_23":22},"Submit tool outputs to run","/docs/api-reference/runs/submitToolOutputs",112,{"_13":491,"_15":492,"_17":18,"_19":493,"_21":22,"_23":22},"Cancel a run","/docs/api-reference/runs/cancelRun",113,{"_13":495,"_15":22,"_17":18,"_19":496,"_21":-7,"_10":497},"Run steps",117,[498,502],{"_13":499,"_15":500,"_17":18,"_19":501,"_21":22,"_23":22},"List run steps","/docs/api-reference/run-steps/listRunSteps",115,{"_13":503,"_15":504,"_17":18,"_19":505,"_21":22,"_23":22},"Retrieve run step","/docs/api-reference/run-steps/getRunStep",116,{"_8":507,"_10":508},"Administration",[509,529,549,569,593,617,637,653,665,673,709],{"_13":510,"_15":22,"_17":18,"_19":511,"_21":-7,"_10":512},"Admin API Keys",122,[513,517,521,525],{"_13":514,"_15":515,"_17":18,"_19":516,"_21":22,"_23":22},"List all organization and project API keys.","/docs/api-reference/admin-api-keys/list",118,{"_13":518,"_15":519,"_17":18,"_19":520,"_21":22,"_23":22},"Create admin API key","/docs/api-reference/admin-api-keys/create",119,{"_13":522,"_15":523,"_17":18,"_19":524,"_21":22,"_23":22},"Retrieve admin API key","/docs/api-reference/admin-api-keys/listget",120,{"_13":526,"_15":527,"_17":18,"_19":528,"_21":22,"_23":22},"Delete admin API key","/docs/api-reference/admin-api-keys/delete",121,{"_13":530,"_15":22,"_17":18,"_19":531,"_21":-7,"_10":532},"Invites",127,[533,537,541,545],{"_13":534,"_15":535,"_17":18,"_19":536,"_21":22,"_23":22},"List invites","/docs/api-reference/invite/list",123,{"_13":538,"_15":539,"_17":18,"_19":540,"_21":22,"_23":22},"Create invite","/docs/api-reference/invite/create",124,{"_13":542,"_15":543,"_17":18,"_19":544,"_21":22,"_23":22},"Retrieve invite","/docs/api-reference/invite/retrieve",125,{"_13":546,"_15":547,"_17":18,"_19":548,"_21":22,"_23":22},"Delete invite","/docs/api-reference/invite/delete",126,{"_13":550,"_15":22,"_17":18,"_19":551,"_21":-7,"_10":552},"Users",132,[553,557,561,565],{"_13":554,"_15":555,"_17":18,"_19":556,"_21":22,"_23":22},"List users","/docs/api-reference/users/list",128,{"_13":558,"_15":559,"_17":18,"_19":560,"_21":22,"_23":22},"Modify user","/docs/api-reference/users/modify",129,{"_13":562,"_15":563,"_17":18,"_19":564,"_21":22,"_23":22},"Retrieve user","/docs/api-reference/users/retrieve",130,{"_13":566,"_15":567,"_17":18,"_19":568,"_21":22,"_23":22},"Delete user","/docs/api-reference/users/delete",131,{"_13":570,"_15":22,"_17":18,"_19":571,"_21":-7,"_10":572},"Projects",138,[573,577,581,585,589],{"_13":574,"_15":575,"_17":18,"_19":576,"_21":22,"_23":22},"List projects","/docs/api-reference/projects/list",133,{"_13":578,"_15":579,"_17":18,"_19":580,"_21":22,"_23":22},"Create project","/docs/api-reference/projects/create",134,{"_13":582,"_15":583,"_17":18,"_19":584,"_21":22,"_23":22},"Retrieve project","/docs/api-reference/projects/retrieve",135,{"_13":586,"_15":587,"_17":18,"_19":588,"_21":22,"_23":22},"Modify project","/docs/api-reference/projects/modify",136,{"_13":590,"_15":591,"_17":18,"_19":592,"_21":22,"_23":22},"Archive project","/docs/api-reference/projects/archive",137,{"_13":594,"_15":22,"_17":18,"_19":595,"_21":-7,"_10":596},"Project users",144,[597,601,605,609,613],{"_13":598,"_15":599,"_17":18,"_19":600,"_21":22,"_23":22},"List project users","/docs/api-reference/project-users/list",139,{"_13":602,"_15":603,"_17":18,"_19":604,"_21":22,"_23":22},"Create project user","/docs/api-reference/project-users/creeate",140,{"_13":606,"_15":607,"_17":18,"_19":608,"_21":22,"_23":22},"Retrieve project user","/docs/api-reference/project-users/retrieve",141,{"_13":610,"_15":611,"_17":18,"_19":612,"_21":22,"_23":22},"Modify project user","/docs/api-reference/project-users/modify",142,{"_13":614,"_15":615,"_17":18,"_19":616,"_21":22,"_23":22},"Delete project user","/docs/api-reference/project-users/delete",143,{"_13":618,"_15":22,"_17":18,"_19":619,"_21":-7,"_10":620},"Project service accounts",149,[621,625,629,633],{"_13":622,"_15":623,"_17":18,"_19":624,"_21":22,"_23":22},"List project service accounts","/docs/api-reference/project-service-accounts/list",145,{"_13":626,"_15":627,"_17":18,"_19":628,"_21":22,"_23":22},"Create project service account","/docs/api-reference/project-service-accounts/create",146,{"_13":630,"_15":631,"_17":18,"_19":632,"_21":22,"_23":22},"Retrieve project service account","/docs/api-reference/project-service-accounts/retrieve",147,{"_13":634,"_15":635,"_17":18,"_19":636,"_21":22,"_23":22},"Delete project service account","/docs/api-reference/project-service-accounts/delete",148,{"_13":638,"_15":22,"_17":18,"_19":639,"_21":-7,"_10":640},"Project API keys",153,[641,645,649],{"_13":642,"_15":643,"_17":18,"_19":644,"_21":22,"_23":22},"List project API keys","/docs/api-reference/project-api-keys/list",150,{"_13":646,"_15":647,"_17":18,"_19":648,"_21":22,"_23":22},"Retrieve project API key","/docs/api-reference/project-api-keys/retrieve",151,{"_13":650,"_15":651,"_17":18,"_19":652,"_21":22,"_23":22},"Delete project API key","/docs/api-reference/project-api-keys/delete",152,{"_13":654,"_15":22,"_17":18,"_19":655,"_21":-7,"_10":656},"Project rate limits",156,[657,661],{"_13":658,"_15":659,"_17":18,"_19":660,"_21":22,"_23":22},"List project rate limits","/docs/api-reference/project-rate-limits/list",154,{"_13":662,"_15":663,"_17":18,"_19":664,"_21":22,"_23":22},"Modify project rate limit","/docs/api-reference/project-rate-limits/update",155,{"_13":666,"_15":22,"_17":18,"_19":667,"_21":-7,"_10":668},"Audit logs",158,[669],{"_13":670,"_15":671,"_17":18,"_19":672,"_21":22,"_23":22},"List audit logs","/docs/api-reference/audit-logs/list",157,{"_13":674,"_15":22,"_17":18,"_19":675,"_21":-7,"_10":676},"Usage",168,[677,681,684,687,690,694,698,701,705],{"_13":678,"_15":679,"_17":18,"_19":680,"_21":22,"_23":22},"Completions","/docs/api-reference/usage/completions",159,{"_13":127,"_15":682,"_17":18,"_19":683,"_21":22,"_23":22},"/docs/api-reference/usage/embeddings",160,{"_13":307,"_15":685,"_17":18,"_19":686,"_21":22,"_23":22},"/docs/api-reference/usage/moderations",161,{"_13":111,"_15":688,"_17":18,"_19":689,"_21":22,"_23":22},"/docs/api-reference/usage/images",162,{"_13":691,"_15":692,"_17":18,"_19":693,"_21":22,"_23":22},"Audio speeches","/docs/api-reference/usage/audio_speeches",163,{"_13":695,"_15":696,"_17":18,"_19":697,"_21":22,"_23":22},"Audio transcriptions","/docs/api-reference/usage/audio_transcriptions",164,{"_13":315,"_15":699,"_17":18,"_19":700,"_21":22,"_23":22},"/docs/api-reference/usage/vector_stores",165,{"_13":702,"_15":703,"_17":18,"_19":704,"_21":22,"_23":22},"Code interpreter sessions","/docs/api-reference/usage/code_interpreter_sessions",166,{"_13":706,"_15":707,"_17":18,"_19":708,"_21":22,"_23":22},"Costs","/docs/api-reference/usage/costs",167,{"_13":710,"_15":22,"_17":18,"_19":711,"_21":-7,"_10":712},"Certificates",179,[713,717,721,725,729,733,737,741,745,749],{"_13":714,"_15":715,"_17":18,"_19":716,"_21":22,"_23":22},"Upload certificate","/docs/api-reference/certificates/uploadCertificate",169,{"_13":718,"_15":719,"_17":18,"_19":720,"_21":22,"_23":22},"Get certificate","/docs/api-reference/certificates/getCertificate",170,{"_13":722,"_15":723,"_17":18,"_19":724,"_21":22,"_23":22},"Modify certificate","/docs/api-reference/certificates/modifyCertificate",171,{"_13":726,"_15":727,"_17":18,"_19":728,"_21":22,"_23":22},"Delete certificate","/docs/api-reference/certificates/deleteCertificate",172,{"_13":730,"_15":731,"_17":18,"_19":732,"_21":22,"_23":22},"List organization certificates","/docs/api-reference/certificates/listOrganizationCertificates",173,{"_13":734,"_15":735,"_17":18,"_19":736,"_21":22,"_23":22},"List project certificates","/docs/api-reference/certificates/listProjectCertificates",174,{"_13":738,"_15":739,"_17":18,"_19":740,"_21":22,"_23":22},"Activate certificates for organization","/docs/api-reference/certificates/activateOrganizationCertificates",175,{"_13":742,"_15":743,"_17":18,"_19":744,"_21":22,"_23":22},"Deactivate certificates for organization","/docs/api-reference/certificates/deactivateOrganizationCertificates",176,{"_13":746,"_15":747,"_17":18,"_19":748,"_21":22,"_23":22},"Activate certificates for project","/docs/api-reference/certificates/activateProjectCertificates",177,{"_13":750,"_15":751,"_17":18,"_19":752,"_21":22,"_23":22},"Deactivate certificates for project","/docs/api-reference/certificates/deactivateProjectCertificates",178,{"_8":754,"_10":755},"Legacy",[756],{"_13":678,"_15":22,"_17":18,"_19":757,"_21":-7,"_10":758},181,[759],{"_13":760,"_15":761,"_17":18,"_19":762,"_21":22,"_23":22},"Create completion","/docs/api-reference/completions/create",180,"breadcrumbs",[765,766,767],{"_13":47,"_15":22},{"_13":47,"_15":22},{"_13":53,"_15":768},"docs/api-reference/chat/create","navlinks","slug","metadata",{"_13":53,"_773":774,"_775":776},"layout","wide","openapi","~/openapi.yaml#POST /chat/completions","/docs/api-reference",{"_3":779},{"_5":780,"_763":1014,"_769":-7,"_770":768,"_1018":1019,"_771":1020,"_1021":1022},[781,784,792,802,808,875,899,934,1009],{"_8":9,"_10":782},[783],{"_13":14,"_15":16,"_17":18,"_19":20,"_21":22,"_23":22},{"_8":25,"_10":785},[786],{"_13":25,"_15":22,"_17":18,"_19":28,"_21":-7,"_10":787},[788,789,790,791],{"_13":31,"_15":32,"_17":18,"_19":33,"_21":22,"_23":22},{"_13":35,"_15":36,"_17":18,"_19":37,"_21":22,"_23":22},{"_13":39,"_15":40,"_17":18,"_19":41,"_21":22,"_23":22},{"_13":43,"_15":44,"_17":18,"_19":45,"_21":22,"_23":22},{"_8":47,"_10":793},[794],{"_13":47,"_15":22,"_17":18,"_19":50,"_21":-7,"_10":795},[796,797,798,799,800,801],{"_13":53,"_15":54,"_17":18,"_19":55,"_21":22,"_23":22},{"_13":57,"_15":58,"_17":18,"_19":59,"_21":22,"_23":22},{"_13":61,"_15":62,"_17":18,"_19":63,"_21":22,"_23":22},{"_13":65,"_15":66,"_17":18,"_19":67,"_21":22,"_23":22},{"_13":69,"_15":70,"_17":18,"_19":71,"_21":22,"_23":22},{"_13":73,"_15":74,"_17":18,"_19":75,"_21":22,"_23":22},{"_8":77,"_10":803},[804],{"_13":80,"_15":22,"_17":18,"_19":81,"_21":-7,"_10":805},[806,807],{"_13":84,"_15":85,"_17":18,"_19":86,"_21":22,"_23":22},{"_13":88,"_15":89,"_17":18,"_19":90,"_21":22,"_23":22},{"_8":92,"_10":809},[810,815,820,823,837,848,854,861,867,872],{"_13":95,"_15":22,"_17":18,"_19":96,"_21":-7,"_10":811},[812,813,814],{"_13":99,"_15":100,"_17":18,"_19":101,"_21":22,"_23":22},{"_13":103,"_15":104,"_17":18,"_19":105,"_21":22,"_23":22},{"_13":107,"_15":108,"_17":18,"_19":109,"_21":22,"_23":22},{"_13":111,"_15":22,"_17":18,"_19":112,"_21":-7,"_10":816},[817,818,819],{"_13":115,"_15":116,"_17":18,"_19":117,"_21":22,"_23":22},{"_13":119,"_15":120,"_17":18,"_19":121,"_21":22,"_23":22},{"_13":123,"_15":124,"_17":18,"_19":125,"_21":22,"_23":22},{"_13":127,"_15":22,"_17":18,"_19":128,"_21":-7,"_10":821},[822],{"_13":131,"_15":132,"_17":18,"_19":133,"_21":22,"_23":22},{"_13":135,"_15":22,"_17":18,"_19":136,"_21":-7,"_10":824},[825,826,827,828,829,830,831,832,833,834,835,836],{"_13":139,"_15":140,"_17":18,"_19":141,"_21":22,"_23":22},{"_13":143,"_15":144,"_17":18,"_19":145,"_21":22,"_23":22},{"_13":147,"_15":148,"_17":18,"_19":149,"_21":22,"_23":22},{"_13":151,"_15":152,"_17":18,"_19":153,"_21":22,"_23":22},{"_13":155,"_15":156,"_17":18,"_19":157,"_21":22,"_23":22},{"_13":159,"_15":160,"_17":18,"_19":161,"_21":22,"_23":22},{"_13":163,"_15":164,"_17":18,"_19":165,"_21":22,"_23":22},{"_13":167,"_15":168,"_17":18,"_19":169,"_21":22,"_23":22},{"_13":171,"_15":172,"_17":18,"_19":173,"_21":22,"_23":22},{"_13":175,"_15":176,"_17":18,"_19":177,"_21":22,"_23":22},{"_13":179,"_15":180,"_17":18,"_19":181,"_21":22,"_23":22},{"_13":183,"_15":184,"_17":18,"_19":185,"_21":22,"_23":22},{"_13":187,"_15":22,"_17":18,"_19":188,"_21":-7,"_10":838},[839,840,841,842,843,844,845,846,847],{"_13":191,"_15":192,"_17":18,"_19":193,"_21":22,"_23":22},{"_13":195,"_15":196,"_17":18,"_19":197,"_21":22,"_23":22},{"_13":199,"_15":200,"_17":18,"_19":201,"_21":22,"_23":22},{"_13":203,"_15":204,"_17":18,"_19":205,"_21":22,"_23":22},{"_13":207,"_15":208,"_17":18,"_19":209,"_21":22,"_23":22},{"_13":211,"_15":212,"_17":18,"_19":213,"_21":22,"_23":22},{"_13":215,"_15":216,"_17":18,"_19":217,"_21":22,"_23":22},{"_13":219,"_15":220,"_17":18,"_19":221,"_21":22,"_23":22},{"_13":223,"_15":224,"_17":18,"_19":225,"_21":22,"_23":22},{"_13":227,"_15":22,"_17":18,"_19":228,"_21":-7,"_10":849},[850,851,852,853],{"_13":231,"_15":232,"_17":18,"_19":233,"_21":22,"_23":22},{"_13":235,"_15":236,"_17":18,"_19":237,"_21":22,"_23":22},{"_13":239,"_15":240,"_17":18,"_19":241,"_21":22,"_23":22},{"_13":243,"_15":244,"_17":18,"_19":245,"_21":22,"_23":22},{"_13":247,"_15":22,"_17":18,"_19":248,"_21":-7,"_10":855},[856,857,858,859,860],{"_13":251,"_15":252,"_17":18,"_19":253,"_21":22,"_23":22},{"_13":255,"_15":256,"_17":18,"_19":257,"_21":22,"_23":22},{"_13":259,"_15":260,"_17":18,"_19":261,"_21":22,"_23":22},{"_13":263,"_15":264,"_17":18,"_19":265,"_21":22,"_23":22},{"_13":267,"_15":268,"_17":18,"_19":269,"_21":22,"_23":22},{"_13":271,"_15":22,"_17":18,"_19":272,"_21":-7,"_10":862},[863,864,865,866],{"_13":275,"_15":276,"_17":18,"_19":277,"_21":22,"_23":22},{"_13":279,"_15":280,"_17":18,"_19":281,"_21":22,"_23":22},{"_13":283,"_15":284,"_17":18,"_19":285,"_21":22,"_23":22},{"_13":287,"_15":288,"_17":18,"_19":289,"_21":22,"_23":22},{"_13":291,"_15":22,"_17":18,"_19":292,"_21":-7,"_10":868},[869,870,871],{"_13":295,"_15":296,"_17":18,"_19":297,"_21":22,"_23":22},{"_13":299,"_15":300,"_17":18,"_19":301,"_21":22,"_23":22},{"_13":303,"_15":304,"_17":18,"_19":305,"_21":22,"_23":22},{"_13":307,"_15":22,"_17":18,"_19":308,"_21":-7,"_10":873},[874],{"_13":311,"_15":312,"_17":18,"_19":313,"_21":22,"_23":22},{"_8":315,"_10":876},[877,885,893],{"_13":315,"_15":22,"_17":18,"_19":318,"_21":-7,"_10":878},[879,880,881,882,883,884],{"_13":321,"_15":322,"_17":18,"_19":323,"_21":22,"_23":22},{"_13":325,"_15":326,"_17":18,"_19":327,"_21":22,"_23":22},{"_13":329,"_15":330,"_17":18,"_19":331,"_21":22,"_23":22},{"_13":333,"_15":334,"_17":18,"_19":335,"_21":22,"_23":22},{"_13":337,"_15":338,"_17":18,"_19":339,"_21":22,"_23":22},{"_13":341,"_15":342,"_17":18,"_19":343,"_21":22,"_23":22},{"_13":345,"_15":22,"_17":18,"_19":346,"_21":-7,"_10":886},[887,888,889,890,891,892],{"_13":349,"_15":350,"_17":18,"_19":351,"_21":22,"_23":22},{"_13":353,"_15":354,"_17":18,"_19":355,"_21":22,"_23":22},{"_13":357,"_15":358,"_17":18,"_19":359,"_21":22,"_23":22},{"_13":361,"_15":362,"_17":18,"_19":363,"_21":22,"_23":22},{"_13":365,"_15":366,"_17":18,"_19":367,"_21":22,"_23":22},{"_13":369,"_15":370,"_17":18,"_19":371,"_21":22,"_23":22},{"_13":373,"_15":22,"_17":18,"_19":374,"_21":-7,"_10":894},[895,896,897,898],{"_13":377,"_15":378,"_17":18,"_19":379,"_21":22,"_23":22},{"_13":381,"_15":382,"_17":18,"_19":383,"_21":22,"_23":22},{"_13":385,"_15":386,"_17":18,"_19":387,"_21":22,"_23":22},{"_13":389,"_15":390,"_17":18,"_19":391,"_21":22,"_23":22},{"_8":393,"_10":900},[901,908,914,921,930],{"_13":393,"_15":22,"_17":18,"_19":396,"_21":-7,"_10":902},[903,904,905,906,907],{"_13":399,"_15":400,"_17":18,"_19":401,"_21":22,"_23":22},{"_13":403,"_15":404,"_17":18,"_19":405,"_21":22,"_23":22},{"_13":407,"_15":408,"_17":18,"_19":409,"_21":22,"_23":22},{"_13":411,"_15":412,"_17":18,"_19":413,"_21":22,"_23":22},{"_13":415,"_15":416,"_17":18,"_19":417,"_21":22,"_23":22},{"_13":419,"_15":22,"_17":18,"_19":420,"_21":-7,"_10":909},[910,911,912,913],{"_13":423,"_15":424,"_17":18,"_19":425,"_21":22,"_23":22},{"_13":427,"_15":428,"_17":18,"_19":429,"_21":22,"_23":22},{"_13":431,"_15":432,"_17":18,"_19":433,"_21":22,"_23":22},{"_13":435,"_15":436,"_17":18,"_19":437,"_21":22,"_23":22},{"_13":439,"_15":22,"_17":18,"_19":440,"_21":-7,"_10":915},[916,917,918,919,920],{"_13":443,"_15":444,"_17":18,"_19":445,"_21":22,"_23":22},{"_13":447,"_15":448,"_17":18,"_19":449,"_21":22,"_23":22},{"_13":451,"_15":452,"_17":18,"_19":453,"_21":22,"_23":22},{"_13":455,"_15":456,"_17":18,"_19":457,"_21":22,"_23":22},{"_13":459,"_15":460,"_17":18,"_19":461,"_21":22,"_23":22},{"_13":463,"_15":22,"_17":18,"_19":464,"_21":-7,"_10":922},[923,924,925,926,927,928,929],{"_13":467,"_15":468,"_17":18,"_19":469,"_21":22,"_23":22},{"_13":471,"_15":472,"_17":18,"_19":473,"_21":22,"_23":22},{"_13":475,"_15":476,"_17":18,"_19":477,"_21":22,"_23":22},{"_13":479,"_15":480,"_17":18,"_19":481,"_21":22,"_23":22},{"_13":483,"_15":484,"_17":18,"_19":485,"_21":22,"_23":22},{"_13":487,"_15":488,"_17":18,"_19":489,"_21":22,"_23":22},{"_13":491,"_15":492,"_17":18,"_19":493,"_21":22,"_23":22},{"_13":495,"_15":22,"_17":18,"_19":496,"_21":-7,"_10":931},[932,933],{"_13":499,"_15":500,"_17":18,"_19":501,"_21":22,"_23":22},{"_13":503,"_15":504,"_17":18,"_19":505,"_21":22,"_23":22},{"_8":507,"_10":935},[936,942,948,954,961,968,974,979,983,986,997],{"_13":510,"_15":22,"_17":18,"_19":511,"_21":-7,"_10":937},[938,939,940,941],{"_13":514,"_15":515,"_17":18,"_19":516,"_21":22,"_23":22},{"_13":518,"_15":519,"_17":18,"_19":520,"_21":22,"_23":22},{"_13":522,"_15":523,"_17":18,"_19":524,"_21":22,"_23":22},{"_13":526,"_15":527,"_17":18,"_19":528,"_21":22,"_23":22},{"_13":530,"_15":22,"_17":18,"_19":531,"_21":-7,"_10":943},[944,945,946,947],{"_13":534,"_15":535,"_17":18,"_19":536,"_21":22,"_23":22},{"_13":538,"_15":539,"_17":18,"_19":540,"_21":22,"_23":22},{"_13":542,"_15":543,"_17":18,"_19":544,"_21":22,"_23":22},{"_13":546,"_15":547,"_17":18,"_19":548,"_21":22,"_23":22},{"_13":550,"_15":22,"_17":18,"_19":551,"_21":-7,"_10":949},[950,951,952,953],{"_13":554,"_15":555,"_17":18,"_19":556,"_21":22,"_23":22},{"_13":558,"_15":559,"_17":18,"_19":560,"_21":22,"_23":22},{"_13":562,"_15":563,"_17":18,"_19":564,"_21":22,"_23":22},{"_13":566,"_15":567,"_17":18,"_19":568,"_21":22,"_23":22},{"_13":570,"_15":22,"_17":18,"_19":571,"_21":-7,"_10":955},[956,957,958,959,960],{"_13":574,"_15":575,"_17":18,"_19":576,"_21":22,"_23":22},{"_13":578,"_15":579,"_17":18,"_19":580,"_21":22,"_23":22},{"_13":582,"_15":583,"_17":18,"_19":584,"_21":22,"_23":22},{"_13":586,"_15":587,"_17":18,"_19":588,"_21":22,"_23":22},{"_13":590,"_15":591,"_17":18,"_19":592,"_21":22,"_23":22},{"_13":594,"_15":22,"_17":18,"_19":595,"_21":-7,"_10":962},[963,964,965,966,967],{"_13":598,"_15":599,"_17":18,"_19":600,"_21":22,"_23":22},{"_13":602,"_15":603,"_17":18,"_19":604,"_21":22,"_23":22},{"_13":606,"_15":607,"_17":18,"_19":608,"_21":22,"_23":22},{"_13":610,"_15":611,"_17":18,"_19":612,"_21":22,"_23":22},{"_13":614,"_15":615,"_17":18,"_19":616,"_21":22,"_23":22},{"_13":618,"_15":22,"_17":18,"_19":619,"_21":-7,"_10":969},[970,971,972,973],{"_13":622,"_15":623,"_17":18,"_19":624,"_21":22,"_23":22},{"_13":626,"_15":627,"_17":18,"_19":628,"_21":22,"_23":22},{"_13":630,"_15":631,"_17":18,"_19":632,"_21":22,"_23":22},{"_13":634,"_15":635,"_17":18,"_19":636,"_21":22,"_23":22},{"_13":638,"_15":22,"_17":18,"_19":639,"_21":-7,"_10":975},[976,977,978],{"_13":642,"_15":643,"_17":18,"_19":644,"_21":22,"_23":22},{"_13":646,"_15":647,"_17":18,"_19":648,"_21":22,"_23":22},{"_13":650,"_15":651,"_17":18,"_19":652,"_21":22,"_23":22},{"_13":654,"_15":22,"_17":18,"_19":655,"_21":-7,"_10":980},[981,982],{"_13":658,"_15":659,"_17":18,"_19":660,"_21":22,"_23":22},{"_13":662,"_15":663,"_17":18,"_19":664,"_21":22,"_23":22},{"_13":666,"_15":22,"_17":18,"_19":667,"_21":-7,"_10":984},[985],{"_13":670,"_15":671,"_17":18,"_19":672,"_21":22,"_23":22},{"_13":674,"_15":22,"_17":18,"_19":675,"_21":-7,"_10":987},[988,989,990,991,992,993,994,995,996],{"_13":678,"_15":679,"_17":18,"_19":680,"_21":22,"_23":22},{"_13":127,"_15":682,"_17":18,"_19":683,"_21":22,"_23":22},{"_13":307,"_15":685,"_17":18,"_19":686,"_21":22,"_23":22},{"_13":111,"_15":688,"_17":18,"_19":689,"_21":22,"_23":22},{"_13":691,"_15":692,"_17":18,"_19":693,"_21":22,"_23":22},{"_13":695,"_15":696,"_17":18,"_19":697,"_21":22,"_23":22},{"_13":315,"_15":699,"_17":18,"_19":700,"_21":22,"_23":22},{"_13":702,"_15":703,"_17":18,"_19":704,"_21":22,"_23":22},{"_13":706,"_15":707,"_17":18,"_19":708,"_21":22,"_23":22},{"_13":710,"_15":22,"_17":18,"_19":711,"_21":-7,"_10":998},[999,1000,1001,1002,1003,1004,1005,1006,1007,1008],{"_13":714,"_15":715,"_17":18,"_19":716,"_21":22,"_23":22},{"_13":718,"_15":719,"_17":18,"_19":720,"_21":22,"_23":22},{"_13":722,"_15":723,"_17":18,"_19":724,"_21":22,"_23":22},{"_13":726,"_15":727,"_17":18,"_19":728,"_21":22,"_23":22},{"_13":730,"_15":731,"_17":18,"_19":732,"_21":22,"_23":22},{"_13":734,"_15":735,"_17":18,"_19":736,"_21":22,"_23":22},{"_13":738,"_15":739,"_17":18,"_19":740,"_21":22,"_23":22},{"_13":742,"_15":743,"_17":18,"_19":744,"_21":22,"_23":22},{"_13":746,"_15":747,"_17":18,"_19":748,"_21":22,"_23":22},{"_13":750,"_15":751,"_17":18,"_19":752,"_21":22,"_23":22},{"_8":754,"_10":1010},[1011],{"_13":678,"_15":22,"_17":18,"_19":757,"_21":-7,"_10":1012},[1013],{"_13":760,"_15":761,"_17":18,"_19":762,"_21":22,"_23":22},[1015,1016,1017],{"_13":47,"_15":22},{"_13":47,"_15":22},{"_13":53,"_15":768},"code","\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst toc = [];\nconst frontmatter = {\n  \"title\": \"Create chat completion\",\n  \"layout\": \"wide\",\n  \"openapi\": \"~/openapi.yaml#POST /chat/completions\"\n};\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    hr: \"hr\",\n    li: \"li\",\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ...props.components\n  }, {Atlas} = _components;\n  if (!Atlas) _missingMdxReference(\"Atlas\", true);\n  return _jsx(Atlas, {\n    references: [{\n      __UNSAFE_selector: function noRefCheck() {},\n      canonical: 'createChatCompletion',\n      category: 'rest',\n      context: {\n        fullPath: 'https:/api.openai.com/v1/chat/completions',\n        group: ['chat'],\n        method: 'post',\n        path: '/chat/completions',\n        scopes: []\n      },\n      definitions: [{\n        meta: [{\n          name: 'contentType',\n          value: 'application/json'\n        }, {\n          name: 'required',\n          value: 'true'\n        }],\n        properties: [{\n          description: 'Set of 16 key-value pairs that can be attached to an object. This can be\\nuseful for storing additional information about the object in a structured\\nformat, and querying for objects via API or the dashboard. \\n\\nKeys are strings with a maximum length of 64 characters. Values are strings\\nwith a maximum length of 512 characters.\\n',\n          meta: [{\n            name: 'nullable',\n            value: 'true'\n          }],\n          name: 'metadata',\n          type: 'object'\n        }, {\n          description: _jsxs(_components.p, {\n            children: [\"What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or\", ' ', _jsx(_components.code, {\n              children: \"top_p\"\n            }), ' ', \"but not both.\"]\n          }),\n          meta: [{\n            name: 'defaults',\n            value: 1\n          }, {\n            name: 'nullable',\n            value: 'true'\n          }],\n          name: 'temperature',\n          type: 'number'\n        }, {\n          description: _jsxs(_Fragment, {\n            children: [_jsx(_components.p, {\n              children: \"An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\"\n            }), _jsxs(_components.p, {\n              children: [\"We generally recommend altering this or\", ' ', _jsx(_components.code, {\n                children: \"temperature\"\n              }), ' ', \"but not both.\"]\n            })]\n          }),\n          meta: [{\n            name: 'defaults',\n            value: 1\n          }, {\n            name: 'nullable',\n            value: 'true'\n          }],\n          name: 'top_p',\n          type: 'number'\n        }, {\n          description: _jsxs(_components.p, {\n            children: [\"A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.\", ' ', _jsx(_components.a, {\n              href: \"/docs/guides/safety-best-practices#end-user-ids\",\n              children: \"Learn more\"\n            }), \".\"]\n          }),\n          meta: [],\n          name: 'user',\n          type: 'string'\n        }, {\n          description: _jsxs(_Fragment, {\n            children: [_jsx(_components.p, {\n              children: \"Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:\"\n            }), _jsxs(_components.ul, {\n              children: [_jsx(_components.li, {\n                children: \"If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.\"\n              }), _jsx(_components.li, {\n                children: \"If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.\"\n              }), _jsx(_components.li, {\n                children: \"If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.\"\n              }), _jsxs(_components.li, {\n                children: [\"If set to 'flex', the request will be processed with the Flex Processing service tier.\", ' ', _jsx(_components.a, {\n                  href: \"/docs/guides/flex-processing\",\n                  children: \"Learn more\"\n                }), \".\"]\n              }), _jsx(_components.li, {\n                children: \"When not set, the default behavior is 'auto'.\"\n              })]\n            }), _jsxs(_components.p, {\n              children: [\"When this parameter is set, the response body will include the\", ' ', _jsx(_components.code, {\n                children: \"service_tier\"\n              }), ' ', \"utilized.\"]\n            })]\n          }),\n          meta: [{\n            name: 'defaults',\n            value: 'auto'\n          }, {\n            name: 'nullable',\n            value: 'true'\n          }, {\n            name: 'enum-type',\n            value: 'string'\n          }],\n          name: 'service_tier',\n          properties: [{\n            description: '',\n            meta: [],\n            name: 'auto',\n            type: 'string'\n          }, {\n            description: '',\n            meta: [],\n            name: 'default',\n            type: 'string'\n          }, {\n            description: '',\n            meta: [],\n            name: 'flex',\n            type: 'string'\n          }],\n          type: '$$enum'\n        }, {\n          description: _jsxs(_components.p, {\n            children: [\"A list of messages comprising the conversation so far. Depending on the\", ' ', _jsx(_components.a, {\n              href: \"/docs/models\",\n              children: \"model\"\n            }), ' ', \"you use, different message types (modalities) are supported, like\", ' ', _jsx(_components.a, {\n              href: \"/docs/guides/text-generation\",\n              children: \"text\"\n            }), \",\", ' ', _jsx(_components.a, {\n              href: \"/docs/guides/vision\",\n              children: \"images\"\n            }), \", and\", ' ', _jsx(_components.a, {\n              href: \"/docs/guides/audio\",\n              children: \"audio\"\n            }), \".\"]\n          }),\n          meta: [{\n            name: 'required',\n            value: 'true'\n          }],\n          name: 'messages',\n          properties: [{\n            description: _jsxs(_components.p, {\n              children: [\"Developer-provided instructions that the model should follow, regardless of messages sent by the user. With o1 models and newer,\", ' ', _jsx(_components.code, {\n                children: \"developer\"\n              }), ' ', \"messages replace the previous\", ' ', _jsx(_components.code, {\n                children: \"system\"\n              }), ' ', \"messages.\"]\n            }),\n            meta: [],\n            name: 'Developer message',\n            properties: [{\n              description: 'The contents of the developer message.',\n              name: 'content',\n              properties: [{\n                description: 'The contents of the developer message.',\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'Text content',\n                type: 'string'\n              }, {\n                description: _jsxs(_components.p, {\n                  children: [\"An array of content parts with a defined type. For developer messages, only type\", ' ', _jsx(_components.code, {\n                    children: \"text\"\n                  }), ' ', \"is supported.\"]\n                }),\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'Array of content parts',\n                properties: [{\n                  description: _jsxs(_components.p, {\n                    children: [\"Learn about\", ' ', _jsx(_components.a, {\n                      href: \"/docs/guides/text-generation\",\n                      children: \"text inputs\"\n                    }), \".\"]\n                  }),\n                  meta: [],\n                  name: 'items',\n                  properties: [{\n                    description: 'The type of the content part.',\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }, {\n                      name: 'enum-type',\n                      value: 'string'\n                    }],\n                    name: 'type',\n                    properties: [{\n                      description: '',\n                      meta: [],\n                      name: 'text',\n                      type: 'string'\n                    }],\n                    type: '$$enum'\n                  }, {\n                    description: 'The text content.',\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }],\n                    name: 'text',\n                    type: 'string'\n                  }],\n                  type: 'object'\n                }],\n                type: '$$array'\n              }],\n              type: '$$xor'\n            }, {\n              description: _jsxs(_components.p, {\n                children: [\"The role of the messages author, in this case\", ' ', _jsx(_components.code, {\n                  children: \"developer\"\n                }), \".\"]\n              }),\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }, {\n                name: 'enum-type',\n                value: 'string'\n              }],\n              name: 'role',\n              properties: [{\n                description: '',\n                meta: [],\n                name: 'developer',\n                type: 'string'\n              }],\n              type: '$$enum'\n            }, {\n              description: 'An optional name for the participant. Provides the model information to differentiate between participants of the same role.',\n              meta: [],\n              name: 'name',\n              type: 'string'\n            }],\n            type: 'object'\n          }, {\n            description: _jsxs(_components.p, {\n              children: [\"Developer-provided instructions that the model should follow, regardless of messages sent by the user. With o1 models and newer, use\", ' ', _jsx(_components.code, {\n                children: \"developer\"\n              }), ' ', \"messages for this purpose instead.\"]\n            }),\n            meta: [],\n            name: 'System message',\n            properties: [{\n              description: 'The contents of the system message.',\n              name: 'content',\n              properties: [{\n                description: 'The contents of the system message.',\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'Text content',\n                type: 'string'\n              }, {\n                description: _jsxs(_components.p, {\n                  children: [\"An array of content parts with a defined type. For system messages, only type\", ' ', _jsx(_components.code, {\n                    children: \"text\"\n                  }), ' ', \"is supported.\"]\n                }),\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'Array of content parts',\n                properties: [{\n                  description: _jsxs(_components.p, {\n                    children: [\"Learn about\", ' ', _jsx(_components.a, {\n                      href: \"/docs/guides/text-generation\",\n                      children: \"text inputs\"\n                    }), \".\"]\n                  }),\n                  meta: [],\n                  name: 'Text content part',\n                  properties: [{\n                    description: 'The type of the content part.',\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }, {\n                      name: 'enum-type',\n                      value: 'string'\n                    }],\n                    name: 'type',\n                    properties: [{\n                      description: '',\n                      meta: [],\n                      name: 'text',\n                      type: 'string'\n                    }],\n                    type: '$$enum'\n                  }, {\n                    description: 'The text content.',\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }],\n                    name: 'text',\n                    type: 'string'\n                  }],\n                  type: 'object'\n                }],\n                type: '$$array'\n              }],\n              type: '$$xor'\n            }, {\n              description: _jsxs(_components.p, {\n                children: [\"The role of the messages author, in this case\", ' ', _jsx(_components.code, {\n                  children: \"system\"\n                }), \".\"]\n              }),\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }, {\n                name: 'enum-type',\n                value: 'string'\n              }],\n              name: 'role',\n              properties: [{\n                description: '',\n                meta: [],\n                name: 'system',\n                type: 'string'\n              }],\n              type: '$$enum'\n            }, {\n              description: 'An optional name for the participant. Provides the model information to differentiate between participants of the same role.',\n              meta: [],\n              name: 'name',\n              type: 'string'\n            }],\n            type: 'object'\n          }, {\n            description: 'Messages sent by an end user, containing prompts or additional context\\ninformation.\\n',\n            meta: [],\n            name: 'User message',\n            properties: [{\n              description: 'The contents of the user message.\\n',\n              name: 'content',\n              properties: [{\n                description: 'The text contents of the message.',\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'Text content',\n                type: 'string'\n              }, {\n                description: _jsxs(_components.p, {\n                  children: [\"An array of content parts with a defined type. Supported options differ based on the\", ' ', _jsx(_components.a, {\n                    href: \"/docs/models\",\n                    children: \"model\"\n                  }), ' ', \"being used to generate the response. Can contain text, image, or audio inputs.\"]\n                }),\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'Array of content parts',\n                properties: [{\n                  description: _jsxs(_components.p, {\n                    children: [\"Learn about\", ' ', _jsx(_components.a, {\n                      href: \"/docs/guides/text-generation\",\n                      children: \"text inputs\"\n                    }), \".\"]\n                  }),\n                  meta: [],\n                  name: 'Text content part',\n                  properties: [{\n                    description: 'The type of the content part.',\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }, {\n                      name: 'enum-type',\n                      value: 'string'\n                    }],\n                    name: 'type',\n                    properties: [{\n                      description: '',\n                      meta: [],\n                      name: 'text',\n                      type: 'string'\n                    }],\n                    type: '$$enum'\n                  }, {\n                    description: 'The text content.',\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }],\n                    name: 'text',\n                    type: 'string'\n                  }],\n                  type: 'object'\n                }, {\n                  description: _jsxs(_components.p, {\n                    children: [\"Learn about\", ' ', _jsx(_components.a, {\n                      href: \"/docs/guides/vision\",\n                      children: \"image inputs\"\n                    }), \".\"]\n                  }),\n                  meta: [],\n                  name: 'Image content part',\n                  properties: [{\n                    description: 'The type of the content part.',\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }, {\n                      name: 'enum-type',\n                      value: 'string'\n                    }],\n                    name: 'type',\n                    properties: [{\n                      description: '',\n                      meta: [],\n                      name: 'image_url',\n                      type: 'string'\n                    }],\n                    type: '$$enum'\n                  }, {\n                    description: '',\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }],\n                    name: 'image_url',\n                    properties: [{\n                      description: 'Either a URL of the image or the base64 encoded image data.',\n                      meta: [{\n                        name: 'required',\n                        value: 'true'\n                      }],\n                      name: 'url',\n                      type: 'string'\n                    }, {\n                      description: _jsxs(_components.p, {\n                        children: [\"Specifies the detail level of the image. Learn more in the\", ' ', _jsx(_components.a, {\n                          href: \"/docs/guides/vision#low-or-high-fidelity-image-understanding\",\n                          children: \"Vision guide\"\n                        }), \".\"]\n                      }),\n                      meta: [{\n                        name: 'defaults',\n                        value: 'auto'\n                      }, {\n                        name: 'enum-type',\n                        value: 'string'\n                      }],\n                      name: 'detail',\n                      properties: [{\n                        description: '',\n                        meta: [],\n                        name: 'auto',\n                        type: 'string'\n                      }, {\n                        description: '',\n                        meta: [],\n                        name: 'low',\n                        type: 'string'\n                      }, {\n                        description: '',\n                        meta: [],\n                        name: 'high',\n                        type: 'string'\n                      }],\n                      type: '$$enum'\n                    }],\n                    type: 'object'\n                  }],\n                  type: 'object'\n                }, {\n                  description: _jsxs(_components.p, {\n                    children: [\"Learn about\", ' ', _jsx(_components.a, {\n                      href: \"/docs/guides/audio\",\n                      children: \"audio inputs\"\n                    }), \".\"]\n                  }),\n                  meta: [],\n                  name: 'Audio content part',\n                  properties: [{\n                    description: _jsxs(_components.p, {\n                      children: [\"The type of the content part. Always\", ' ', _jsx(_components.code, {\n                        children: \"input_audio\"\n                      }), \".\"]\n                    }),\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }, {\n                      name: 'enum-type',\n                      value: 'string'\n                    }],\n                    name: 'type',\n                    properties: [{\n                      description: '',\n                      meta: [],\n                      name: 'input_audio',\n                      type: 'string'\n                    }],\n                    type: '$$enum'\n                  }, {\n                    description: '',\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }],\n                    name: 'input_audio',\n                    properties: [{\n                      description: 'Base64 encoded audio data.',\n                      meta: [{\n                        name: 'required',\n                        value: 'true'\n                      }],\n                      name: 'data',\n                      type: 'string'\n                    }, {\n                      description: 'The format of the encoded audio data. Currently supports \"wav\" and \"mp3\".\\n',\n                      meta: [{\n                        name: 'required',\n                        value: 'true'\n                      }, {\n                        name: 'enum-type',\n                        value: 'string'\n                      }],\n                      name: 'format',\n                      properties: [{\n                        description: '',\n                        meta: [],\n                        name: 'wav',\n                        type: 'string'\n                      }, {\n                        description: '',\n                        meta: [],\n                        name: 'mp3',\n                        type: 'string'\n                      }],\n                      type: '$$enum'\n                    }],\n                    type: 'object'\n                  }],\n                  type: 'object'\n                }, {\n                  description: _jsxs(_components.p, {\n                    children: [\"Learn about\", ' ', _jsx(_components.a, {\n                      href: \"/docs/guides/text\",\n                      children: \"file inputs\"\n                    }), ' ', \"for text generation.\"]\n                  }),\n                  meta: [],\n                  name: 'File content part',\n                  properties: [{\n                    description: _jsxs(_components.p, {\n                      children: [\"The type of the content part. Always\", ' ', _jsx(_components.code, {\n                        children: \"file\"\n                      }), \".\"]\n                    }),\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }, {\n                      name: 'enum-type',\n                      value: 'string'\n                    }],\n                    name: 'type',\n                    properties: [{\n                      description: '',\n                      meta: [],\n                      name: 'file',\n                      type: 'string'\n                    }],\n                    type: '$$enum'\n                  }, {\n                    description: '',\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }],\n                    name: 'file',\n                    properties: [{\n                      description: 'The name of the file, used when passing the file to the model as a \\nstring.\\n',\n                      meta: [],\n                      name: 'filename',\n                      type: 'string'\n                    }, {\n                      description: 'The base64 encoded file data, used when passing the file to the model \\nas a string.\\n',\n                      meta: [],\n                      name: 'file_data',\n                      type: 'string'\n                    }, {\n                      description: 'The ID of an uploaded file to use as input.\\n',\n                      meta: [],\n                      name: 'file_id',\n                      type: 'string'\n                    }],\n                    type: 'object'\n                  }],\n                  type: 'object'\n                }],\n                type: '$$array'\n              }],\n              type: '$$xor'\n            }, {\n              description: _jsxs(_components.p, {\n                children: [\"The role of the messages author, in this case\", ' ', _jsx(_components.code, {\n                  children: \"user\"\n                }), \".\"]\n              }),\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }, {\n                name: 'enum-type',\n                value: 'string'\n              }],\n              name: 'role',\n              properties: [{\n                description: '',\n                meta: [],\n                name: 'user',\n                type: 'string'\n              }],\n              type: '$$enum'\n            }, {\n              description: 'An optional name for the participant. Provides the model information to differentiate between participants of the same role.',\n              meta: [],\n              name: 'name',\n              type: 'string'\n            }],\n            type: 'object'\n          }, {\n            description: 'Messages sent by the model in response to user messages.\\n',\n            meta: [],\n            name: 'Assistant message',\n            properties: [{\n              description: _jsxs(_components.p, {\n                children: [\"The contents of the assistant message. Required unless\", ' ', _jsx(_components.code, {\n                  children: \"tool_calls\"\n                }), ' ', \"or\", ' ', _jsx(_components.code, {\n                  children: \"function_call\"\n                }), ' ', \"is specified.\"]\n              }),\n              name: 'content',\n              properties: [{\n                description: 'The contents of the assistant message.',\n                meta: [],\n                name: 'Text content',\n                type: 'string'\n              }, {\n                description: _jsxs(_components.p, {\n                  children: [\"An array of content parts with a defined type. Can be one or more of type\", ' ', _jsx(_components.code, {\n                    children: \"text\"\n                  }), \", or exactly one of type\", ' ', _jsx(_components.code, {\n                    children: \"refusal\"\n                  }), \".\"]\n                }),\n                meta: [],\n                name: 'Array of content parts',\n                properties: [{\n                  description: _jsxs(_components.p, {\n                    children: [\"Learn about\", ' ', _jsx(_components.a, {\n                      href: \"/docs/guides/text-generation\",\n                      children: \"text inputs\"\n                    }), \".\"]\n                  }),\n                  meta: [],\n                  name: 'Text content part',\n                  properties: [{\n                    description: 'The type of the content part.',\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }, {\n                      name: 'enum-type',\n                      value: 'string'\n                    }],\n                    name: 'type',\n                    properties: [{\n                      description: '',\n                      meta: [],\n                      name: 'text',\n                      type: 'string'\n                    }],\n                    type: '$$enum'\n                  }, {\n                    description: 'The text content.',\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }],\n                    name: 'text',\n                    type: 'string'\n                  }],\n                  type: 'object'\n                }, {\n                  description: '',\n                  meta: [],\n                  name: 'Refusal content part',\n                  properties: [{\n                    description: 'The type of the content part.',\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }, {\n                      name: 'enum-type',\n                      value: 'string'\n                    }],\n                    name: 'type',\n                    properties: [{\n                      description: '',\n                      meta: [],\n                      name: 'refusal',\n                      type: 'string'\n                    }],\n                    type: '$$enum'\n                  }, {\n                    description: 'The refusal message generated by the model.',\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }],\n                    name: 'refusal',\n                    type: 'string'\n                  }],\n                  type: 'object'\n                }],\n                type: '$$array'\n              }],\n              type: '$$xor'\n            }, {\n              description: 'The refusal message by the assistant.',\n              meta: [{\n                name: 'nullable',\n                value: 'true'\n              }],\n              name: 'refusal',\n              type: 'string'\n            }, {\n              description: _jsxs(_components.p, {\n                children: [\"The role of the messages author, in this case\", ' ', _jsx(_components.code, {\n                  children: \"assistant\"\n                }), \".\"]\n              }),\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }, {\n                name: 'enum-type',\n                value: 'string'\n              }],\n              name: 'role',\n              properties: [{\n                description: '',\n                meta: [],\n                name: 'assistant',\n                type: 'string'\n              }],\n              type: '$$enum'\n            }, {\n              description: 'An optional name for the participant. Provides the model information to differentiate between participants of the same role.',\n              meta: [],\n              name: 'name',\n              type: 'string'\n            }, {\n              description: _jsxs(_components.p, {\n                children: [\"Data about a previous audio response from the model.\", ' ', _jsx(_components.a, {\n                  href: \"/docs/guides/audio\",\n                  children: \"Learn more\"\n                }), \".\"]\n              }),\n              meta: [{\n                name: 'nullable',\n                value: 'true'\n              }],\n              name: 'audio',\n              properties: [{\n                description: 'Unique identifier for a previous audio response from the model.\\n',\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'id',\n                type: 'string'\n              }],\n              type: 'object'\n            }, {\n              description: 'The tool calls generated by the model, such as function calls.',\n              meta: [],\n              name: 'tool_calls',\n              properties: [{\n                description: '',\n                meta: [],\n                name: 'items',\n                properties: [{\n                  description: 'The ID of the tool call.',\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }],\n                  name: 'id',\n                  type: 'string'\n                }, {\n                  description: _jsxs(_components.p, {\n                    children: [\"The type of the tool. Currently, only\", ' ', _jsx(_components.code, {\n                      children: \"function\"\n                    }), ' ', \"is supported.\"]\n                  }),\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }, {\n                    name: 'enum-type',\n                    value: 'string'\n                  }],\n                  name: 'type',\n                  properties: [{\n                    description: '',\n                    meta: [],\n                    name: 'function',\n                    type: 'string'\n                  }],\n                  type: '$$enum'\n                }, {\n                  description: 'The function that the model called.',\n                  meta: [{\n                    name: 'required',\n                    value: 'true'\n                  }],\n                  name: 'function',\n                  properties: [{\n                    description: 'The name of the function to call.',\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }],\n                    name: 'name',\n                    type: 'string'\n                  }, {\n                    description: 'The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.',\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }],\n                    name: 'arguments',\n                    type: 'string'\n                  }],\n                  type: 'object'\n                }],\n                type: 'object'\n              }],\n              type: '$$array'\n            }, {\n              description: _jsxs(_components.p, {\n                children: [\"Deprecated and replaced by\", ' ', _jsx(_components.code, {\n                  children: \"tool_calls\"\n                }), \". The name and arguments of a function that should be called, as generated by the model.\"]\n              }),\n              meta: [{\n                name: 'deprecated',\n                value: 'true'\n              }, {\n                name: 'nullable',\n                value: 'true'\n              }],\n              name: 'function_call',\n              properties: [{\n                description: 'The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.',\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'arguments',\n                type: 'string'\n              }, {\n                description: 'The name of the function to call.',\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'name',\n                type: 'string'\n              }],\n              type: 'object'\n            }],\n            type: 'object'\n          }, {\n            description: '',\n            meta: [],\n            name: 'Tool message',\n            properties: [{\n              description: _jsxs(_components.p, {\n                children: [\"The role of the messages author, in this case\", ' ', _jsx(_components.code, {\n                  children: \"tool\"\n                }), \".\"]\n              }),\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }, {\n                name: 'enum-type',\n                value: 'string'\n              }],\n              name: 'role',\n              properties: [{\n                description: '',\n                meta: [],\n                name: 'tool',\n                type: 'string'\n              }],\n              type: '$$enum'\n            }, {\n              description: 'The contents of the tool message.',\n              name: 'content',\n              properties: [{\n                description: 'The contents of the tool message.',\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'Text content',\n                type: 'string'\n              }, {\n                description: _jsxs(_components.p, {\n                  children: [\"An array of content parts with a defined type. For tool messages, only type\", ' ', _jsx(_components.code, {\n                    children: \"text\"\n                  }), ' ', \"is supported.\"]\n                }),\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'Array of content parts',\n                properties: [{\n                  description: _jsxs(_components.p, {\n                    children: [\"Learn about\", ' ', _jsx(_components.a, {\n                      href: \"/docs/guides/text-generation\",\n                      children: \"text inputs\"\n                    }), \".\"]\n                  }),\n                  meta: [],\n                  name: 'Text content part',\n                  properties: [{\n                    description: 'The type of the content part.',\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }, {\n                      name: 'enum-type',\n                      value: 'string'\n                    }],\n                    name: 'type',\n                    properties: [{\n                      description: '',\n                      meta: [],\n                      name: 'text',\n                      type: 'string'\n                    }],\n                    type: '$$enum'\n                  }, {\n                    description: 'The text content.',\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }],\n                    name: 'text',\n                    type: 'string'\n                  }],\n                  type: 'object'\n                }],\n                type: '$$array'\n              }],\n              type: '$$xor'\n            }, {\n              description: 'Tool call that this message is responding to.',\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }],\n              name: 'tool_call_id',\n              type: 'string'\n            }],\n            type: 'object'\n          }, {\n            description: '',\n            meta: [{\n              name: 'deprecated',\n              value: 'true'\n            }],\n            name: 'Function message',\n            properties: [{\n              description: _jsxs(_components.p, {\n                children: [\"The role of the messages author, in this case\", ' ', _jsx(_components.code, {\n                  children: \"function\"\n                }), \".\"]\n              }),\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }, {\n                name: 'enum-type',\n                value: 'string'\n              }],\n              name: 'role',\n              properties: [{\n                description: '',\n                meta: [],\n                name: 'function',\n                type: 'string'\n              }],\n              type: '$$enum'\n            }, {\n              description: 'The contents of the function message.',\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }, {\n                name: 'nullable',\n                value: 'true'\n              }],\n              name: 'content',\n              type: 'string'\n            }, {\n              description: 'The name of the function to call.',\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }],\n              name: 'name',\n              type: 'string'\n            }],\n            type: 'object'\n          }],\n          type: '$$array'\n        }, {\n          description: _jsxs(_components.p, {\n            children: [\"Model ID used to generate the response, like\", ' ', _jsx(_components.code, {\n              children: \"gpt-4o\"\n            }), ' ', \"or\", ' ', _jsx(_components.code, {\n              children: \"o3\"\n            }), \". OpenAI offers a wide range of models with different capabilities, performance characteristics, and price points. Refer to the\", ' ', _jsx(_components.a, {\n              href: \"/docs/models\",\n              children: \"model guide\"\n            }), ' ', \"to browse and compare available models.\"]\n          }),\n          name: 'model',\n          properties: [{\n            description: '',\n            meta: [{\n              name: 'required',\n              value: 'true'\n            }],\n            name: 'model',\n            type: 'string'\n          }, {\n            description: '',\n            meta: [{\n              name: 'required',\n              value: 'true'\n            }, {\n              name: 'enum-type',\n              value: 'string'\n            }],\n            name: 'model',\n            properties: [{\n              description: '',\n              meta: [],\n              name: 'gpt-4.1',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4.1-mini',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4.1-nano',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4.1-2025-04-14',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4.1-mini-2025-04-14',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4.1-nano-2025-04-14',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'o4-mini',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'o4-mini-2025-04-16',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'o3',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'o3-2025-04-16',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'o3-mini',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'o3-mini-2025-01-31',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'o1',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'o1-2024-12-17',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'o1-preview',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'o1-preview-2024-09-12',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'o1-mini',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'o1-mini-2024-09-12',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4o',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4o-2024-11-20',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4o-2024-08-06',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4o-2024-05-13',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4o-audio-preview',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4o-audio-preview-2024-10-01',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4o-audio-preview-2024-12-17',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4o-mini-audio-preview',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4o-mini-audio-preview-2024-12-17',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4o-search-preview',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4o-mini-search-preview',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4o-search-preview-2025-03-11',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4o-mini-search-preview-2025-03-11',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'chatgpt-4o-latest',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4o-mini',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4o-mini-2024-07-18',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4-turbo',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4-turbo-2024-04-09',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4-0125-preview',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4-turbo-preview',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4-1106-preview',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4-vision-preview',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4-0314',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4-0613',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4-32k',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4-32k-0314',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-4-32k-0613',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-3.5-turbo',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-3.5-turbo-16k',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-3.5-turbo-0301',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-3.5-turbo-0613',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-3.5-turbo-1106',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-3.5-turbo-0125',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'gpt-3.5-turbo-16k-0613',\n              type: 'string'\n            }],\n            type: '$$enum'\n          }],\n          type: '$$union'\n        }, {\n          description: _jsxs(_Fragment, {\n            children: [_jsx(_components.p, {\n              children: \"Output types that you would like the model to generate. Most models are capable of generating text, which is the default:\"\n            }), _jsx(_components.p, {\n              children: _jsx(_components.code, {\n                children: \"[\\\"text\\\"]\"\n              })\n            }), _jsxs(_components.p, {\n              children: [\"The\", ' ', _jsx(_components.code, {\n                children: \"gpt-4o-audio-preview\"\n              }), ' ', \"model can also be used to\", ' ', _jsx(_components.a, {\n                href: \"/docs/guides/audio\",\n                children: \"generate audio\"\n              }), \". To request that this model generate both text and audio responses, you can use:\"]\n            }), _jsx(_components.p, {\n              children: _jsx(_components.code, {\n                children: \"[\\\"text\\\", \\\"audio\\\"]\"\n              })\n            })]\n          }),\n          meta: [{\n            name: 'nullable',\n            value: 'true'\n          }],\n          name: 'modalities',\n          properties: [{\n            description: '',\n            meta: [{\n              name: 'enum-type',\n              value: 'string'\n            }],\n            name: 'items',\n            properties: [{\n              description: '',\n              meta: [],\n              name: 'text',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'audio',\n              type: 'string'\n            }],\n            type: '$$enum'\n          }],\n          type: '$$array'\n        }, {\n          description: _jsxs(_Fragment, {\n            children: [_jsx(_components.p, {\n              children: _jsx(_components.strong, {\n                children: \"o-series models only\"\n              })\n            }), _jsxs(_components.p, {\n              children: [\"Constrains effort on reasoning for\", ' ', _jsx(_components.a, {\n                href: \"https://platform.openai.com/docs/guides/reasoning\",\n                children: \"reasoning models\"\n              }), \". Currently supported values are\", ' ', _jsx(_components.code, {\n                children: \"low\"\n              }), \",\", ' ', _jsx(_components.code, {\n                children: \"medium\"\n              }), \", and\", ' ', _jsx(_components.code, {\n                children: \"high\"\n              }), \". Reducing reasoning effort can result in faster responses and fewer tokens used on reasoning in a response.\"]\n            })]\n          }),\n          meta: [{\n            name: 'defaults',\n            value: 'medium'\n          }, {\n            name: 'nullable',\n            value: 'true'\n          }, {\n            name: 'enum-type',\n            value: 'string'\n          }],\n          name: 'reasoning_effort',\n          properties: [{\n            description: '',\n            meta: [],\n            name: 'low',\n            type: 'string'\n          }, {\n            description: '',\n            meta: [],\n            name: 'medium',\n            type: 'string'\n          }, {\n            description: '',\n            meta: [],\n            name: 'high',\n            type: 'string'\n          }],\n          type: '$$enum'\n        }, {\n          description: _jsxs(_components.p, {\n            children: [\"An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and\", ' ', _jsx(_components.a, {\n              href: \"/docs/guides/reasoning\",\n              children: \"reasoning tokens\"\n            }), \".\"]\n          }),\n          meta: [{\n            name: 'nullable',\n            value: 'true'\n          }],\n          name: 'max_completion_tokens',\n          type: 'integer'\n        }, {\n          description: 'Number between -2.0 and 2.0. Positive values penalize new tokens based on\\ntheir existing frequency in the text so far, decreasing the model\\'s\\nlikelihood to repeat the same line verbatim.\\n',\n          meta: [{\n            name: 'defaults',\n            value: 0\n          }, {\n            name: 'nullable',\n            value: 'true'\n          }],\n          name: 'frequency_penalty',\n          type: 'number'\n        }, {\n          description: 'Number between -2.0 and 2.0. Positive values penalize new tokens based on\\nwhether they appear in the text so far, increasing the model\\'s likelihood\\nto talk about new topics.\\n',\n          meta: [{\n            name: 'defaults',\n            value: 0\n          }, {\n            name: 'nullable',\n            value: 'true'\n          }],\n          name: 'presence_penalty',\n          type: 'number'\n        }, {\n          description: _jsxs(_components.p, {\n            children: [\"This tool searches the web for relevant results to use in a response. Learn more about the\", ' ', _jsx(_components.a, {\n              href: \"/docs/guides/tools-web-search?api-mode=chat\",\n              children: \"web search tool\"\n            }), \".\"]\n          }),\n          meta: [],\n          name: 'web_search_options',\n          properties: [{\n            description: 'Approximate location parameters for the search.\\n',\n            meta: [{\n              name: 'nullable',\n              value: 'true'\n            }],\n            name: 'user_location',\n            properties: [{\n              description: _jsxs(_components.p, {\n                children: [\"The type of location approximation. Always\", ' ', _jsx(_components.code, {\n                  children: \"approximate\"\n                }), \".\"]\n              }),\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }, {\n                name: 'enum-type',\n                value: 'string'\n              }],\n              name: 'type',\n              properties: [{\n                description: '',\n                meta: [],\n                name: 'approximate',\n                type: 'string'\n              }],\n              type: '$$enum'\n            }, {\n              description: 'Approximate location parameters for the search.',\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }],\n              name: 'approximate',\n              properties: [{\n                description: _jsxs(_components.p, {\n                  children: [\"The two-letter\", ' ', _jsx(_components.a, {\n                    href: \"https://en.wikipedia.org/wiki/ISO_3166-1\",\n                    children: \"ISO country code\"\n                  }), ' ', \"of the user, e.g.\", ' ', _jsx(_components.code, {\n                    children: \"US\"\n                  }), \".\"]\n                }),\n                meta: [],\n                name: 'country',\n                type: 'string'\n              }, {\n                description: _jsxs(_components.p, {\n                  children: [\"Free text input for the region of the user, e.g.\", ' ', _jsx(_components.code, {\n                    children: \"California\"\n                  }), \".\"]\n                }),\n                meta: [],\n                name: 'region',\n                type: 'string'\n              }, {\n                description: _jsxs(_components.p, {\n                  children: [\"Free text input for the city of the user, e.g.\", ' ', _jsx(_components.code, {\n                    children: \"San Francisco\"\n                  }), \".\"]\n                }),\n                meta: [],\n                name: 'city',\n                type: 'string'\n              }, {\n                description: _jsxs(_components.p, {\n                  children: [\"The\", ' ', _jsx(_components.a, {\n                    href: \"https://timeapi.io/documentation/iana-timezones\",\n                    children: \"IANA timezone\"\n                  }), ' ', \"of the user, e.g.\", ' ', _jsx(_components.code, {\n                    children: \"America/Los_Angeles\"\n                  }), \".\"]\n                }),\n                meta: [],\n                name: 'timezone',\n                type: 'string'\n              }],\n              type: 'object'\n            }],\n            type: 'object'\n          }, {\n            description: _jsxs(_components.p, {\n              children: [\"High level guidance for the amount of context window space to use for the search. One of\", ' ', _jsx(_components.code, {\n                children: \"low\"\n              }), \",\", ' ', _jsx(_components.code, {\n                children: \"medium\"\n              }), \", or\", ' ', _jsx(_components.code, {\n                children: \"high\"\n              }), \".\", ' ', _jsx(_components.code, {\n                children: \"medium\"\n              }), ' ', \"is the default.\"]\n            }),\n            meta: [{\n              name: 'defaults',\n              value: 'medium'\n            }, {\n              name: 'enum-type',\n              value: 'string'\n            }],\n            name: 'search_context_size',\n            properties: [{\n              description: '',\n              meta: [],\n              name: 'low',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'medium',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'high',\n              type: 'string'\n            }],\n            type: '$$enum'\n          }],\n          type: 'object'\n        }, {\n          description: _jsxs(_components.p, {\n            children: [\"An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability.\", ' ', _jsx(_components.code, {\n              children: \"logprobs\"\n            }), ' ', \"must be set to\", ' ', _jsx(_components.code, {\n              children: \"true\"\n            }), ' ', \"if this parameter is used.\"]\n          }),\n          meta: [{\n            name: 'nullable',\n            value: 'true'\n          }],\n          name: 'top_logprobs',\n          type: 'integer'\n        }, {\n          description: _jsxs(_Fragment, {\n            children: [_jsx(_components.p, {\n              children: \"An object specifying the format that the model must output.\"\n            }), _jsxs(_components.p, {\n              children: [\"Setting to\", ' ', _jsx(_components.code, {}), ' ', \"enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the\", ' ', _jsx(_components.a, {\n                href: \"/docs/guides/structured-outputs\",\n                children: \"Structured Outputs guide\"\n              }), \".\"]\n            }), _jsxs(_components.p, {\n              children: [\"Setting to\", ' ', _jsx(_components.code, {}), ' ', \"enables the older JSON mode, which ensures the message the model generates is valid JSON. Using\", ' ', _jsx(_components.code, {\n                children: \"json_schema\"\n              }), ' ', \"is preferred for models that support it.\"]\n            })]\n          }),\n          name: 'response_format',\n          properties: [{\n            description: 'Default response format. Used to generate text responses.\\n',\n            meta: [],\n            name: 'Text',\n            properties: [{\n              description: _jsxs(_components.p, {\n                children: [\"The type of response format being defined. Always\", ' ', _jsx(_components.code, {\n                  children: \"text\"\n                }), \".\"]\n              }),\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }, {\n                name: 'enum-type',\n                value: 'string'\n              }],\n              name: 'type',\n              properties: [{\n                description: '',\n                meta: [],\n                name: 'text',\n                type: 'string'\n              }],\n              type: '$$enum'\n            }],\n            type: 'object'\n          }, {\n            description: _jsxs(_components.p, {\n              children: [\"JSON Schema response format. Used to generate structured JSON responses. Learn more about\", ' ', _jsx(_components.a, {\n                href: \"/docs/guides/structured-outputs\",\n                children: \"Structured Outputs\"\n              }), \".\"]\n            }),\n            meta: [],\n            name: 'JSON schema',\n            properties: [{\n              description: _jsxs(_components.p, {\n                children: [\"The type of response format being defined. Always\", ' ', _jsx(_components.code, {\n                  children: \"json_schema\"\n                }), \".\"]\n              }),\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }, {\n                name: 'enum-type',\n                value: 'string'\n              }],\n              name: 'type',\n              properties: [{\n                description: '',\n                meta: [],\n                name: 'json_schema',\n                type: 'string'\n              }],\n              type: '$$enum'\n            }, {\n              description: 'Structured Outputs configuration options, including a JSON Schema.\\n',\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }],\n              name: 'json_schema',\n              properties: [{\n                description: 'A description of what the response format is for, used by the model to\\ndetermine how to respond in the format.\\n',\n                meta: [],\n                name: 'description',\n                type: 'string'\n              }, {\n                description: 'The name of the response format. Must be a-z, A-Z, 0-9, or contain\\nunderscores and dashes, with a maximum length of 64.\\n',\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'name',\n                type: 'string'\n              }, {\n                description: _jsxs(_components.p, {\n                  children: [\"The schema for the response format, described as a JSON Schema object. Learn how to build JSON schemas\", ' ', _jsx(_components.a, {\n                    href: \"https://json-schema.org/\",\n                    children: \"here\"\n                  }), \".\"]\n                }),\n                meta: [],\n                name: 'schema',\n                type: 'object'\n              }, {\n                description: _jsxs(_components.p, {\n                  children: [\"Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the\", ' ', _jsx(_components.code, {\n                    children: \"schema\"\n                  }), ' ', \"field. Only a subset of JSON Schema is supported when\", ' ', _jsx(_components.code, {\n                    children: \"strict\"\n                  }), ' ', \"is\", ' ', _jsx(_components.code, {\n                    children: \"true\"\n                  }), \". To learn more, read the\", ' ', _jsx(_components.a, {\n                    href: \"/docs/guides/structured-outputs\",\n                    children: \"Structured Outputs guide\"\n                  }), \".\"]\n                }),\n                meta: [{\n                  name: 'defaults',\n                  value: false\n                }, {\n                  name: 'nullable',\n                  value: 'true'\n                }],\n                name: 'strict',\n                type: 'boolean'\n              }],\n              type: 'object'\n            }],\n            type: 'object'\n          }, {\n            description: _jsxs(_components.p, {\n              children: [\"JSON object response format. An older method of generating JSON responses. Using\", ' ', _jsx(_components.code, {\n                children: \"json_schema\"\n              }), ' ', \"is recommended for models that support it. Note that the model will not generate JSON without a system or user message instructing it to do so.\"]\n            }),\n            meta: [],\n            name: 'JSON object',\n            properties: [{\n              description: _jsxs(_components.p, {\n                children: [\"The type of response format being defined. Always\", ' ', _jsx(_components.code, {\n                  children: \"json_object\"\n                }), \".\"]\n              }),\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }, {\n                name: 'enum-type',\n                value: 'string'\n              }],\n              name: 'type',\n              properties: [{\n                description: '',\n                meta: [],\n                name: 'json_object',\n                type: 'string'\n              }],\n              type: '$$enum'\n            }],\n            type: 'object'\n          }],\n          type: '$$xor'\n        }, {\n          description: _jsxs(_components.p, {\n            children: [\"Parameters for audio output. Required when audio output is requested with\", ' ', _jsx(_components.code, {\n              children: \"modalities: [\\\"audio\\\"]\"\n            }), \".\", ' ', _jsx(_components.a, {\n              href: \"/docs/guides/audio\",\n              children: \"Learn more\"\n            }), \".\"]\n          }),\n          meta: [{\n            name: 'nullable',\n            value: 'true'\n          }],\n          name: 'audio',\n          properties: [{\n            description: _jsxs(_components.p, {\n              children: [\"The voice the model uses to respond. Supported voices are\", ' ', _jsx(_components.code, {\n                children: \"alloy\"\n              }), \",\", ' ', _jsx(_components.code, {\n                children: \"ash\"\n              }), \",\", ' ', _jsx(_components.code, {\n                children: \"ballad\"\n              }), \",\", ' ', _jsx(_components.code, {\n                children: \"coral\"\n              }), \",\", ' ', _jsx(_components.code, {\n                children: \"echo\"\n              }), \",\", ' ', _jsx(_components.code, {\n                children: \"fable\"\n              }), \",\", ' ', _jsx(_components.code, {\n                children: \"nova\"\n              }), \",\", ' ', _jsx(_components.code, {\n                children: \"onyx\"\n              }), \",\", ' ', _jsx(_components.code, {\n                children: \"sage\"\n              }), \", and\", ' ', _jsx(_components.code, {\n                children: \"shimmer\"\n              }), \".\"]\n            }),\n            name: 'voice',\n            properties: [{\n              description: '',\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }],\n              name: 'voice',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }, {\n                name: 'enum-type',\n                value: 'string'\n              }],\n              name: 'voice',\n              properties: [{\n                description: '',\n                meta: [],\n                name: 'alloy',\n                type: 'string'\n              }, {\n                description: '',\n                meta: [],\n                name: 'ash',\n                type: 'string'\n              }, {\n                description: '',\n                meta: [],\n                name: 'ballad',\n                type: 'string'\n              }, {\n                description: '',\n                meta: [],\n                name: 'coral',\n                type: 'string'\n              }, {\n                description: '',\n                meta: [],\n                name: 'echo',\n                type: 'string'\n              }, {\n                description: '',\n                meta: [],\n                name: 'fable',\n                type: 'string'\n              }, {\n                description: '',\n                meta: [],\n                name: 'onyx',\n                type: 'string'\n              }, {\n                description: '',\n                meta: [],\n                name: 'nova',\n                type: 'string'\n              }, {\n                description: '',\n                meta: [],\n                name: 'sage',\n                type: 'string'\n              }, {\n                description: '',\n                meta: [],\n                name: 'shimmer',\n                type: 'string'\n              }, {\n                description: '',\n                meta: [],\n                name: 'verse',\n                type: 'string'\n              }],\n              type: '$$enum'\n            }],\n            type: '$$union'\n          }, {\n            description: _jsxs(_components.p, {\n              children: [\"Specifies the output audio format. Must be one of\", ' ', _jsx(_components.code, {\n                children: \"wav\"\n              }), \",\", ' ', _jsx(_components.code, {\n                children: \"mp3\"\n              }), \",\", ' ', _jsx(_components.code, {\n                children: \"flac\"\n              }), \",\", ' ', _jsx(_components.code, {\n                children: \"opus\"\n              }), \", or\", ' ', _jsx(_components.code, {\n                children: \"pcm16\"\n              }), \".\"]\n            }),\n            meta: [{\n              name: 'required',\n              value: 'true'\n            }, {\n              name: 'enum-type',\n              value: 'string'\n            }],\n            name: 'format',\n            properties: [{\n              description: '',\n              meta: [],\n              name: 'wav',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'aac',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'mp3',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'flac',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'opus',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'pcm16',\n              type: 'string'\n            }],\n            type: '$$enum'\n          }],\n          type: 'object'\n        }, {\n          description: _jsxs(_components.p, {\n            children: [\"Whether or not to store the output of this chat completion request for use in our\", ' ', _jsx(_components.a, {\n              href: \"/docs/guides/distillation\",\n              children: \"model distillation\"\n            }), ' ', \"or\", ' ', _jsx(_components.a, {\n              href: \"/docs/guides/evals\",\n              children: \"evals\"\n            }), ' ', \"products.\"]\n          }),\n          meta: [{\n            name: 'defaults',\n            value: false\n          }, {\n            name: 'nullable',\n            value: 'true'\n          }],\n          name: 'store',\n          type: 'boolean'\n        }, {\n          description: _jsxs(_components.p, {\n            children: [\"If set to true, the model response data will be streamed to the client as it is generated using\", ' ', _jsx(_components.a, {\n              href: \"https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format\",\n              children: \"server-sent events\"\n            }), \". See the\", ' ', _jsx(_components.a, {\n              href: \"/docs/api-reference/chat/streaming\",\n              children: \"Streaming section below\"\n            }), ' ', \"for more information, along with the\", ' ', _jsx(_components.a, {\n              href: \"/docs/guides/streaming-responses\",\n              children: \"streaming responses\"\n            }), ' ', \"guide for more information on how to handle the streaming events.\"]\n          }),\n          meta: [{\n            name: 'defaults',\n            value: false\n          }, {\n            name: 'nullable',\n            value: 'true'\n          }],\n          name: 'stream',\n          type: 'boolean'\n        }, {\n          description: _jsxs(_Fragment, {\n            children: [_jsxs(_components.p, {\n              children: [\"Not supported with latest reasoning models\", ' ', _jsx(_components.code, {\n                children: \"o3\"\n              }), ' ', \"and\", ' ', _jsx(_components.code, {\n                children: \"o4-mini\"\n              }), \".\"]\n            }), _jsx(_components.p, {\n              children: \"Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.\"\n            })]\n          }),\n          name: 'stop',\n          properties: [{\n            description: '',\n            meta: [{\n              name: 'defaults',\n              value: '<|endoftext|>'\n            }, {\n              name: 'nullable',\n              value: 'true'\n            }],\n            name: 'stop',\n            type: 'string'\n          }, {\n            description: '',\n            meta: [],\n            name: 'stop',\n            properties: [{\n              description: '',\n              meta: [],\n              name: 'items',\n              type: 'string'\n            }],\n            type: '$$array'\n          }],\n          type: '$$xor'\n        }, {\n          description: 'Modify the likelihood of specified tokens appearing in the completion.\\n\\nAccepts a JSON object that maps tokens (specified by their token ID in the\\ntokenizer) to an associated bias value from -100 to 100. Mathematically,\\nthe bias is added to the logits generated by the model prior to sampling.\\nThe exact effect will vary per model, but values between -1 and 1 should\\ndecrease or increase likelihood of selection; values like -100 or 100\\nshould result in a ban or exclusive selection of the relevant token.\\n',\n          meta: [{\n            name: 'defaults',\n            value: null\n          }, {\n            name: 'nullable',\n            value: 'true'\n          }],\n          name: 'logit_bias',\n          type: 'object'\n        }, {\n          description: _jsxs(_components.p, {\n            children: [\"Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the\", ' ', _jsx(_components.code, {\n              children: \"content\"\n            }), ' ', \"of\", ' ', _jsx(_components.code, {\n              children: \"message\"\n            }), \".\"]\n          }),\n          meta: [{\n            name: 'defaults',\n            value: false\n          }, {\n            name: 'nullable',\n            value: 'true'\n          }],\n          name: 'logprobs',\n          type: 'boolean'\n        }, {\n          description: _jsxs(_Fragment, {\n            children: [_jsxs(_components.p, {\n              children: [\"The maximum number of\", ' ', _jsx(_components.a, {\n                href: \"/tokenizer\",\n                children: \"tokens\"\n              }), ' ', \"that can be generated in the chat completion. This value can be used to control\", ' ', _jsx(_components.a, {\n                href: \"https://openai.com/api/pricing/\",\n                children: \"costs\"\n              }), ' ', \"for text generated via API.\"]\n            }), _jsxs(_components.p, {\n              children: [\"This value is now deprecated in favor of\", ' ', _jsx(_components.code, {\n                children: \"max_completion_tokens\"\n              }), \", and is not compatible with\", ' ', _jsx(_components.a, {\n                href: \"/docs/guides/reasoning\",\n                children: \"o-series models\"\n              }), \".\"]\n            })]\n          }),\n          meta: [{\n            name: 'deprecated',\n            value: 'true'\n          }, {\n            name: 'nullable',\n            value: 'true'\n          }],\n          name: 'max_tokens',\n          type: 'integer'\n        }, {\n          description: _jsxs(_components.p, {\n            children: [\"How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep\", ' ', _jsx(_components.code, {\n              children: \"n\"\n            }), ' ', \"as\", ' ', _jsx(_components.code, {\n              children: \"1\"\n            }), ' ', \"to minimize costs.\"]\n          }),\n          meta: [{\n            name: 'defaults',\n            value: 1\n          }, {\n            name: 'nullable',\n            value: 'true'\n          }],\n          name: 'n',\n          type: 'integer'\n        }, {\n          description: _jsxs(_components.p, {\n            children: [\"Configuration for a\", ' ', _jsx(_components.a, {\n              href: \"/docs/guides/predicted-outputs\",\n              children: \"Predicted Output\"\n            }), \", which can greatly improve response times when large parts of the model response are known ahead of time. This is most common when you are regenerating a file with only minor changes to most of the content.\"]\n          }),\n          name: 'prediction',\n          properties: [{\n            description: 'Static predicted output content, such as the content of a text file that is\\nbeing regenerated.\\n',\n            meta: [],\n            name: 'Static Content',\n            properties: [{\n              description: _jsxs(_components.p, {\n                children: [\"The type of the predicted content you want to provide. This type is currently always\", ' ', _jsx(_components.code, {\n                  children: \"content\"\n                }), \".\"]\n              }),\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }, {\n                name: 'enum-type',\n                value: 'string'\n              }],\n              name: 'type',\n              properties: [{\n                description: '',\n                meta: [],\n                name: 'content',\n                type: 'string'\n              }],\n              type: '$$enum'\n            }, {\n              description: 'The content that should be matched when generating a model response.\\nIf generated tokens would match this content, the entire model response\\ncan be returned much more quickly.\\n',\n              name: 'content',\n              properties: [{\n                description: 'The content used for a Predicted Output. This is often the\\ntext of a file you are regenerating with minor changes.\\n',\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'Text content',\n                type: 'string'\n              }, {\n                description: _jsxs(_components.p, {\n                  children: [\"An array of content parts with a defined type. Supported options differ based on the\", ' ', _jsx(_components.a, {\n                    href: \"/docs/models\",\n                    children: \"model\"\n                  }), ' ', \"being used to generate the response. Can contain text inputs.\"]\n                }),\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'Array of content parts',\n                properties: [{\n                  description: _jsxs(_components.p, {\n                    children: [\"Learn about\", ' ', _jsx(_components.a, {\n                      href: \"/docs/guides/text-generation\",\n                      children: \"text inputs\"\n                    }), \".\"]\n                  }),\n                  meta: [],\n                  name: 'items',\n                  properties: [{\n                    description: 'The type of the content part.',\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }, {\n                      name: 'enum-type',\n                      value: 'string'\n                    }],\n                    name: 'type',\n                    properties: [{\n                      description: '',\n                      meta: [],\n                      name: 'text',\n                      type: 'string'\n                    }],\n                    type: '$$enum'\n                  }, {\n                    description: 'The text content.',\n                    meta: [{\n                      name: 'required',\n                      value: 'true'\n                    }],\n                    name: 'text',\n                    type: 'string'\n                  }],\n                  type: 'object'\n                }],\n                type: '$$array'\n              }],\n              type: '$$xor'\n            }],\n            type: 'object'\n          }],\n          type: '$$xor'\n        }, {\n          description: _jsxs(_components.p, {\n            children: [\"This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same\", ' ', _jsx(_components.code, {\n              children: \"seed\"\n            }), ' ', \"and parameters should return the same result. Determinism is not guaranteed, and you should refer to the\", ' ', _jsx(_components.code, {\n              children: \"system_fingerprint\"\n            }), ' ', \"response parameter to monitor changes in the backend.\"]\n          }),\n          meta: [{\n            name: 'nullable',\n            value: 'true'\n          }],\n          name: 'seed',\n          type: 'integer'\n        }, {\n          description: _jsxs(_components.p, {\n            children: [\"Options for streaming response. Only set this when you set\", ' ', _jsx(_components.code, {\n              children: \"stream: true\"\n            }), \".\"]\n          }),\n          meta: [{\n            name: 'defaults',\n            value: null\n          }, {\n            name: 'nullable',\n            value: 'true'\n          }],\n          name: 'stream_options',\n          properties: [{\n            description: _jsxs(_Fragment, {\n              children: [_jsxs(_components.p, {\n                children: [\"If set, an additional chunk will be streamed before the\", ' ', _jsx(_components.code, {\n                  children: \"data: [DONE]\"\n                }), ' ', \"message. The\", ' ', _jsx(_components.code, {\n                  children: \"usage\"\n                }), ' ', \"field on this chunk shows the token usage statistics for the entire request, and the\", ' ', _jsx(_components.code, {\n                  children: \"choices\"\n                }), ' ', \"field will always be an empty array.\"]\n              }), _jsxs(_components.p, {\n                children: [\"All other chunks will also include a\", ' ', _jsx(_components.code, {\n                  children: \"usage\"\n                }), ' ', \"field, but with a null value.\", ' ', _jsx(_components.strong, {\n                  children: \"NOTE:\"\n                }), ' ', \"If the stream is interrupted, you may not receive the final usage chunk which contains the total token usage for the request.\"]\n              })]\n            }),\n            meta: [],\n            name: 'include_usage',\n            type: 'boolean'\n          }],\n          type: 'object'\n        }, {\n          description: 'A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.\\n',\n          meta: [],\n          name: 'tools',\n          properties: [{\n            description: '',\n            meta: [],\n            name: 'items',\n            properties: [{\n              description: _jsxs(_components.p, {\n                children: [\"The type of the tool. Currently, only\", ' ', _jsx(_components.code, {\n                  children: \"function\"\n                }), ' ', \"is supported.\"]\n              }),\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }, {\n                name: 'enum-type',\n                value: 'string'\n              }],\n              name: 'type',\n              properties: [{\n                description: '',\n                meta: [],\n                name: 'function',\n                type: 'string'\n              }],\n              type: '$$enum'\n            }, {\n              description: '',\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }],\n              name: 'function',\n              properties: [{\n                description: 'A description of what the function does, used by the model to choose when and how to call the function.',\n                meta: [],\n                name: 'description',\n                type: 'string'\n              }, {\n                description: 'The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.',\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'name',\n                type: 'string'\n              }, {\n                description: _jsxs(_Fragment, {\n                  children: [_jsxs(_components.p, {\n                    children: [\"The parameters the functions accepts, described as a JSON Schema object. See the\", ' ', _jsx(_components.a, {\n                      href: \"/docs/guides/function-calling\",\n                      children: \"guide\"\n                    }), ' ', \"for examples, and the\", ' ', _jsx(_components.a, {\n                      href: \"https://json-schema.org/understanding-json-schema/\",\n                      children: \"JSON Schema reference\"\n                    }), ' ', \"for documentation about the format.\"]\n                  }), _jsxs(_components.p, {\n                    children: [\"Omitting\", ' ', _jsx(_components.code, {\n                      children: \"parameters\"\n                    }), ' ', \"defines a function with an empty parameter list.\"]\n                  })]\n                }),\n                meta: [],\n                name: 'parameters',\n                type: 'object'\n              }, {\n                description: _jsxs(_components.p, {\n                  children: [\"Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the\", ' ', _jsx(_components.code, {\n                    children: \"parameters\"\n                  }), ' ', \"field. Only a subset of JSON Schema is supported when\", ' ', _jsx(_components.code, {\n                    children: \"strict\"\n                  }), ' ', \"is\", ' ', _jsx(_components.code, {\n                    children: \"true\"\n                  }), \". Learn more about Structured Outputs in the\", ' ', _jsx(_components.a, {\n                    href: \"docs/guides/function-calling\",\n                    children: \"function calling guide\"\n                  }), \".\"]\n                }),\n                meta: [{\n                  name: 'defaults',\n                  value: false\n                }, {\n                  name: 'nullable',\n                  value: 'true'\n                }],\n                name: 'strict',\n                type: 'boolean'\n              }],\n              type: 'object'\n            }],\n            type: 'object'\n          }],\n          type: '$$array'\n        }, {\n          description: _jsxs(_Fragment, {\n            children: [_jsxs(_components.p, {\n              children: [\"Controls which (if any) tool is called by the model.\", ' ', _jsx(_components.code, {\n                children: \"none\"\n              }), ' ', \"means the model will not call any tool and instead generates a message.\", ' ', _jsx(_components.code, {\n                children: \"auto\"\n              }), ' ', \"means the model can pick between generating a message or calling one or more tools.\", ' ', _jsx(_components.code, {\n                children: \"required\"\n              }), ' ', \"means the model must call one or more tools. Specifying a particular tool via\", ' ', _jsx(_components.code, {}), ' ', \"forces the model to call that tool.\"]\n            }), _jsxs(_components.p, {\n              children: [_jsx(_components.code, {\n                children: \"none\"\n              }), ' ', \"is the default when no tools are present.\", ' ', _jsx(_components.code, {\n                children: \"auto\"\n              }), ' ', \"is the default if tools are present.\"]\n            })]\n          }),\n          name: 'tool_choice',\n          properties: [{\n            description: _jsxs(_components.p, {\n              children: [_jsx(_components.code, {\n                children: \"none\"\n              }), ' ', \"means the model will not call any tool and instead generates a message.\", ' ', _jsx(_components.code, {\n                children: \"auto\"\n              }), ' ', \"means the model can pick between generating a message or calling one or more tools.\", ' ', _jsx(_components.code, {\n                children: \"required\"\n              }), ' ', \"means the model must call one or more tools.\"]\n            }),\n            meta: [{\n              name: 'enum-type',\n              value: 'string'\n            }],\n            name: 'tool_choice',\n            properties: [{\n              description: '',\n              meta: [],\n              name: 'none',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'auto',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'required',\n              type: 'string'\n            }],\n            type: '$$enum'\n          }, {\n            description: 'Specifies a tool the model should use. Use to force the model to call a specific function.',\n            meta: [],\n            name: 'tool_choice',\n            properties: [{\n              description: _jsxs(_components.p, {\n                children: [\"The type of the tool. Currently, only\", ' ', _jsx(_components.code, {\n                  children: \"function\"\n                }), ' ', \"is supported.\"]\n              }),\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }, {\n                name: 'enum-type',\n                value: 'string'\n              }],\n              name: 'type',\n              properties: [{\n                description: '',\n                meta: [],\n                name: 'function',\n                type: 'string'\n              }],\n              type: '$$enum'\n            }, {\n              description: '',\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }],\n              name: 'function',\n              properties: [{\n                description: 'The name of the function to call.',\n                meta: [{\n                  name: 'required',\n                  value: 'true'\n                }],\n                name: 'name',\n                type: 'string'\n              }],\n              type: 'object'\n            }],\n            type: 'object'\n          }],\n          type: '$$xor'\n        }, {\n          description: _jsxs(_components.p, {\n            children: [\"Whether to enable\", ' ', _jsx(_components.a, {\n              href: \"/docs/guides/function-calling#configuring-parallel-function-calling\",\n              children: \"parallel function calling\"\n            }), ' ', \"during tool use.\"]\n          }),\n          meta: [{\n            name: 'defaults',\n            value: true\n          }],\n          name: 'parallel_tool_calls',\n          type: 'boolean'\n        }, {\n          description: _jsxs(_Fragment, {\n            children: [_jsxs(_components.p, {\n              children: [\"Deprecated in favor of\", ' ', _jsx(_components.code, {\n                children: \"tool_choice\"\n              }), \".\"]\n            }), _jsx(_components.p, {\n              children: \"Controls which (if any) function is called by the model.\"\n            }), _jsxs(_components.p, {\n              children: [_jsx(_components.code, {\n                children: \"none\"\n              }), ' ', \"means the model will not call a function and instead generates a message.\"]\n            }), _jsxs(_components.p, {\n              children: [_jsx(_components.code, {\n                children: \"auto\"\n              }), ' ', \"means the model can pick between generating a message or calling a function.\"]\n            }), _jsxs(_components.p, {\n              children: [\"Specifying a particular function via\", ' ', _jsx(_components.code, {}), ' ', \"forces the model to call that function.\"]\n            }), _jsxs(_components.p, {\n              children: [_jsx(_components.code, {\n                children: \"none\"\n              }), ' ', \"is the default when no functions are present.\", ' ', _jsx(_components.code, {\n                children: \"auto\"\n              }), ' ', \"is the default if functions are present.\"]\n            })]\n          }),\n          name: 'function_call',\n          properties: [{\n            description: _jsxs(_components.p, {\n              children: [_jsx(_components.code, {\n                children: \"none\"\n              }), ' ', \"means the model will not call a function and instead generates a message.\", ' ', _jsx(_components.code, {\n                children: \"auto\"\n              }), ' ', \"means the model can pick between generating a message or calling a function.\"]\n            }),\n            meta: [{\n              name: 'enum-type',\n              value: 'string'\n            }],\n            name: 'function_call',\n            properties: [{\n              description: '',\n              meta: [],\n              name: 'none',\n              type: 'string'\n            }, {\n              description: '',\n              meta: [],\n              name: 'auto',\n              type: 'string'\n            }],\n            type: '$$enum'\n          }, {\n            description: _jsxs(_components.p, {\n              children: [\"Specifying a particular function via\", ' ', _jsx(_components.code, {}), ' ', \"forces the model to call that function.\"]\n            }),\n            meta: [],\n            name: 'function_call',\n            properties: [{\n              description: 'The name of the function to call.',\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }],\n              name: 'name',\n              type: 'string'\n            }],\n            type: 'object'\n          }],\n          type: '$$xor'\n        }, {\n          description: _jsxs(_Fragment, {\n            children: [_jsxs(_components.p, {\n              children: [\"Deprecated in favor of\", ' ', _jsx(_components.code, {\n                children: \"tools\"\n              }), \".\"]\n            }), _jsx(_components.p, {\n              children: \"A list of functions the model may generate JSON inputs for.\"\n            })]\n          }),\n          meta: [{\n            name: 'deprecated',\n            value: 'true'\n          }],\n          name: 'functions',\n          properties: [{\n            description: '',\n            meta: [{\n              name: 'deprecated',\n              value: 'true'\n            }],\n            name: 'items',\n            properties: [{\n              description: 'A description of what the function does, used by the model to choose when and how to call the function.',\n              meta: [],\n              name: 'description',\n              type: 'string'\n            }, {\n              description: 'The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.',\n              meta: [{\n                name: 'required',\n                value: 'true'\n              }],\n              name: 'name',\n              type: 'string'\n            }, {\n              description: _jsxs(_Fragment, {\n                children: [_jsxs(_components.p, {\n                  children: [\"The parameters the functions accepts, described as a JSON Schema object. See the\", ' ', _jsx(_components.a, {\n                    href: \"/docs/guides/function-calling\",\n                    children: \"guide\"\n                  }), ' ', \"for examples, and the\", ' ', _jsx(_components.a, {\n                    href: \"https://json-schema.org/understanding-json-schema/\",\n                    children: \"JSON Schema reference\"\n                  }), ' ', \"for documentation about the format.\"]\n                }), _jsxs(_components.p, {\n                  children: [\"Omitting\", ' ', _jsx(_components.code, {\n                    children: \"parameters\"\n                  }), ' ', \"defines a function with an empty parameter list.\"]\n                })]\n              }),\n              meta: [],\n              name: 'parameters',\n              type: 'object'\n            }],\n            type: 'object'\n          }],\n          type: '$$array'\n        }],\n        rootProperty: undefined,\n        symbolDef: undefined,\n        title: 'Request body'\n      }, {\n        description: _jsxs(_components.p, {\n          children: [\"Returns a\", ' ', _jsx(_components.a, {\n            href: \"/docs/api-reference/chat/object\",\n            children: \"chat completion\"\n          }), ' ', \"object, or a streamed sequence of\", ' ', _jsx(_components.a, {\n            href: \"/docs/api-reference/chat/streaming\",\n            children: \"chat completion chunk\"\n          }), ' ', \"objects if the request is streamed.\"]\n        }),\n        properties: [],\n        title: 'Response'\n      }],\n      description: _jsxs(_Fragment, {\n        children: [_jsxs(_components.p, {\n          children: [_jsx(_components.strong, {\n            children: \"Starting a new project?\"\n          }), ' ', \"We recommend trying\", ' ', _jsx(_components.a, {\n            href: \"/docs/api-reference/responses\",\n            children: \"Responses\"\n          }), ' ', \"to take advantage of the latest OpenAI platform features. Compare\", ' ', _jsx(_components.a, {\n            href: \"/docs/guides/responses-vs-chat-completions?api-mode=responses\",\n            children: \"Chat Completions with Responses\"\n          }), \".\"]\n        }), _jsx(_components.hr, {}), _jsxs(_components.p, {\n          children: [\"Creates a model response for the given chat conversation. Learn more in the\", ' ', _jsx(_components.a, {\n            href: \"/docs/guides/text-generation\",\n            children: \"text generation\"\n          }), \",\", ' ', _jsx(_components.a, {\n            href: \"/docs/guides/vision\",\n            children: \"vision\"\n          }), \", and\", ' ', _jsx(_components.a, {\n            href: \"/docs/guides/audio\",\n            children: \"audio\"\n          }), ' ', \"guides.\"]\n        }), _jsxs(_components.p, {\n          children: [\"Parameter support can differ depending on the model used to generate the response, particularly for newer reasoning models. Parameters that are only supported for reasoning models are noted below. For the current state of unsupported parameters in reasoning models,\", ' ', _jsx(_components.a, {\n            href: \"/docs/guides/reasoning\",\n            children: \"refer to the reasoning guide\"\n          }), \".\"]\n        })]\n      }),\n      examples: {\n        groups: [{\n          description: 'Example request',\n          examples: [{\n            codeblock: {\n              tabs: [{\n                code: 'curl https://api.openai.com/v1/chat/completions \\\\\\n  -H \"Content-Type: application/json\" \\\\\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\\\\n  -d \\'{\\n    \"model\": \"VAR_chat_model_id\",\\n    \"messages\": [\\n      {\\n        \"role\": \"developer\",\\n        \"content\": \"You are a helpful assistant.\"\\n      },\\n      {\\n        \"role\": \"user\",\\n        \"content\": \"Hello!\"\\n      }\\n    ]\\n  }\\'\\n',\n                highlighted: {\n                  annotations: [],\n                  code: 'curl https://api.openai.com/v1/chat/completions \\\\\\n  -H \"Content-Type: application/json\" \\\\\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\\\\n  -d \\'{\\n    \"model\": \"VAR_chat_model_id\",\\n    \"messages\": [\\n      {\\n        \"role\": \"developer\",\\n        \"content\": \"You are a helpful assistant.\"\\n      },\\n      {\\n        \"role\": \"user\",\\n        \"content\": \"Hello!\"\\n      }\\n    ]\\n  }\\'\\n',\n                  lang: 'shellscript',\n                  meta: 'curl',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['curl', '#DCDCAA'], ' ', ['https://api.openai.com/v1/chat/completions', '#CE9178'], ' ', ['\\\\', '#D7BA7D'], '\\n  ', ['-H \"Content-Type: application/json\"', '#CE9178'], ' ', ['\\\\', '#D7BA7D'], '\\n  ', ['-H \"Authorization: Bearer', '#CE9178'], ' ', ['$OPENAI_API_KEY', '#9CDCFE'], ['\"', '#CE9178'], ' ', ['\\\\', '#D7BA7D'], '\\n  ', ['-d \\'{', '#CE9178'], '\\n    ', ['\"model\": \"VAR_chat_model_id\",', '#CE9178'], '\\n    ', ['\"messages\": [', '#CE9178'], '\\n      ', ['{', '#CE9178'], '\\n        ', ['\"role\": \"developer\",', '#CE9178'], '\\n        ', ['\"content\": \"You are a helpful assistant.\"', '#CE9178'], '\\n      ', ['},', '#CE9178'], '\\n      ', ['{', '#CE9178'], '\\n        ', ['\"role\": \"user\",', '#CE9178'], '\\n        ', ['\"content\": \"Hello!\"', '#CE9178'], '\\n      ', ['}', '#CE9178'], '\\n    ', [']', '#CE9178'], '\\n  ', ['}\\'', '#CE9178'], '\\n'],\n                  value: 'curl https://api.openai.com/v1/chat/completions \\\\\\n  -H \"Content-Type: application/json\" \\\\\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\\\\n  -d \\'{\\n    \"model\": \"VAR_chat_model_id\",\\n    \"messages\": [\\n      {\\n        \"role\": \"developer\",\\n        \"content\": \"You are a helpful assistant.\"\\n      },\\n      {\\n        \"role\": \"user\",\\n        \"content\": \"Hello!\"\\n      }\\n    ]\\n  }\\'\\n'\n                },\n                language: 'bash',\n                title: 'curl'\n              }, {\n                code: 'from openai import OpenAI\\nclient = OpenAI()\\n\\ncompletion = client.chat.completions.create(\\n  model=\"VAR_chat_model_id\",\\n  messages=[\\n    {\"role\": \"developer\", \"content\": \"You are a helpful assistant.\"},\\n    {\"role\": \"user\", \"content\": \"Hello!\"}\\n  ]\\n)\\n\\nprint(completion.choices[0].message)\\n',\n                highlighted: {\n                  annotations: [],\n                  code: 'from openai import OpenAI\\nclient = OpenAI()\\n\\ncompletion = client.chat.completions.create(\\n  model=\"VAR_chat_model_id\",\\n  messages=[\\n    {\"role\": \"developer\", \"content\": \"You are a helpful assistant.\"},\\n    {\"role\": \"user\", \"content\": \"Hello!\"}\\n  ]\\n)\\n\\nprint(completion.choices[0].message)\\n',\n                  lang: 'python',\n                  meta: 'python',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['from', '#C586C0'], ' ', ['openai', '#D4D4D4'], ' ', ['import', '#C586C0'], ' ', ['OpenAI', '#D4D4D4'], '\\n', ['client = OpenAI()', '#D4D4D4'], '\\n\\n', ['completion = client.chat.completions.create(', '#D4D4D4'], '\\n  ', ['model', '#9CDCFE'], ['=', '#D4D4D4'], ['\"VAR_chat_model_id\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['messages', '#9CDCFE'], ['=[', '#D4D4D4'], '\\n    ', ['{', '#D4D4D4'], ['\"role\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"developer\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['\"content\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"You are a helpful assistant.\"', '#CE9178'], ['},', '#D4D4D4'], '\\n    ', ['{', '#D4D4D4'], ['\"role\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"user\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['\"content\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"Hello!\"', '#CE9178'], ['}', '#D4D4D4'], '\\n  ', [']', '#D4D4D4'], '\\n', [')', '#D4D4D4'], '\\n\\n', ['print', '#DCDCAA'], ['(completion.choices[', '#D4D4D4'], ['0', '#B5CEA8'], ['].message)', '#D4D4D4'], '\\n'],\n                  value: 'from openai import OpenAI\\nclient = OpenAI()\\n\\ncompletion = client.chat.completions.create(\\n  model=\"VAR_chat_model_id\",\\n  messages=[\\n    {\"role\": \"developer\", \"content\": \"You are a helpful assistant.\"},\\n    {\"role\": \"user\", \"content\": \"Hello!\"}\\n  ]\\n)\\n\\nprint(completion.choices[0].message)\\n'\n                },\n                language: 'python',\n                title: 'python'\n              }, {\n                code: 'import OpenAI from \"openai\";\\n\\nconst openai = new OpenAI();\\n\\nasync function main() {\\n  const completion = await openai.chat.completions.create({\\n    messages: [{ role: \"developer\", content: \"You are a helpful assistant.\" }],\\n    model: \"VAR_chat_model_id\",\\n    store: true,\\n  });\\n\\n  console.log(completion.choices[0]);\\n}\\n\\nmain();\\n',\n                highlighted: {\n                  annotations: [],\n                  code: 'import OpenAI from \"openai\";\\n\\nconst openai = new OpenAI();\\n\\nasync function main() {\\n  const completion = await openai.chat.completions.create({\\n    messages: [{ role: \"developer\", content: \"You are a helpful assistant.\" }],\\n    model: \"VAR_chat_model_id\",\\n    store: true,\\n  });\\n\\n  console.log(completion.choices[0]);\\n}\\n\\nmain();\\n',\n                  lang: 'javascript',\n                  meta: 'node.js',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['import', '#C586C0'], ' ', ['OpenAI', '#9CDCFE'], ' ', ['from', '#C586C0'], ' ', ['\"openai\"', '#CE9178'], [';', '#D4D4D4'], '\\n\\n', ['const', '#569CD6'], ' ', ['openai', '#4FC1FF'], ' ', ['=', '#D4D4D4'], ' ', ['new', '#569CD6'], ' ', ['OpenAI', '#DCDCAA'], ['();', '#D4D4D4'], '\\n\\n', ['async function', '#569CD6'], ' ', ['main', '#DCDCAA'], ['() {', '#D4D4D4'], '\\n  ', ['const', '#569CD6'], ' ', ['completion', '#4FC1FF'], ' ', ['=', '#D4D4D4'], ' ', ['await', '#C586C0'], ' ', ['openai', '#9CDCFE'], ['.', '#D4D4D4'], ['chat', '#9CDCFE'], ['.', '#D4D4D4'], ['completions', '#9CDCFE'], ['.', '#D4D4D4'], ['create', '#DCDCAA'], ['({', '#D4D4D4'], '\\n    ', ['messages:', '#9CDCFE'], ' ', ['[{', '#D4D4D4'], ' ', ['role:', '#9CDCFE'], ' ', ['\"developer\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['content:', '#9CDCFE'], ' ', ['\"You are a helpful assistant.\"', '#CE9178'], ' ', ['}],', '#D4D4D4'], '\\n    ', ['model:', '#9CDCFE'], ' ', ['\"VAR_chat_model_id\"', '#CE9178'], [',', '#D4D4D4'], '\\n    ', ['store:', '#9CDCFE'], ' ', ['true', '#569CD6'], [',', '#D4D4D4'], '\\n  ', ['});', '#D4D4D4'], '\\n\\n  ', ['console', '#9CDCFE'], ['.', '#D4D4D4'], ['log', '#DCDCAA'], ['(', '#D4D4D4'], ['completion', '#9CDCFE'], ['.', '#D4D4D4'], ['choices', '#9CDCFE'], ['[', '#D4D4D4'], ['0', '#B5CEA8'], [']);', '#D4D4D4'], '\\n', ['}', '#D4D4D4'], '\\n\\n', ['main', '#DCDCAA'], ['();', '#D4D4D4'], '\\n'],\n                  value: 'import OpenAI from \"openai\";\\n\\nconst openai = new OpenAI();\\n\\nasync function main() {\\n  const completion = await openai.chat.completions.create({\\n    messages: [{ role: \"developer\", content: \"You are a helpful assistant.\" }],\\n    model: \"VAR_chat_model_id\",\\n    store: true,\\n  });\\n\\n  console.log(completion.choices[0]);\\n}\\n\\nmain();\\n'\n                },\n                language: 'js',\n                title: 'node.js'\n              }, {\n                code: 'using System;\\nusing System.Collections.Generic;\\n\\nusing OpenAI.Chat;\\n\\nChatClient client = new(\\n    model: \"gpt-4.1\",\\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\\n);\\n\\nList<ChatMessage> messages =\\n[\\n    new SystemChatMessage(\"You are a helpful assistant.\"),\\n    new UserChatMessage(\"Hello!\")\\n];\\n\\nChatCompletion completion = client.CompleteChat(messages);\\n\\nConsole.WriteLine(completion.Content[0].Text);\\n',\n                highlighted: {\n                  annotations: [],\n                  code: 'using System;\\nusing System.Collections.Generic;\\n\\nusing OpenAI.Chat;\\n\\nChatClient client = new(\\n    model: \"gpt-4.1\",\\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\\n);\\n\\nList<ChatMessage> messages =\\n[\\n    new SystemChatMessage(\"You are a helpful assistant.\"),\\n    new UserChatMessage(\"Hello!\")\\n];\\n\\nChatCompletion completion = client.CompleteChat(messages);\\n\\nConsole.WriteLine(completion.Content[0].Text);\\n',\n                  lang: 'csharp',\n                  meta: 'csharp',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['using', '#569CD6'], ' ', ['System', '#4EC9B0'], [';', '#D4D4D4'], '\\n', ['using', '#569CD6'], ' ', ['System', '#4EC9B0'], ['.', '#D4D4D4'], ['Collections', '#4EC9B0'], ['.', '#D4D4D4'], ['Generic', '#4EC9B0'], [';', '#D4D4D4'], '\\n\\n', ['using', '#569CD6'], ' ', ['OpenAI', '#4EC9B0'], ['.', '#D4D4D4'], ['Chat', '#4EC9B0'], [';', '#D4D4D4'], '\\n\\n', ['ChatClient', '#4EC9B0'], ' ', ['client', '#9CDCFE'], ' ', ['=', '#D4D4D4'], ' ', ['new', '#569CD6'], ['(', '#D4D4D4'], '\\n    ', ['model', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"gpt-4.1\"', '#CE9178'], [',', '#D4D4D4'], '\\n    ', ['apiKey', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['Environment', '#9CDCFE'], ['.', '#D4D4D4'], ['GetEnvironmentVariable', '#DCDCAA'], ['(', '#D4D4D4'], ['\"OPENAI_API_KEY\"', '#CE9178'], [')', '#D4D4D4'], '\\n', [');', '#D4D4D4'], '\\n\\n', ['List', '#4EC9B0'], ['<', '#D4D4D4'], ['ChatMessage', '#4EC9B0'], ['>', '#D4D4D4'], ' ', ['messages', '#9CDCFE'], ' ', ['=', '#D4D4D4'], '\\n', ['[', '#D4D4D4'], '\\n    ', ['new', '#569CD6'], ' ', ['SystemChatMessage', '#4EC9B0'], ['(', '#D4D4D4'], ['\"You are a helpful assistant.\"', '#CE9178'], ['),', '#D4D4D4'], '\\n    ', ['new', '#569CD6'], ' ', ['UserChatMessage', '#4EC9B0'], ['(', '#D4D4D4'], ['\"Hello!\"', '#CE9178'], [')', '#D4D4D4'], '\\n', ['];', '#D4D4D4'], '\\n\\n', ['ChatCompletion', '#4EC9B0'], ' ', ['completion', '#9CDCFE'], ' ', ['=', '#D4D4D4'], ' ', ['client', '#9CDCFE'], ['.', '#D4D4D4'], ['CompleteChat', '#DCDCAA'], ['(', '#D4D4D4'], ['messages', '#9CDCFE'], [');', '#D4D4D4'], '\\n\\n', ['Console', '#9CDCFE'], ['.', '#D4D4D4'], ['WriteLine', '#DCDCAA'], ['(', '#D4D4D4'], ['completion', '#9CDCFE'], ['.', '#D4D4D4'], ['Content', '#9CDCFE'], ['[', '#D4D4D4'], ['0', '#B5CEA8'], ['].', '#D4D4D4'], ['Text', '#9CDCFE'], [');', '#D4D4D4'], '\\n'],\n                  value: 'using System;\\nusing System.Collections.Generic;\\n\\nusing OpenAI.Chat;\\n\\nChatClient client = new(\\n    model: \"gpt-4.1\",\\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\\n);\\n\\nList<ChatMessage> messages =\\n[\\n    new SystemChatMessage(\"You are a helpful assistant.\"),\\n    new UserChatMessage(\"Hello!\")\\n];\\n\\nChatCompletion completion = client.CompleteChat(messages);\\n\\nConsole.WriteLine(completion.Content[0].Text);\\n'\n                },\n                language: 'csharp',\n                title: 'csharp'\n              }],\n              title: 'Default'\n            },\n            description: 'Default'\n          }, {\n            codeblock: {\n              tabs: [{\n                code: 'curl https://api.openai.com/v1/chat/completions \\\\\\n  -H \"Content-Type: application/json\" \\\\\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\\\\n  -d \\'{\\n    \"model\": \"gpt-4.1\",\\n    \"messages\": [\\n      {\\n        \"role\": \"user\",\\n        \"content\": [\\n          {\\n            \"type\": \"text\",\\n            \"text\": \"What is in this image?\"\\n          },\\n          {\\n            \"type\": \"image_url\",\\n            \"image_url\": {\\n              \"url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\"\\n            }\\n          }\\n        ]\\n      }\\n    ],\\n    \"max_tokens\": 300\\n  }\\'\\n',\n                highlighted: {\n                  annotations: [],\n                  code: 'curl https://api.openai.com/v1/chat/completions \\\\\\n  -H \"Content-Type: application/json\" \\\\\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\\\\n  -d \\'{\\n    \"model\": \"gpt-4.1\",\\n    \"messages\": [\\n      {\\n        \"role\": \"user\",\\n        \"content\": [\\n          {\\n            \"type\": \"text\",\\n            \"text\": \"What is in this image?\"\\n          },\\n          {\\n            \"type\": \"image_url\",\\n            \"image_url\": {\\n              \"url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\"\\n            }\\n          }\\n        ]\\n      }\\n    ],\\n    \"max_tokens\": 300\\n  }\\'\\n',\n                  lang: 'shellscript',\n                  meta: 'curl',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['curl', '#DCDCAA'], ' ', ['https://api.openai.com/v1/chat/completions', '#CE9178'], ' ', ['\\\\', '#D7BA7D'], '\\n  ', ['-H \"Content-Type: application/json\"', '#CE9178'], ' ', ['\\\\', '#D7BA7D'], '\\n  ', ['-H \"Authorization: Bearer', '#CE9178'], ' ', ['$OPENAI_API_KEY', '#9CDCFE'], ['\"', '#CE9178'], ' ', ['\\\\', '#D7BA7D'], '\\n  ', ['-d \\'{', '#CE9178'], '\\n    ', ['\"model\": \"gpt-4.1\",', '#CE9178'], '\\n    ', ['\"messages\": [', '#CE9178'], '\\n      ', ['{', '#CE9178'], '\\n        ', ['\"role\": \"user\",', '#CE9178'], '\\n        ', ['\"content\": [', '#CE9178'], '\\n          ', ['{', '#CE9178'], '\\n            ', ['\"type\": \"text\",', '#CE9178'], '\\n            ', ['\"text\": \"What is in this image?\"', '#CE9178'], '\\n          ', ['},', '#CE9178'], '\\n          ', ['{', '#CE9178'], '\\n            ', ['\"type\": \"image_url\",', '#CE9178'], '\\n            ', ['\"image_url\": {', '#CE9178'], '\\n              ', ['\"url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\"', '#CE9178'], '\\n            ', ['}', '#CE9178'], '\\n          ', ['}', '#CE9178'], '\\n        ', [']', '#CE9178'], '\\n      ', ['}', '#CE9178'], '\\n    ', ['],', '#CE9178'], '\\n    ', ['\"max_tokens\": 300', '#CE9178'], '\\n  ', ['}\\'', '#CE9178'], '\\n'],\n                  value: 'curl https://api.openai.com/v1/chat/completions \\\\\\n  -H \"Content-Type: application/json\" \\\\\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\\\\n  -d \\'{\\n    \"model\": \"gpt-4.1\",\\n    \"messages\": [\\n      {\\n        \"role\": \"user\",\\n        \"content\": [\\n          {\\n            \"type\": \"text\",\\n            \"text\": \"What is in this image?\"\\n          },\\n          {\\n            \"type\": \"image_url\",\\n            \"image_url\": {\\n              \"url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\"\\n            }\\n          }\\n        ]\\n      }\\n    ],\\n    \"max_tokens\": 300\\n  }\\'\\n'\n                },\n                language: 'bash',\n                title: 'curl'\n              }, {\n                code: 'from openai import OpenAI\\n\\nclient = OpenAI()\\n\\nresponse = client.chat.completions.create(\\n    model=\"gpt-4.1\",\\n    messages=[\\n        {\\n            \"role\": \"user\",\\n            \"content\": [\\n                {\"type\": \"text\", \"text\": \"What\\'s in this image?\"},\\n                {\\n                    \"type\": \"image_url\",\\n                    \"image_url\": {\\n                        \"url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\",\\n                    }\\n                },\\n            ],\\n        }\\n    ],\\n    max_tokens=300,\\n)\\n\\nprint(response.choices[0])\\n',\n                highlighted: {\n                  annotations: [],\n                  code: 'from openai import OpenAI\\n\\nclient = OpenAI()\\n\\nresponse = client.chat.completions.create(\\n    model=\"gpt-4.1\",\\n    messages=[\\n        {\\n            \"role\": \"user\",\\n            \"content\": [\\n                {\"type\": \"text\", \"text\": \"What\\'s in this image?\"},\\n                {\\n                    \"type\": \"image_url\",\\n                    \"image_url\": {\\n                        \"url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\",\\n                    }\\n                },\\n            ],\\n        }\\n    ],\\n    max_tokens=300,\\n)\\n\\nprint(response.choices[0])\\n',\n                  lang: 'python',\n                  meta: 'python',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['from', '#C586C0'], ' ', ['openai', '#D4D4D4'], ' ', ['import', '#C586C0'], ' ', ['OpenAI', '#D4D4D4'], '\\n\\n', ['client = OpenAI()', '#D4D4D4'], '\\n\\n', ['response = client.chat.completions.create(', '#D4D4D4'], '\\n    ', ['model', '#9CDCFE'], ['=', '#D4D4D4'], ['\"gpt-4.1\"', '#CE9178'], [',', '#D4D4D4'], '\\n    ', ['messages', '#9CDCFE'], ['=[', '#D4D4D4'], '\\n        ', ['{', '#D4D4D4'], '\\n            ', ['\"role\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"user\"', '#CE9178'], [',', '#D4D4D4'], '\\n            ', ['\"content\"', '#CE9178'], [': [', '#D4D4D4'], '\\n                ', ['{', '#D4D4D4'], ['\"type\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"text\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['\"text\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"What\\'s in this image?\"', '#CE9178'], ['},', '#D4D4D4'], '\\n                ', ['{', '#D4D4D4'], '\\n                    ', ['\"type\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"image_url\"', '#CE9178'], [',', '#D4D4D4'], '\\n                    ', ['\"image_url\"', '#CE9178'], [': {', '#D4D4D4'], '\\n                        ', ['\"url\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\"', '#CE9178'], [',', '#D4D4D4'], '\\n                    ', ['}', '#D4D4D4'], '\\n                ', ['},', '#D4D4D4'], '\\n            ', ['],', '#D4D4D4'], '\\n        ', ['}', '#D4D4D4'], '\\n    ', ['],', '#D4D4D4'], '\\n    ', ['max_tokens', '#9CDCFE'], ['=', '#D4D4D4'], ['300', '#B5CEA8'], [',', '#D4D4D4'], '\\n', [')', '#D4D4D4'], '\\n\\n', ['print', '#DCDCAA'], ['(response.choices[', '#D4D4D4'], ['0', '#B5CEA8'], ['])', '#D4D4D4'], '\\n'],\n                  value: 'from openai import OpenAI\\n\\nclient = OpenAI()\\n\\nresponse = client.chat.completions.create(\\n    model=\"gpt-4.1\",\\n    messages=[\\n        {\\n            \"role\": \"user\",\\n            \"content\": [\\n                {\"type\": \"text\", \"text\": \"What\\'s in this image?\"},\\n                {\\n                    \"type\": \"image_url\",\\n                    \"image_url\": {\\n                        \"url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\",\\n                    }\\n                },\\n            ],\\n        }\\n    ],\\n    max_tokens=300,\\n)\\n\\nprint(response.choices[0])\\n'\n                },\n                language: 'python',\n                title: 'python'\n              }, {\n                code: 'import OpenAI from \"openai\";\\n\\nconst openai = new OpenAI();\\n\\nasync function main() {\\n  const response = await openai.chat.completions.create({\\n    model: \"gpt-4.1\",\\n    messages: [\\n      {\\n        role: \"user\",\\n        content: [\\n          { type: \"text\", text: \"What\\'s in this image?\" },\\n          {\\n            type: \"image_url\",\\n            image_url: {\\n              \"url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\",\\n            },\\n          }\\n        ],\\n      },\\n    ],\\n  });\\n  console.log(response.choices[0]);\\n}\\nmain();\\n',\n                highlighted: {\n                  annotations: [],\n                  code: 'import OpenAI from \"openai\";\\n\\nconst openai = new OpenAI();\\n\\nasync function main() {\\n  const response = await openai.chat.completions.create({\\n    model: \"gpt-4.1\",\\n    messages: [\\n      {\\n        role: \"user\",\\n        content: [\\n          { type: \"text\", text: \"What\\'s in this image?\" },\\n          {\\n            type: \"image_url\",\\n            image_url: {\\n              \"url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\",\\n            },\\n          }\\n        ],\\n      },\\n    ],\\n  });\\n  console.log(response.choices[0]);\\n}\\nmain();\\n',\n                  lang: 'javascript',\n                  meta: 'node.js',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['import', '#C586C0'], ' ', ['OpenAI', '#9CDCFE'], ' ', ['from', '#C586C0'], ' ', ['\"openai\"', '#CE9178'], [';', '#D4D4D4'], '\\n\\n', ['const', '#569CD6'], ' ', ['openai', '#4FC1FF'], ' ', ['=', '#D4D4D4'], ' ', ['new', '#569CD6'], ' ', ['OpenAI', '#DCDCAA'], ['();', '#D4D4D4'], '\\n\\n', ['async function', '#569CD6'], ' ', ['main', '#DCDCAA'], ['() {', '#D4D4D4'], '\\n  ', ['const', '#569CD6'], ' ', ['response', '#4FC1FF'], ' ', ['=', '#D4D4D4'], ' ', ['await', '#C586C0'], ' ', ['openai', '#9CDCFE'], ['.', '#D4D4D4'], ['chat', '#9CDCFE'], ['.', '#D4D4D4'], ['completions', '#9CDCFE'], ['.', '#D4D4D4'], ['create', '#DCDCAA'], ['({', '#D4D4D4'], '\\n    ', ['model:', '#9CDCFE'], ' ', ['\"gpt-4.1\"', '#CE9178'], [',', '#D4D4D4'], '\\n    ', ['messages:', '#9CDCFE'], ' ', ['[', '#D4D4D4'], '\\n      ', ['{', '#D4D4D4'], '\\n        ', ['role:', '#9CDCFE'], ' ', ['\"user\"', '#CE9178'], [',', '#D4D4D4'], '\\n        ', ['content:', '#9CDCFE'], ' ', ['[', '#D4D4D4'], '\\n          ', ['{', '#D4D4D4'], ' ', ['type:', '#9CDCFE'], ' ', ['\"text\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['text:', '#9CDCFE'], ' ', ['\"What\\'s in this image?\"', '#CE9178'], ' ', ['},', '#D4D4D4'], '\\n          ', ['{', '#D4D4D4'], '\\n            ', ['type:', '#9CDCFE'], ' ', ['\"image_url\"', '#CE9178'], [',', '#D4D4D4'], '\\n            ', ['image_url:', '#9CDCFE'], ' ', ['{', '#D4D4D4'], '\\n              ', ['\"url\"', '#CE9178'], [':', '#9CDCFE'], ' ', ['\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\"', '#CE9178'], [',', '#D4D4D4'], '\\n            ', ['},', '#D4D4D4'], '\\n          ', ['}', '#D4D4D4'], '\\n        ', ['],', '#D4D4D4'], '\\n      ', ['},', '#D4D4D4'], '\\n    ', ['],', '#D4D4D4'], '\\n  ', ['});', '#D4D4D4'], '\\n  ', ['console', '#9CDCFE'], ['.', '#D4D4D4'], ['log', '#DCDCAA'], ['(', '#D4D4D4'], ['response', '#9CDCFE'], ['.', '#D4D4D4'], ['choices', '#9CDCFE'], ['[', '#D4D4D4'], ['0', '#B5CEA8'], [']);', '#D4D4D4'], '\\n', ['}', '#D4D4D4'], '\\n', ['main', '#DCDCAA'], ['();', '#D4D4D4'], '\\n'],\n                  value: 'import OpenAI from \"openai\";\\n\\nconst openai = new OpenAI();\\n\\nasync function main() {\\n  const response = await openai.chat.completions.create({\\n    model: \"gpt-4.1\",\\n    messages: [\\n      {\\n        role: \"user\",\\n        content: [\\n          { type: \"text\", text: \"What\\'s in this image?\" },\\n          {\\n            type: \"image_url\",\\n            image_url: {\\n              \"url\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\",\\n            },\\n          }\\n        ],\\n      },\\n    ],\\n  });\\n  console.log(response.choices[0]);\\n}\\nmain();\\n'\n                },\n                language: 'js',\n                title: 'node.js'\n              }, {\n                code: 'using System;\\nusing System.Collections.Generic;\\n\\nusing OpenAI.Chat;\\n\\nChatClient client = new(\\n    model: \"gpt-4.1\",\\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\\n);\\n\\nList<ChatMessage> messages =\\n[\\n    new UserChatMessage(\\n    [\\n        ChatMessageContentPart.CreateTextPart(\"What\\'s in this image?\"),\\n        ChatMessageContentPart.CreateImagePart(new Uri(\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\"))\\n    ])\\n];\\n\\nChatCompletion completion = client.CompleteChat(messages);\\n\\nConsole.WriteLine(completion.Content[0].Text);\\n',\n                highlighted: {\n                  annotations: [],\n                  code: 'using System;\\nusing System.Collections.Generic;\\n\\nusing OpenAI.Chat;\\n\\nChatClient client = new(\\n    model: \"gpt-4.1\",\\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\\n);\\n\\nList<ChatMessage> messages =\\n[\\n    new UserChatMessage(\\n    [\\n        ChatMessageContentPart.CreateTextPart(\"What\\'s in this image?\"),\\n        ChatMessageContentPart.CreateImagePart(new Uri(\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\"))\\n    ])\\n];\\n\\nChatCompletion completion = client.CompleteChat(messages);\\n\\nConsole.WriteLine(completion.Content[0].Text);\\n',\n                  lang: 'csharp',\n                  meta: 'csharp',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['using', '#569CD6'], ' ', ['System', '#4EC9B0'], [';', '#D4D4D4'], '\\n', ['using', '#569CD6'], ' ', ['System', '#4EC9B0'], ['.', '#D4D4D4'], ['Collections', '#4EC9B0'], ['.', '#D4D4D4'], ['Generic', '#4EC9B0'], [';', '#D4D4D4'], '\\n\\n', ['using', '#569CD6'], ' ', ['OpenAI', '#4EC9B0'], ['.', '#D4D4D4'], ['Chat', '#4EC9B0'], [';', '#D4D4D4'], '\\n\\n', ['ChatClient', '#4EC9B0'], ' ', ['client', '#9CDCFE'], ' ', ['=', '#D4D4D4'], ' ', ['new', '#569CD6'], ['(', '#D4D4D4'], '\\n    ', ['model', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"gpt-4.1\"', '#CE9178'], [',', '#D4D4D4'], '\\n    ', ['apiKey', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['Environment', '#9CDCFE'], ['.', '#D4D4D4'], ['GetEnvironmentVariable', '#DCDCAA'], ['(', '#D4D4D4'], ['\"OPENAI_API_KEY\"', '#CE9178'], [')', '#D4D4D4'], '\\n', [');', '#D4D4D4'], '\\n\\n', ['List', '#4EC9B0'], ['<', '#D4D4D4'], ['ChatMessage', '#4EC9B0'], ['>', '#D4D4D4'], ' ', ['messages', '#9CDCFE'], ' ', ['=', '#D4D4D4'], '\\n', ['[', '#D4D4D4'], '\\n    ', ['new', '#569CD6'], ' ', ['UserChatMessage', '#4EC9B0'], ['(', '#D4D4D4'], '\\n    ', ['[', '#D4D4D4'], '\\n        ', ['ChatMessageContentPart', '#9CDCFE'], ['.', '#D4D4D4'], ['CreateTextPart', '#DCDCAA'], ['(', '#D4D4D4'], ['\"What\\'s in this image?\"', '#CE9178'], ['),', '#D4D4D4'], '\\n        ', ['ChatMessageContentPart', '#9CDCFE'], ['.', '#D4D4D4'], ['CreateImagePart', '#DCDCAA'], ['(', '#D4D4D4'], ['new', '#569CD6'], ' ', ['Uri', '#4EC9B0'], ['(', '#D4D4D4'], ['\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\"', '#CE9178'], ['))', '#D4D4D4'], '\\n    ', ['])', '#D4D4D4'], '\\n', ['];', '#D4D4D4'], '\\n\\n', ['ChatCompletion', '#4EC9B0'], ' ', ['completion', '#9CDCFE'], ' ', ['=', '#D4D4D4'], ' ', ['client', '#9CDCFE'], ['.', '#D4D4D4'], ['CompleteChat', '#DCDCAA'], ['(', '#D4D4D4'], ['messages', '#9CDCFE'], [');', '#D4D4D4'], '\\n\\n', ['Console', '#9CDCFE'], ['.', '#D4D4D4'], ['WriteLine', '#DCDCAA'], ['(', '#D4D4D4'], ['completion', '#9CDCFE'], ['.', '#D4D4D4'], ['Content', '#9CDCFE'], ['[', '#D4D4D4'], ['0', '#B5CEA8'], ['].', '#D4D4D4'], ['Text', '#9CDCFE'], [');', '#D4D4D4'], '\\n'],\n                  value: 'using System;\\nusing System.Collections.Generic;\\n\\nusing OpenAI.Chat;\\n\\nChatClient client = new(\\n    model: \"gpt-4.1\",\\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\\n);\\n\\nList<ChatMessage> messages =\\n[\\n    new UserChatMessage(\\n    [\\n        ChatMessageContentPart.CreateTextPart(\"What\\'s in this image?\"),\\n        ChatMessageContentPart.CreateImagePart(new Uri(\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/dd/Gfp-wisconsin-madison-the-nature-boardwalk.jpg/2560px-Gfp-wisconsin-madison-the-nature-boardwalk.jpg\"))\\n    ])\\n];\\n\\nChatCompletion completion = client.CompleteChat(messages);\\n\\nConsole.WriteLine(completion.Content[0].Text);\\n'\n                },\n                language: 'csharp',\n                title: 'csharp'\n              }],\n              title: 'Image input'\n            },\n            description: 'Image input'\n          }, {\n            codeblock: {\n              tabs: [{\n                code: 'curl https://api.openai.com/v1/chat/completions \\\\\\n  -H \"Content-Type: application/json\" \\\\\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\\\\n  -d \\'{\\n    \"model\": \"VAR_chat_model_id\",\\n    \"messages\": [\\n      {\\n        \"role\": \"developer\",\\n        \"content\": \"You are a helpful assistant.\"\\n      },\\n      {\\n        \"role\": \"user\",\\n        \"content\": \"Hello!\"\\n      }\\n    ],\\n    \"stream\": true\\n  }\\'\\n',\n                highlighted: {\n                  annotations: [],\n                  code: 'curl https://api.openai.com/v1/chat/completions \\\\\\n  -H \"Content-Type: application/json\" \\\\\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\\\\n  -d \\'{\\n    \"model\": \"VAR_chat_model_id\",\\n    \"messages\": [\\n      {\\n        \"role\": \"developer\",\\n        \"content\": \"You are a helpful assistant.\"\\n      },\\n      {\\n        \"role\": \"user\",\\n        \"content\": \"Hello!\"\\n      }\\n    ],\\n    \"stream\": true\\n  }\\'\\n',\n                  lang: 'shellscript',\n                  meta: 'curl',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['curl', '#DCDCAA'], ' ', ['https://api.openai.com/v1/chat/completions', '#CE9178'], ' ', ['\\\\', '#D7BA7D'], '\\n  ', ['-H \"Content-Type: application/json\"', '#CE9178'], ' ', ['\\\\', '#D7BA7D'], '\\n  ', ['-H \"Authorization: Bearer', '#CE9178'], ' ', ['$OPENAI_API_KEY', '#9CDCFE'], ['\"', '#CE9178'], ' ', ['\\\\', '#D7BA7D'], '\\n  ', ['-d \\'{', '#CE9178'], '\\n    ', ['\"model\": \"VAR_chat_model_id\",', '#CE9178'], '\\n    ', ['\"messages\": [', '#CE9178'], '\\n      ', ['{', '#CE9178'], '\\n        ', ['\"role\": \"developer\",', '#CE9178'], '\\n        ', ['\"content\": \"You are a helpful assistant.\"', '#CE9178'], '\\n      ', ['},', '#CE9178'], '\\n      ', ['{', '#CE9178'], '\\n        ', ['\"role\": \"user\",', '#CE9178'], '\\n        ', ['\"content\": \"Hello!\"', '#CE9178'], '\\n      ', ['}', '#CE9178'], '\\n    ', ['],', '#CE9178'], '\\n    ', ['\"stream\": true', '#CE9178'], '\\n  ', ['}\\'', '#CE9178'], '\\n'],\n                  value: 'curl https://api.openai.com/v1/chat/completions \\\\\\n  -H \"Content-Type: application/json\" \\\\\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\\\\n  -d \\'{\\n    \"model\": \"VAR_chat_model_id\",\\n    \"messages\": [\\n      {\\n        \"role\": \"developer\",\\n        \"content\": \"You are a helpful assistant.\"\\n      },\\n      {\\n        \"role\": \"user\",\\n        \"content\": \"Hello!\"\\n      }\\n    ],\\n    \"stream\": true\\n  }\\'\\n'\n                },\n                language: 'bash',\n                title: 'curl'\n              }, {\n                code: 'from openai import OpenAI\\nclient = OpenAI()\\n\\ncompletion = client.chat.completions.create(\\n  model=\"VAR_chat_model_id\",\\n  messages=[\\n    {\"role\": \"developer\", \"content\": \"You are a helpful assistant.\"},\\n    {\"role\": \"user\", \"content\": \"Hello!\"}\\n  ],\\n  stream=True\\n)\\n\\nfor chunk in completion:\\n  print(chunk.choices[0].delta)\\n',\n                highlighted: {\n                  annotations: [],\n                  code: 'from openai import OpenAI\\nclient = OpenAI()\\n\\ncompletion = client.chat.completions.create(\\n  model=\"VAR_chat_model_id\",\\n  messages=[\\n    {\"role\": \"developer\", \"content\": \"You are a helpful assistant.\"},\\n    {\"role\": \"user\", \"content\": \"Hello!\"}\\n  ],\\n  stream=True\\n)\\n\\nfor chunk in completion:\\n  print(chunk.choices[0].delta)\\n',\n                  lang: 'python',\n                  meta: 'python',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['from', '#C586C0'], ' ', ['openai', '#D4D4D4'], ' ', ['import', '#C586C0'], ' ', ['OpenAI', '#D4D4D4'], '\\n', ['client = OpenAI()', '#D4D4D4'], '\\n\\n', ['completion = client.chat.completions.create(', '#D4D4D4'], '\\n  ', ['model', '#9CDCFE'], ['=', '#D4D4D4'], ['\"VAR_chat_model_id\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['messages', '#9CDCFE'], ['=[', '#D4D4D4'], '\\n    ', ['{', '#D4D4D4'], ['\"role\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"developer\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['\"content\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"You are a helpful assistant.\"', '#CE9178'], ['},', '#D4D4D4'], '\\n    ', ['{', '#D4D4D4'], ['\"role\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"user\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['\"content\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"Hello!\"', '#CE9178'], ['}', '#D4D4D4'], '\\n  ', ['],', '#D4D4D4'], '\\n  ', ['stream', '#9CDCFE'], ['=', '#D4D4D4'], ['True', '#569CD6'], '\\n', [')', '#D4D4D4'], '\\n\\n', ['for', '#C586C0'], ' ', ['chunk', '#D4D4D4'], ' ', ['in', '#C586C0'], ' ', ['completion:', '#D4D4D4'], '\\n  ', ['print', '#DCDCAA'], ['(chunk.choices[', '#D4D4D4'], ['0', '#B5CEA8'], ['].delta)', '#D4D4D4'], '\\n'],\n                  value: 'from openai import OpenAI\\nclient = OpenAI()\\n\\ncompletion = client.chat.completions.create(\\n  model=\"VAR_chat_model_id\",\\n  messages=[\\n    {\"role\": \"developer\", \"content\": \"You are a helpful assistant.\"},\\n    {\"role\": \"user\", \"content\": \"Hello!\"}\\n  ],\\n  stream=True\\n)\\n\\nfor chunk in completion:\\n  print(chunk.choices[0].delta)\\n'\n                },\n                language: 'python',\n                title: 'python'\n              }, {\n                code: 'import OpenAI from \"openai\";\\n\\nconst openai = new OpenAI();\\n\\nasync function main() {\\n  const completion = await openai.chat.completions.create({\\n    model: \"VAR_chat_model_id\",\\n    messages: [\\n      {\"role\": \"developer\", \"content\": \"You are a helpful assistant.\"},\\n      {\"role\": \"user\", \"content\": \"Hello!\"}\\n    ],\\n    stream: true,\\n  });\\n\\n  for await (const chunk of completion) {\\n    console.log(chunk.choices[0].delta.content);\\n  }\\n}\\n\\nmain();\\n',\n                highlighted: {\n                  annotations: [],\n                  code: 'import OpenAI from \"openai\";\\n\\nconst openai = new OpenAI();\\n\\nasync function main() {\\n  const completion = await openai.chat.completions.create({\\n    model: \"VAR_chat_model_id\",\\n    messages: [\\n      {\"role\": \"developer\", \"content\": \"You are a helpful assistant.\"},\\n      {\"role\": \"user\", \"content\": \"Hello!\"}\\n    ],\\n    stream: true,\\n  });\\n\\n  for await (const chunk of completion) {\\n    console.log(chunk.choices[0].delta.content);\\n  }\\n}\\n\\nmain();\\n',\n                  lang: 'javascript',\n                  meta: 'node.js',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['import', '#C586C0'], ' ', ['OpenAI', '#9CDCFE'], ' ', ['from', '#C586C0'], ' ', ['\"openai\"', '#CE9178'], [';', '#D4D4D4'], '\\n\\n', ['const', '#569CD6'], ' ', ['openai', '#4FC1FF'], ' ', ['=', '#D4D4D4'], ' ', ['new', '#569CD6'], ' ', ['OpenAI', '#DCDCAA'], ['();', '#D4D4D4'], '\\n\\n', ['async function', '#569CD6'], ' ', ['main', '#DCDCAA'], ['() {', '#D4D4D4'], '\\n  ', ['const', '#569CD6'], ' ', ['completion', '#4FC1FF'], ' ', ['=', '#D4D4D4'], ' ', ['await', '#C586C0'], ' ', ['openai', '#9CDCFE'], ['.', '#D4D4D4'], ['chat', '#9CDCFE'], ['.', '#D4D4D4'], ['completions', '#9CDCFE'], ['.', '#D4D4D4'], ['create', '#DCDCAA'], ['({', '#D4D4D4'], '\\n    ', ['model:', '#9CDCFE'], ' ', ['\"VAR_chat_model_id\"', '#CE9178'], [',', '#D4D4D4'], '\\n    ', ['messages:', '#9CDCFE'], ' ', ['[', '#D4D4D4'], '\\n      ', ['{', '#D4D4D4'], ['\"role\"', '#CE9178'], [':', '#9CDCFE'], ' ', ['\"developer\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['\"content\"', '#CE9178'], [':', '#9CDCFE'], ' ', ['\"You are a helpful assistant.\"', '#CE9178'], ['},', '#D4D4D4'], '\\n      ', ['{', '#D4D4D4'], ['\"role\"', '#CE9178'], [':', '#9CDCFE'], ' ', ['\"user\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['\"content\"', '#CE9178'], [':', '#9CDCFE'], ' ', ['\"Hello!\"', '#CE9178'], ['}', '#D4D4D4'], '\\n    ', ['],', '#D4D4D4'], '\\n    ', ['stream:', '#9CDCFE'], ' ', ['true', '#569CD6'], [',', '#D4D4D4'], '\\n  ', ['});', '#D4D4D4'], '\\n\\n  ', ['for await', '#C586C0'], ' ', ['(', '#D4D4D4'], ['const', '#569CD6'], ' ', ['chunk', '#4FC1FF'], ' ', ['of', '#569CD6'], ' ', ['completion', '#9CDCFE'], [') {', '#D4D4D4'], '\\n    ', ['console', '#9CDCFE'], ['.', '#D4D4D4'], ['log', '#DCDCAA'], ['(', '#D4D4D4'], ['chunk', '#9CDCFE'], ['.', '#D4D4D4'], ['choices', '#9CDCFE'], ['[', '#D4D4D4'], ['0', '#B5CEA8'], ['].', '#D4D4D4'], ['delta', '#9CDCFE'], ['.', '#D4D4D4'], ['content', '#9CDCFE'], [');', '#D4D4D4'], '\\n  ', ['}', '#D4D4D4'], '\\n', ['}', '#D4D4D4'], '\\n\\n', ['main', '#DCDCAA'], ['();', '#D4D4D4'], '\\n'],\n                  value: 'import OpenAI from \"openai\";\\n\\nconst openai = new OpenAI();\\n\\nasync function main() {\\n  const completion = await openai.chat.completions.create({\\n    model: \"VAR_chat_model_id\",\\n    messages: [\\n      {\"role\": \"developer\", \"content\": \"You are a helpful assistant.\"},\\n      {\"role\": \"user\", \"content\": \"Hello!\"}\\n    ],\\n    stream: true,\\n  });\\n\\n  for await (const chunk of completion) {\\n    console.log(chunk.choices[0].delta.content);\\n  }\\n}\\n\\nmain();\\n'\n                },\n                language: 'js',\n                title: 'node.js'\n              }, {\n                code: 'using System;\\nusing System.ClientModel;\\nusing System.Collections.Generic;\\nusing System.Threading.Tasks;\\n\\nusing OpenAI.Chat;\\n\\nChatClient client = new(\\n    model: \"gpt-4.1\",\\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\\n);\\n\\nList<ChatMessage> messages =\\n[\\n    new SystemChatMessage(\"You are a helpful assistant.\"),\\n    new UserChatMessage(\"Hello!\")\\n];\\n\\nAsyncCollectionResult<StreamingChatCompletionUpdate> completionUpdates = client.CompleteChatStreamingAsync(messages);\\n\\nawait foreach (StreamingChatCompletionUpdate completionUpdate in completionUpdates)\\n{\\n    if (completionUpdate.ContentUpdate.Count > 0)\\n    {\\n        Console.Write(completionUpdate.ContentUpdate[0].Text);\\n    }\\n}\\n',\n                highlighted: {\n                  annotations: [],\n                  code: 'using System;\\nusing System.ClientModel;\\nusing System.Collections.Generic;\\nusing System.Threading.Tasks;\\n\\nusing OpenAI.Chat;\\n\\nChatClient client = new(\\n    model: \"gpt-4.1\",\\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\\n);\\n\\nList<ChatMessage> messages =\\n[\\n    new SystemChatMessage(\"You are a helpful assistant.\"),\\n    new UserChatMessage(\"Hello!\")\\n];\\n\\nAsyncCollectionResult<StreamingChatCompletionUpdate> completionUpdates = client.CompleteChatStreamingAsync(messages);\\n\\nawait foreach (StreamingChatCompletionUpdate completionUpdate in completionUpdates)\\n{\\n    if (completionUpdate.ContentUpdate.Count > 0)\\n    {\\n        Console.Write(completionUpdate.ContentUpdate[0].Text);\\n    }\\n}\\n',\n                  lang: 'csharp',\n                  meta: 'csharp',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['using', '#569CD6'], ' ', ['System', '#4EC9B0'], [';', '#D4D4D4'], '\\n', ['using', '#569CD6'], ' ', ['System', '#4EC9B0'], ['.', '#D4D4D4'], ['ClientModel', '#4EC9B0'], [';', '#D4D4D4'], '\\n', ['using', '#569CD6'], ' ', ['System', '#4EC9B0'], ['.', '#D4D4D4'], ['Collections', '#4EC9B0'], ['.', '#D4D4D4'], ['Generic', '#4EC9B0'], [';', '#D4D4D4'], '\\n', ['using', '#569CD6'], ' ', ['System', '#4EC9B0'], ['.', '#D4D4D4'], ['Threading', '#4EC9B0'], ['.', '#D4D4D4'], ['Tasks', '#4EC9B0'], [';', '#D4D4D4'], '\\n\\n', ['using', '#569CD6'], ' ', ['OpenAI', '#4EC9B0'], ['.', '#D4D4D4'], ['Chat', '#4EC9B0'], [';', '#D4D4D4'], '\\n\\n', ['ChatClient', '#4EC9B0'], ' ', ['client', '#9CDCFE'], ' ', ['=', '#D4D4D4'], ' ', ['new', '#569CD6'], ['(', '#D4D4D4'], '\\n    ', ['model', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"gpt-4.1\"', '#CE9178'], [',', '#D4D4D4'], '\\n    ', ['apiKey', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['Environment', '#9CDCFE'], ['.', '#D4D4D4'], ['GetEnvironmentVariable', '#DCDCAA'], ['(', '#D4D4D4'], ['\"OPENAI_API_KEY\"', '#CE9178'], [')', '#D4D4D4'], '\\n', [');', '#D4D4D4'], '\\n\\n', ['List', '#4EC9B0'], ['<', '#D4D4D4'], ['ChatMessage', '#4EC9B0'], ['>', '#D4D4D4'], ' ', ['messages', '#9CDCFE'], ' ', ['=', '#D4D4D4'], '\\n', ['[', '#D4D4D4'], '\\n    ', ['new', '#569CD6'], ' ', ['SystemChatMessage', '#4EC9B0'], ['(', '#D4D4D4'], ['\"You are a helpful assistant.\"', '#CE9178'], ['),', '#D4D4D4'], '\\n    ', ['new', '#569CD6'], ' ', ['UserChatMessage', '#4EC9B0'], ['(', '#D4D4D4'], ['\"Hello!\"', '#CE9178'], [')', '#D4D4D4'], '\\n', ['];', '#D4D4D4'], '\\n\\n', ['AsyncCollectionResult', '#4EC9B0'], ['<', '#D4D4D4'], ['StreamingChatCompletionUpdate', '#4EC9B0'], ['>', '#D4D4D4'], ' ', ['completionUpdates', '#9CDCFE'], ' ', ['=', '#D4D4D4'], ' ', ['client', '#9CDCFE'], ['.', '#D4D4D4'], ['CompleteChatStreamingAsync', '#DCDCAA'], ['(', '#D4D4D4'], ['messages', '#9CDCFE'], [');', '#D4D4D4'], '\\n\\n', ['await', '#569CD6'], ' ', ['foreach', '#C586C0'], ' ', ['(', '#D4D4D4'], ['StreamingChatCompletionUpdate', '#4EC9B0'], ' ', ['completionUpdate', '#9CDCFE'], ' ', ['in', '#C586C0'], ' ', ['completionUpdates', '#9CDCFE'], [')', '#D4D4D4'], '\\n', ['{', '#D4D4D4'], '\\n    ', ['if', '#DCDCAA'], ' ', ['(', '#D4D4D4'], ['completionUpdate', '#9CDCFE'], ['.', '#D4D4D4'], ['ContentUpdate', '#9CDCFE'], ['.', '#D4D4D4'], ['Count', '#9CDCFE'], ' ', ['>', '#D4D4D4'], ' ', ['0', '#B5CEA8'], [')', '#D4D4D4'], '\\n    ', ['{', '#D4D4D4'], '\\n        ', ['Console', '#9CDCFE'], ['.', '#D4D4D4'], ['Write', '#DCDCAA'], ['(', '#D4D4D4'], ['completionUpdate', '#9CDCFE'], ['.', '#D4D4D4'], ['ContentUpdate', '#9CDCFE'], ['[', '#D4D4D4'], ['0', '#B5CEA8'], ['].', '#D4D4D4'], ['Text', '#9CDCFE'], [');', '#D4D4D4'], '\\n    ', ['}', '#D4D4D4'], '\\n', ['}', '#D4D4D4'], '\\n'],\n                  value: 'using System;\\nusing System.ClientModel;\\nusing System.Collections.Generic;\\nusing System.Threading.Tasks;\\n\\nusing OpenAI.Chat;\\n\\nChatClient client = new(\\n    model: \"gpt-4.1\",\\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\\n);\\n\\nList<ChatMessage> messages =\\n[\\n    new SystemChatMessage(\"You are a helpful assistant.\"),\\n    new UserChatMessage(\"Hello!\")\\n];\\n\\nAsyncCollectionResult<StreamingChatCompletionUpdate> completionUpdates = client.CompleteChatStreamingAsync(messages);\\n\\nawait foreach (StreamingChatCompletionUpdate completionUpdate in completionUpdates)\\n{\\n    if (completionUpdate.ContentUpdate.Count > 0)\\n    {\\n        Console.Write(completionUpdate.ContentUpdate[0].Text);\\n    }\\n}\\n'\n                },\n                language: 'csharp',\n                title: 'csharp'\n              }],\n              title: 'Streaming'\n            },\n            description: 'Streaming'\n          }, {\n            codeblock: {\n              tabs: [{\n                code: 'curl https://api.openai.com/v1/chat/completions \\\\\\n-H \"Content-Type: application/json\" \\\\\\n-H \"Authorization: Bearer $OPENAI_API_KEY\" \\\\\\n-d \\'{\\n  \"model\": \"gpt-4.1\",\\n  \"messages\": [\\n    {\\n      \"role\": \"user\",\\n      \"content\": \"What is the weather like in Boston today?\"\\n    }\\n  ],\\n  \"tools\": [\\n    {\\n      \"type\": \"function\",\\n      \"function\": {\\n        \"name\": \"get_current_weather\",\\n        \"description\": \"Get the current weather in a given location\",\\n        \"parameters\": {\\n          \"type\": \"object\",\\n          \"properties\": {\\n            \"location\": {\\n              \"type\": \"string\",\\n              \"description\": \"The city and state, e.g. San Francisco, CA\"\\n            },\\n            \"unit\": {\\n              \"type\": \"string\",\\n              \"enum\": [\"celsius\", \"fahrenheit\"]\\n            }\\n          },\\n          \"required\": [\"location\"]\\n        }\\n      }\\n    }\\n  ],\\n  \"tool_choice\": \"auto\"\\n}\\'\\n',\n                highlighted: {\n                  annotations: [],\n                  code: 'curl https://api.openai.com/v1/chat/completions \\\\\\n-H \"Content-Type: application/json\" \\\\\\n-H \"Authorization: Bearer $OPENAI_API_KEY\" \\\\\\n-d \\'{\\n  \"model\": \"gpt-4.1\",\\n  \"messages\": [\\n    {\\n      \"role\": \"user\",\\n      \"content\": \"What is the weather like in Boston today?\"\\n    }\\n  ],\\n  \"tools\": [\\n    {\\n      \"type\": \"function\",\\n      \"function\": {\\n        \"name\": \"get_current_weather\",\\n        \"description\": \"Get the current weather in a given location\",\\n        \"parameters\": {\\n          \"type\": \"object\",\\n          \"properties\": {\\n            \"location\": {\\n              \"type\": \"string\",\\n              \"description\": \"The city and state, e.g. San Francisco, CA\"\\n            },\\n            \"unit\": {\\n              \"type\": \"string\",\\n              \"enum\": [\"celsius\", \"fahrenheit\"]\\n            }\\n          },\\n          \"required\": [\"location\"]\\n        }\\n      }\\n    }\\n  ],\\n  \"tool_choice\": \"auto\"\\n}\\'\\n',\n                  lang: 'shellscript',\n                  meta: 'curl',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['curl', '#DCDCAA'], ' ', ['https://api.openai.com/v1/chat/completions', '#CE9178'], ' ', ['\\\\', '#D7BA7D'], '\\n', ['-H', '#D4D4D4'], ' ', ['\"Content-Type: application/json\"', '#CE9178'], ' ', ['\\\\', '#D7BA7D'], '\\n', ['-H', '#D4D4D4'], ' ', ['\"Authorization: Bearer', '#CE9178'], ' ', ['$OPENAI_API_KEY', '#9CDCFE'], ['\"', '#CE9178'], ' ', ['\\\\', '#D7BA7D'], '\\n', ['-d', '#D4D4D4'], ' ', ['\\'{', '#CE9178'], '\\n  ', ['\"model\": \"gpt-4.1\",', '#CE9178'], '\\n  ', ['\"messages\": [', '#CE9178'], '\\n    ', ['{', '#CE9178'], '\\n      ', ['\"role\": \"user\",', '#CE9178'], '\\n      ', ['\"content\": \"What is the weather like in Boston today?\"', '#CE9178'], '\\n    ', ['}', '#CE9178'], '\\n  ', ['],', '#CE9178'], '\\n  ', ['\"tools\": [', '#CE9178'], '\\n    ', ['{', '#CE9178'], '\\n      ', ['\"type\": \"function\",', '#CE9178'], '\\n      ', ['\"function\": {', '#CE9178'], '\\n        ', ['\"name\": \"get_current_weather\",', '#CE9178'], '\\n        ', ['\"description\": \"Get the current weather in a given location\",', '#CE9178'], '\\n        ', ['\"parameters\": {', '#CE9178'], '\\n          ', ['\"type\": \"object\",', '#CE9178'], '\\n          ', ['\"properties\": {', '#CE9178'], '\\n            ', ['\"location\": {', '#CE9178'], '\\n              ', ['\"type\": \"string\",', '#CE9178'], '\\n              ', ['\"description\": \"The city and state, e.g. San Francisco, CA\"', '#CE9178'], '\\n            ', ['},', '#CE9178'], '\\n            ', ['\"unit\": {', '#CE9178'], '\\n              ', ['\"type\": \"string\",', '#CE9178'], '\\n              ', ['\"enum\": [\"celsius\", \"fahrenheit\"]', '#CE9178'], '\\n            ', ['}', '#CE9178'], '\\n          ', ['},', '#CE9178'], '\\n          ', ['\"required\": [\"location\"]', '#CE9178'], '\\n        ', ['}', '#CE9178'], '\\n      ', ['}', '#CE9178'], '\\n    ', ['}', '#CE9178'], '\\n  ', ['],', '#CE9178'], '\\n  ', ['\"tool_choice\": \"auto\"', '#CE9178'], '\\n', ['}\\'', '#CE9178'], '\\n'],\n                  value: 'curl https://api.openai.com/v1/chat/completions \\\\\\n-H \"Content-Type: application/json\" \\\\\\n-H \"Authorization: Bearer $OPENAI_API_KEY\" \\\\\\n-d \\'{\\n  \"model\": \"gpt-4.1\",\\n  \"messages\": [\\n    {\\n      \"role\": \"user\",\\n      \"content\": \"What is the weather like in Boston today?\"\\n    }\\n  ],\\n  \"tools\": [\\n    {\\n      \"type\": \"function\",\\n      \"function\": {\\n        \"name\": \"get_current_weather\",\\n        \"description\": \"Get the current weather in a given location\",\\n        \"parameters\": {\\n          \"type\": \"object\",\\n          \"properties\": {\\n            \"location\": {\\n              \"type\": \"string\",\\n              \"description\": \"The city and state, e.g. San Francisco, CA\"\\n            },\\n            \"unit\": {\\n              \"type\": \"string\",\\n              \"enum\": [\"celsius\", \"fahrenheit\"]\\n            }\\n          },\\n          \"required\": [\"location\"]\\n        }\\n      }\\n    }\\n  ],\\n  \"tool_choice\": \"auto\"\\n}\\'\\n'\n                },\n                language: 'bash',\n                title: 'curl'\n              }, {\n                code: 'from openai import OpenAI\\nclient = OpenAI()\\n\\ntools = [\\n  {\\n    \"type\": \"function\",\\n    \"function\": {\\n      \"name\": \"get_current_weather\",\\n      \"description\": \"Get the current weather in a given location\",\\n      \"parameters\": {\\n        \"type\": \"object\",\\n        \"properties\": {\\n          \"location\": {\\n            \"type\": \"string\",\\n            \"description\": \"The city and state, e.g. San Francisco, CA\",\\n          },\\n          \"unit\": {\"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"]},\\n        },\\n        \"required\": [\"location\"],\\n      },\\n    }\\n  }\\n]\\nmessages = [{\"role\": \"user\", \"content\": \"What\\'s the weather like in Boston today?\"}]\\ncompletion = client.chat.completions.create(\\n  model=\"VAR_chat_model_id\",\\n  messages=messages,\\n  tools=tools,\\n  tool_choice=\"auto\"\\n)\\n\\nprint(completion)\\n',\n                highlighted: {\n                  annotations: [],\n                  code: 'from openai import OpenAI\\nclient = OpenAI()\\n\\ntools = [\\n  {\\n    \"type\": \"function\",\\n    \"function\": {\\n      \"name\": \"get_current_weather\",\\n      \"description\": \"Get the current weather in a given location\",\\n      \"parameters\": {\\n        \"type\": \"object\",\\n        \"properties\": {\\n          \"location\": {\\n            \"type\": \"string\",\\n            \"description\": \"The city and state, e.g. San Francisco, CA\",\\n          },\\n          \"unit\": {\"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"]},\\n        },\\n        \"required\": [\"location\"],\\n      },\\n    }\\n  }\\n]\\nmessages = [{\"role\": \"user\", \"content\": \"What\\'s the weather like in Boston today?\"}]\\ncompletion = client.chat.completions.create(\\n  model=\"VAR_chat_model_id\",\\n  messages=messages,\\n  tools=tools,\\n  tool_choice=\"auto\"\\n)\\n\\nprint(completion)\\n',\n                  lang: 'python',\n                  meta: 'python',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['from', '#C586C0'], ' ', ['openai', '#D4D4D4'], ' ', ['import', '#C586C0'], ' ', ['OpenAI', '#D4D4D4'], '\\n', ['client = OpenAI()', '#D4D4D4'], '\\n\\n', ['tools = [', '#D4D4D4'], '\\n  ', ['{', '#D4D4D4'], '\\n    ', ['\"type\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"function\"', '#CE9178'], [',', '#D4D4D4'], '\\n    ', ['\"function\"', '#CE9178'], [': {', '#D4D4D4'], '\\n      ', ['\"name\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"get_current_weather\"', '#CE9178'], [',', '#D4D4D4'], '\\n      ', ['\"description\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"Get the current weather in a given location\"', '#CE9178'], [',', '#D4D4D4'], '\\n      ', ['\"parameters\"', '#CE9178'], [': {', '#D4D4D4'], '\\n        ', ['\"type\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"object\"', '#CE9178'], [',', '#D4D4D4'], '\\n        ', ['\"properties\"', '#CE9178'], [': {', '#D4D4D4'], '\\n          ', ['\"location\"', '#CE9178'], [': {', '#D4D4D4'], '\\n            ', ['\"type\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"string\"', '#CE9178'], [',', '#D4D4D4'], '\\n            ', ['\"description\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"The city and state, e.g. San Francisco, CA\"', '#CE9178'], [',', '#D4D4D4'], '\\n          ', ['},', '#D4D4D4'], '\\n          ', ['\"unit\"', '#CE9178'], [': {', '#D4D4D4'], ['\"type\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"string\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['\"enum\"', '#CE9178'], [': [', '#D4D4D4'], ['\"celsius\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['\"fahrenheit\"', '#CE9178'], [']},', '#D4D4D4'], '\\n        ', ['},', '#D4D4D4'], '\\n        ', ['\"required\"', '#CE9178'], [': [', '#D4D4D4'], ['\"location\"', '#CE9178'], ['],', '#D4D4D4'], '\\n      ', ['},', '#D4D4D4'], '\\n    ', ['}', '#D4D4D4'], '\\n  ', ['}', '#D4D4D4'], '\\n', [']', '#D4D4D4'], '\\n', ['messages = [{', '#D4D4D4'], ['\"role\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"user\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['\"content\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"What\\'s the weather like in Boston today?\"', '#CE9178'], ['}]', '#D4D4D4'], '\\n', ['completion = client.chat.completions.create(', '#D4D4D4'], '\\n  ', ['model', '#9CDCFE'], ['=', '#D4D4D4'], ['\"VAR_chat_model_id\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['messages', '#9CDCFE'], ['=messages,', '#D4D4D4'], '\\n  ', ['tools', '#9CDCFE'], ['=tools,', '#D4D4D4'], '\\n  ', ['tool_choice', '#9CDCFE'], ['=', '#D4D4D4'], ['\"auto\"', '#CE9178'], '\\n', [')', '#D4D4D4'], '\\n\\n', ['print', '#DCDCAA'], ['(completion)', '#D4D4D4'], '\\n'],\n                  value: 'from openai import OpenAI\\nclient = OpenAI()\\n\\ntools = [\\n  {\\n    \"type\": \"function\",\\n    \"function\": {\\n      \"name\": \"get_current_weather\",\\n      \"description\": \"Get the current weather in a given location\",\\n      \"parameters\": {\\n        \"type\": \"object\",\\n        \"properties\": {\\n          \"location\": {\\n            \"type\": \"string\",\\n            \"description\": \"The city and state, e.g. San Francisco, CA\",\\n          },\\n          \"unit\": {\"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"]},\\n        },\\n        \"required\": [\"location\"],\\n      },\\n    }\\n  }\\n]\\nmessages = [{\"role\": \"user\", \"content\": \"What\\'s the weather like in Boston today?\"}]\\ncompletion = client.chat.completions.create(\\n  model=\"VAR_chat_model_id\",\\n  messages=messages,\\n  tools=tools,\\n  tool_choice=\"auto\"\\n)\\n\\nprint(completion)\\n'\n                },\n                language: 'python',\n                title: 'python'\n              }, {\n                code: 'import OpenAI from \"openai\";\\n\\nconst openai = new OpenAI();\\n\\nasync function main() {\\n  const messages = [{\"role\": \"user\", \"content\": \"What\\'s the weather like in Boston today?\"}];\\n  const tools = [\\n      {\\n        \"type\": \"function\",\\n        \"function\": {\\n          \"name\": \"get_current_weather\",\\n          \"description\": \"Get the current weather in a given location\",\\n          \"parameters\": {\\n            \"type\": \"object\",\\n            \"properties\": {\\n              \"location\": {\\n                \"type\": \"string\",\\n                \"description\": \"The city and state, e.g. San Francisco, CA\",\\n              },\\n              \"unit\": {\"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"]},\\n            },\\n            \"required\": [\"location\"],\\n          },\\n        }\\n      }\\n  ];\\n\\n  const response = await openai.chat.completions.create({\\n    model: \"gpt-4.1\",\\n    messages: messages,\\n    tools: tools,\\n    tool_choice: \"auto\",\\n  });\\n\\n  console.log(response);\\n}\\n\\nmain();\\n',\n                highlighted: {\n                  annotations: [],\n                  code: 'import OpenAI from \"openai\";\\n\\nconst openai = new OpenAI();\\n\\nasync function main() {\\n  const messages = [{\"role\": \"user\", \"content\": \"What\\'s the weather like in Boston today?\"}];\\n  const tools = [\\n      {\\n        \"type\": \"function\",\\n        \"function\": {\\n          \"name\": \"get_current_weather\",\\n          \"description\": \"Get the current weather in a given location\",\\n          \"parameters\": {\\n            \"type\": \"object\",\\n            \"properties\": {\\n              \"location\": {\\n                \"type\": \"string\",\\n                \"description\": \"The city and state, e.g. San Francisco, CA\",\\n              },\\n              \"unit\": {\"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"]},\\n            },\\n            \"required\": [\"location\"],\\n          },\\n        }\\n      }\\n  ];\\n\\n  const response = await openai.chat.completions.create({\\n    model: \"gpt-4.1\",\\n    messages: messages,\\n    tools: tools,\\n    tool_choice: \"auto\",\\n  });\\n\\n  console.log(response);\\n}\\n\\nmain();\\n',\n                  lang: 'javascript',\n                  meta: 'node.js',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['import', '#C586C0'], ' ', ['OpenAI', '#9CDCFE'], ' ', ['from', '#C586C0'], ' ', ['\"openai\"', '#CE9178'], [';', '#D4D4D4'], '\\n\\n', ['const', '#569CD6'], ' ', ['openai', '#4FC1FF'], ' ', ['=', '#D4D4D4'], ' ', ['new', '#569CD6'], ' ', ['OpenAI', '#DCDCAA'], ['();', '#D4D4D4'], '\\n\\n', ['async function', '#569CD6'], ' ', ['main', '#DCDCAA'], ['() {', '#D4D4D4'], '\\n  ', ['const', '#569CD6'], ' ', ['messages', '#4FC1FF'], ' ', ['= [{', '#D4D4D4'], ['\"role\"', '#CE9178'], [':', '#9CDCFE'], ' ', ['\"user\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['\"content\"', '#CE9178'], [':', '#9CDCFE'], ' ', ['\"What\\'s the weather like in Boston today?\"', '#CE9178'], ['}];', '#D4D4D4'], '\\n  ', ['const', '#569CD6'], ' ', ['tools', '#4FC1FF'], ' ', ['= [', '#D4D4D4'], '\\n      ', ['{', '#D4D4D4'], '\\n        ', ['\"type\"', '#CE9178'], [':', '#9CDCFE'], ' ', ['\"function\"', '#CE9178'], [',', '#D4D4D4'], '\\n        ', ['\"function\"', '#CE9178'], [':', '#9CDCFE'], ' ', ['{', '#D4D4D4'], '\\n          ', ['\"name\"', '#CE9178'], [':', '#9CDCFE'], ' ', ['\"get_current_weather\"', '#CE9178'], [',', '#D4D4D4'], '\\n          ', ['\"description\"', '#CE9178'], [':', '#9CDCFE'], ' ', ['\"Get the current weather in a given location\"', '#CE9178'], [',', '#D4D4D4'], '\\n          ', ['\"parameters\"', '#CE9178'], [':', '#9CDCFE'], ' ', ['{', '#D4D4D4'], '\\n            ', ['\"type\"', '#CE9178'], [':', '#9CDCFE'], ' ', ['\"object\"', '#CE9178'], [',', '#D4D4D4'], '\\n            ', ['\"properties\"', '#CE9178'], [':', '#9CDCFE'], ' ', ['{', '#D4D4D4'], '\\n              ', ['\"location\"', '#CE9178'], [':', '#9CDCFE'], ' ', ['{', '#D4D4D4'], '\\n                ', ['\"type\"', '#CE9178'], [':', '#9CDCFE'], ' ', ['\"string\"', '#CE9178'], [',', '#D4D4D4'], '\\n                ', ['\"description\"', '#CE9178'], [':', '#9CDCFE'], ' ', ['\"The city and state, e.g. San Francisco, CA\"', '#CE9178'], [',', '#D4D4D4'], '\\n              ', ['},', '#D4D4D4'], '\\n              ', ['\"unit\"', '#CE9178'], [':', '#9CDCFE'], ' ', ['{', '#D4D4D4'], ['\"type\"', '#CE9178'], [':', '#9CDCFE'], ' ', ['\"string\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['\"enum\"', '#CE9178'], [':', '#9CDCFE'], ' ', ['[', '#D4D4D4'], ['\"celsius\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['\"fahrenheit\"', '#CE9178'], [']},', '#D4D4D4'], '\\n            ', ['},', '#D4D4D4'], '\\n            ', ['\"required\"', '#CE9178'], [':', '#9CDCFE'], ' ', ['[', '#D4D4D4'], ['\"location\"', '#CE9178'], ['],', '#D4D4D4'], '\\n          ', ['},', '#D4D4D4'], '\\n        ', ['}', '#D4D4D4'], '\\n      ', ['}', '#D4D4D4'], '\\n  ', ['];', '#D4D4D4'], '\\n\\n  ', ['const', '#569CD6'], ' ', ['response', '#4FC1FF'], ' ', ['=', '#D4D4D4'], ' ', ['await', '#C586C0'], ' ', ['openai', '#9CDCFE'], ['.', '#D4D4D4'], ['chat', '#9CDCFE'], ['.', '#D4D4D4'], ['completions', '#9CDCFE'], ['.', '#D4D4D4'], ['create', '#DCDCAA'], ['({', '#D4D4D4'], '\\n    ', ['model:', '#9CDCFE'], ' ', ['\"gpt-4.1\"', '#CE9178'], [',', '#D4D4D4'], '\\n    ', ['messages: messages', '#9CDCFE'], [',', '#D4D4D4'], '\\n    ', ['tools: tools', '#9CDCFE'], [',', '#D4D4D4'], '\\n    ', ['tool_choice:', '#9CDCFE'], ' ', ['\"auto\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['});', '#D4D4D4'], '\\n\\n  ', ['console', '#9CDCFE'], ['.', '#D4D4D4'], ['log', '#DCDCAA'], ['(', '#D4D4D4'], ['response', '#9CDCFE'], [');', '#D4D4D4'], '\\n', ['}', '#D4D4D4'], '\\n\\n', ['main', '#DCDCAA'], ['();', '#D4D4D4'], '\\n'],\n                  value: 'import OpenAI from \"openai\";\\n\\nconst openai = new OpenAI();\\n\\nasync function main() {\\n  const messages = [{\"role\": \"user\", \"content\": \"What\\'s the weather like in Boston today?\"}];\\n  const tools = [\\n      {\\n        \"type\": \"function\",\\n        \"function\": {\\n          \"name\": \"get_current_weather\",\\n          \"description\": \"Get the current weather in a given location\",\\n          \"parameters\": {\\n            \"type\": \"object\",\\n            \"properties\": {\\n              \"location\": {\\n                \"type\": \"string\",\\n                \"description\": \"The city and state, e.g. San Francisco, CA\",\\n              },\\n              \"unit\": {\"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"]},\\n            },\\n            \"required\": [\"location\"],\\n          },\\n        }\\n      }\\n  ];\\n\\n  const response = await openai.chat.completions.create({\\n    model: \"gpt-4.1\",\\n    messages: messages,\\n    tools: tools,\\n    tool_choice: \"auto\",\\n  });\\n\\n  console.log(response);\\n}\\n\\nmain();\\n'\n                },\n                language: 'js',\n                title: 'node.js'\n              }, {\n                code: 'using System;\\nusing System.Collections.Generic;\\n\\nusing OpenAI.Chat;\\n\\nChatClient client = new(\\n    model: \"gpt-4.1\",\\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\\n);\\n\\nChatTool getCurrentWeatherTool = ChatTool.CreateFunctionTool(\\n    functionName: \"get_current_weather\",\\n    functionDescription: \"Get the current weather in a given location\",\\n    functionParameters: BinaryData.FromString(\"\"\"\\n        {\\n            \"type\": \"object\",\\n            \"properties\": {\\n                \"location\": {\\n                    \"type\": \"string\",\\n                    \"description\": \"The city and state, e.g. San Francisco, CA\"\\n                },\\n                \"unit\": {\\n                    \"type\": \"string\",\\n                    \"enum\": [ \"celsius\", \"fahrenheit\" ]\\n                }\\n            },\\n            \"required\": [ \"location\" ]\\n        }\\n    \"\"\")\\n);\\n\\nList<ChatMessage> messages =\\n[\\n    new UserChatMessage(\"What\\'s the weather like in Boston today?\"),\\n];\\n\\nChatCompletionOptions options = new()\\n{\\n    Tools =\\n    {\\n        getCurrentWeatherTool\\n    },\\n    ToolChoice = ChatToolChoice.CreateAutoChoice(),\\n};\\n\\nChatCompletion completion = client.CompleteChat(messages, options);\\n',\n                highlighted: {\n                  annotations: [],\n                  code: 'using System;\\nusing System.Collections.Generic;\\n\\nusing OpenAI.Chat;\\n\\nChatClient client = new(\\n    model: \"gpt-4.1\",\\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\\n);\\n\\nChatTool getCurrentWeatherTool = ChatTool.CreateFunctionTool(\\n    functionName: \"get_current_weather\",\\n    functionDescription: \"Get the current weather in a given location\",\\n    functionParameters: BinaryData.FromString(\"\"\"\\n        {\\n            \"type\": \"object\",\\n            \"properties\": {\\n                \"location\": {\\n                    \"type\": \"string\",\\n                    \"description\": \"The city and state, e.g. San Francisco, CA\"\\n                },\\n                \"unit\": {\\n                    \"type\": \"string\",\\n                    \"enum\": [ \"celsius\", \"fahrenheit\" ]\\n                }\\n            },\\n            \"required\": [ \"location\" ]\\n        }\\n    \"\"\")\\n);\\n\\nList<ChatMessage> messages =\\n[\\n    new UserChatMessage(\"What\\'s the weather like in Boston today?\"),\\n];\\n\\nChatCompletionOptions options = new()\\n{\\n    Tools =\\n    {\\n        getCurrentWeatherTool\\n    },\\n    ToolChoice = ChatToolChoice.CreateAutoChoice(),\\n};\\n\\nChatCompletion completion = client.CompleteChat(messages, options);\\n',\n                  lang: 'csharp',\n                  meta: 'csharp',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['using', '#569CD6'], ' ', ['System', '#4EC9B0'], [';', '#D4D4D4'], '\\n', ['using', '#569CD6'], ' ', ['System', '#4EC9B0'], ['.', '#D4D4D4'], ['Collections', '#4EC9B0'], ['.', '#D4D4D4'], ['Generic', '#4EC9B0'], [';', '#D4D4D4'], '\\n\\n', ['using', '#569CD6'], ' ', ['OpenAI', '#4EC9B0'], ['.', '#D4D4D4'], ['Chat', '#4EC9B0'], [';', '#D4D4D4'], '\\n\\n', ['ChatClient', '#4EC9B0'], ' ', ['client', '#9CDCFE'], ' ', ['=', '#D4D4D4'], ' ', ['new', '#569CD6'], ['(', '#D4D4D4'], '\\n    ', ['model', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"gpt-4.1\"', '#CE9178'], [',', '#D4D4D4'], '\\n    ', ['apiKey', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['Environment', '#9CDCFE'], ['.', '#D4D4D4'], ['GetEnvironmentVariable', '#DCDCAA'], ['(', '#D4D4D4'], ['\"OPENAI_API_KEY\"', '#CE9178'], [')', '#D4D4D4'], '\\n', [');', '#D4D4D4'], '\\n\\n', ['ChatTool', '#4EC9B0'], ' ', ['getCurrentWeatherTool', '#9CDCFE'], ' ', ['=', '#D4D4D4'], ' ', ['ChatTool', '#9CDCFE'], ['.', '#D4D4D4'], ['CreateFunctionTool', '#DCDCAA'], ['(', '#D4D4D4'], '\\n    ', ['functionName', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"get_current_weather\"', '#CE9178'], [',', '#D4D4D4'], '\\n    ', ['functionDescription', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"Get the current weather in a given location\"', '#CE9178'], [',', '#D4D4D4'], '\\n    ', ['functionParameters', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['BinaryData', '#9CDCFE'], ['.', '#D4D4D4'], ['FromString', '#DCDCAA'], ['(', '#D4D4D4'], ['\"\"\"', '#CE9178'], '\\n        ', ['{', '#CE9178'], '\\n            ', ['\"type\": \"object\",', '#CE9178'], '\\n            ', ['\"properties\": {', '#CE9178'], '\\n                ', ['\"location\": {', '#CE9178'], '\\n                    ', ['\"type\": \"string\",', '#CE9178'], '\\n                    ', ['\"description\": \"The city and state, e.g. San Francisco, CA\"', '#CE9178'], '\\n                ', ['},', '#CE9178'], '\\n                ', ['\"unit\": {', '#CE9178'], '\\n                    ', ['\"type\": \"string\",', '#CE9178'], '\\n                    ', ['\"enum\": [ \"celsius\", \"fahrenheit\" ]', '#CE9178'], '\\n                ', ['}', '#CE9178'], '\\n            ', ['},', '#CE9178'], '\\n            ', ['\"required\": [ \"location\" ]', '#CE9178'], '\\n        ', ['}', '#CE9178'], '\\n    ', ['\"\"\"', '#CE9178'], [')', '#D4D4D4'], '\\n', [');', '#D4D4D4'], '\\n\\n', ['List', '#4EC9B0'], ['<', '#D4D4D4'], ['ChatMessage', '#4EC9B0'], ['>', '#D4D4D4'], ' ', ['messages', '#9CDCFE'], ' ', ['=', '#D4D4D4'], '\\n', ['[', '#D4D4D4'], '\\n    ', ['new', '#569CD6'], ' ', ['UserChatMessage', '#4EC9B0'], ['(', '#D4D4D4'], ['\"What\\'s the weather like in Boston today?\"', '#CE9178'], ['),', '#D4D4D4'], '\\n', ['];', '#D4D4D4'], '\\n\\n', ['ChatCompletionOptions', '#4EC9B0'], ' ', ['options', '#9CDCFE'], ' ', ['=', '#D4D4D4'], ' ', ['new', '#569CD6'], ['()', '#D4D4D4'], '\\n', ['{', '#D4D4D4'], '\\n    ', ['Tools', '#9CDCFE'], ' ', ['=', '#D4D4D4'], '\\n    ', ['{', '#D4D4D4'], '\\n        ', ['getCurrentWeatherTool', '#9CDCFE'], '\\n    ', ['},', '#D4D4D4'], '\\n    ', ['ToolChoice', '#9CDCFE'], ' ', ['=', '#D4D4D4'], ' ', ['ChatToolChoice', '#9CDCFE'], ['.', '#D4D4D4'], ['CreateAutoChoice', '#DCDCAA'], ['(),', '#D4D4D4'], '\\n', ['};', '#D4D4D4'], '\\n\\n', ['ChatCompletion', '#4EC9B0'], ' ', ['completion', '#9CDCFE'], ' ', ['=', '#D4D4D4'], ' ', ['client', '#9CDCFE'], ['.', '#D4D4D4'], ['CompleteChat', '#DCDCAA'], ['(', '#D4D4D4'], ['messages', '#9CDCFE'], [',', '#D4D4D4'], ' ', ['options', '#9CDCFE'], [');', '#D4D4D4'], '\\n'],\n                  value: 'using System;\\nusing System.Collections.Generic;\\n\\nusing OpenAI.Chat;\\n\\nChatClient client = new(\\n    model: \"gpt-4.1\",\\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\\n);\\n\\nChatTool getCurrentWeatherTool = ChatTool.CreateFunctionTool(\\n    functionName: \"get_current_weather\",\\n    functionDescription: \"Get the current weather in a given location\",\\n    functionParameters: BinaryData.FromString(\"\"\"\\n        {\\n            \"type\": \"object\",\\n            \"properties\": {\\n                \"location\": {\\n                    \"type\": \"string\",\\n                    \"description\": \"The city and state, e.g. San Francisco, CA\"\\n                },\\n                \"unit\": {\\n                    \"type\": \"string\",\\n                    \"enum\": [ \"celsius\", \"fahrenheit\" ]\\n                }\\n            },\\n            \"required\": [ \"location\" ]\\n        }\\n    \"\"\")\\n);\\n\\nList<ChatMessage> messages =\\n[\\n    new UserChatMessage(\"What\\'s the weather like in Boston today?\"),\\n];\\n\\nChatCompletionOptions options = new()\\n{\\n    Tools =\\n    {\\n        getCurrentWeatherTool\\n    },\\n    ToolChoice = ChatToolChoice.CreateAutoChoice(),\\n};\\n\\nChatCompletion completion = client.CompleteChat(messages, options);\\n'\n                },\n                language: 'csharp',\n                title: 'csharp'\n              }],\n              title: 'Functions'\n            },\n            description: 'Functions'\n          }, {\n            codeblock: {\n              tabs: [{\n                code: 'curl https://api.openai.com/v1/chat/completions \\\\\\n  -H \"Content-Type: application/json\" \\\\\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\\\\n  -d \\'{\\n    \"model\": \"VAR_chat_model_id\",\\n    \"messages\": [\\n      {\\n        \"role\": \"user\",\\n        \"content\": \"Hello!\"\\n      }\\n    ],\\n    \"logprobs\": true,\\n    \"top_logprobs\": 2\\n  }\\'\\n',\n                highlighted: {\n                  annotations: [],\n                  code: 'curl https://api.openai.com/v1/chat/completions \\\\\\n  -H \"Content-Type: application/json\" \\\\\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\\\\n  -d \\'{\\n    \"model\": \"VAR_chat_model_id\",\\n    \"messages\": [\\n      {\\n        \"role\": \"user\",\\n        \"content\": \"Hello!\"\\n      }\\n    ],\\n    \"logprobs\": true,\\n    \"top_logprobs\": 2\\n  }\\'\\n',\n                  lang: 'shellscript',\n                  meta: 'curl',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['curl', '#DCDCAA'], ' ', ['https://api.openai.com/v1/chat/completions', '#CE9178'], ' ', ['\\\\', '#D7BA7D'], '\\n  ', ['-H \"Content-Type: application/json\"', '#CE9178'], ' ', ['\\\\', '#D7BA7D'], '\\n  ', ['-H \"Authorization: Bearer', '#CE9178'], ' ', ['$OPENAI_API_KEY', '#9CDCFE'], ['\"', '#CE9178'], ' ', ['\\\\', '#D7BA7D'], '\\n  ', ['-d \\'{', '#CE9178'], '\\n    ', ['\"model\": \"VAR_chat_model_id\",', '#CE9178'], '\\n    ', ['\"messages\": [', '#CE9178'], '\\n      ', ['{', '#CE9178'], '\\n        ', ['\"role\": \"user\",', '#CE9178'], '\\n        ', ['\"content\": \"Hello!\"', '#CE9178'], '\\n      ', ['}', '#CE9178'], '\\n    ', ['],', '#CE9178'], '\\n    ', ['\"logprobs\": true,', '#CE9178'], '\\n    ', ['\"top_logprobs\": 2', '#CE9178'], '\\n  ', ['}\\'', '#CE9178'], '\\n'],\n                  value: 'curl https://api.openai.com/v1/chat/completions \\\\\\n  -H \"Content-Type: application/json\" \\\\\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\\\\n  -d \\'{\\n    \"model\": \"VAR_chat_model_id\",\\n    \"messages\": [\\n      {\\n        \"role\": \"user\",\\n        \"content\": \"Hello!\"\\n      }\\n    ],\\n    \"logprobs\": true,\\n    \"top_logprobs\": 2\\n  }\\'\\n'\n                },\n                language: 'bash',\n                title: 'curl'\n              }, {\n                code: 'from openai import OpenAI\\nclient = OpenAI()\\n\\ncompletion = client.chat.completions.create(\\n  model=\"VAR_chat_model_id\",\\n  messages=[\\n    {\"role\": \"user\", \"content\": \"Hello!\"}\\n  ],\\n  logprobs=True,\\n  top_logprobs=2\\n)\\n\\nprint(completion.choices[0].message)\\nprint(completion.choices[0].logprobs)\\n',\n                highlighted: {\n                  annotations: [],\n                  code: 'from openai import OpenAI\\nclient = OpenAI()\\n\\ncompletion = client.chat.completions.create(\\n  model=\"VAR_chat_model_id\",\\n  messages=[\\n    {\"role\": \"user\", \"content\": \"Hello!\"}\\n  ],\\n  logprobs=True,\\n  top_logprobs=2\\n)\\n\\nprint(completion.choices[0].message)\\nprint(completion.choices[0].logprobs)\\n',\n                  lang: 'python',\n                  meta: 'python',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['from', '#C586C0'], ' ', ['openai', '#D4D4D4'], ' ', ['import', '#C586C0'], ' ', ['OpenAI', '#D4D4D4'], '\\n', ['client = OpenAI()', '#D4D4D4'], '\\n\\n', ['completion = client.chat.completions.create(', '#D4D4D4'], '\\n  ', ['model', '#9CDCFE'], ['=', '#D4D4D4'], ['\"VAR_chat_model_id\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['messages', '#9CDCFE'], ['=[', '#D4D4D4'], '\\n    ', ['{', '#D4D4D4'], ['\"role\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"user\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['\"content\"', '#CE9178'], [':', '#D4D4D4'], ' ', ['\"Hello!\"', '#CE9178'], ['}', '#D4D4D4'], '\\n  ', ['],', '#D4D4D4'], '\\n  ', ['logprobs', '#9CDCFE'], ['=', '#D4D4D4'], ['True', '#569CD6'], [',', '#D4D4D4'], '\\n  ', ['top_logprobs', '#9CDCFE'], ['=', '#D4D4D4'], ['2', '#B5CEA8'], '\\n', [')', '#D4D4D4'], '\\n\\n', ['print', '#DCDCAA'], ['(completion.choices[', '#D4D4D4'], ['0', '#B5CEA8'], ['].message)', '#D4D4D4'], '\\n', ['print', '#DCDCAA'], ['(completion.choices[', '#D4D4D4'], ['0', '#B5CEA8'], ['].logprobs)', '#D4D4D4'], '\\n'],\n                  value: 'from openai import OpenAI\\nclient = OpenAI()\\n\\ncompletion = client.chat.completions.create(\\n  model=\"VAR_chat_model_id\",\\n  messages=[\\n    {\"role\": \"user\", \"content\": \"Hello!\"}\\n  ],\\n  logprobs=True,\\n  top_logprobs=2\\n)\\n\\nprint(completion.choices[0].message)\\nprint(completion.choices[0].logprobs)\\n'\n                },\n                language: 'python',\n                title: 'python'\n              }, {\n                code: 'import OpenAI from \"openai\";\\n\\nconst openai = new OpenAI();\\n\\nasync function main() {\\n  const completion = await openai.chat.completions.create({\\n    messages: [{ role: \"user\", content: \"Hello!\" }],\\n    model: \"VAR_chat_model_id\",\\n    logprobs: true,\\n    top_logprobs: 2,\\n  });\\n\\n  console.log(completion.choices[0]);\\n}\\n\\nmain();\\n',\n                highlighted: {\n                  annotations: [],\n                  code: 'import OpenAI from \"openai\";\\n\\nconst openai = new OpenAI();\\n\\nasync function main() {\\n  const completion = await openai.chat.completions.create({\\n    messages: [{ role: \"user\", content: \"Hello!\" }],\\n    model: \"VAR_chat_model_id\",\\n    logprobs: true,\\n    top_logprobs: 2,\\n  });\\n\\n  console.log(completion.choices[0]);\\n}\\n\\nmain();\\n',\n                  lang: 'javascript',\n                  meta: 'node.js',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['import', '#C586C0'], ' ', ['OpenAI', '#9CDCFE'], ' ', ['from', '#C586C0'], ' ', ['\"openai\"', '#CE9178'], [';', '#D4D4D4'], '\\n\\n', ['const', '#569CD6'], ' ', ['openai', '#4FC1FF'], ' ', ['=', '#D4D4D4'], ' ', ['new', '#569CD6'], ' ', ['OpenAI', '#DCDCAA'], ['();', '#D4D4D4'], '\\n\\n', ['async function', '#569CD6'], ' ', ['main', '#DCDCAA'], ['() {', '#D4D4D4'], '\\n  ', ['const', '#569CD6'], ' ', ['completion', '#4FC1FF'], ' ', ['=', '#D4D4D4'], ' ', ['await', '#C586C0'], ' ', ['openai', '#9CDCFE'], ['.', '#D4D4D4'], ['chat', '#9CDCFE'], ['.', '#D4D4D4'], ['completions', '#9CDCFE'], ['.', '#D4D4D4'], ['create', '#DCDCAA'], ['({', '#D4D4D4'], '\\n    ', ['messages:', '#9CDCFE'], ' ', ['[{', '#D4D4D4'], ' ', ['role:', '#9CDCFE'], ' ', ['\"user\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['content:', '#9CDCFE'], ' ', ['\"Hello!\"', '#CE9178'], ' ', ['}],', '#D4D4D4'], '\\n    ', ['model:', '#9CDCFE'], ' ', ['\"VAR_chat_model_id\"', '#CE9178'], [',', '#D4D4D4'], '\\n    ', ['logprobs:', '#9CDCFE'], ' ', ['true', '#569CD6'], [',', '#D4D4D4'], '\\n    ', ['top_logprobs:', '#9CDCFE'], ' ', ['2', '#B5CEA8'], [',', '#D4D4D4'], '\\n  ', ['});', '#D4D4D4'], '\\n\\n  ', ['console', '#9CDCFE'], ['.', '#D4D4D4'], ['log', '#DCDCAA'], ['(', '#D4D4D4'], ['completion', '#9CDCFE'], ['.', '#D4D4D4'], ['choices', '#9CDCFE'], ['[', '#D4D4D4'], ['0', '#B5CEA8'], [']);', '#D4D4D4'], '\\n', ['}', '#D4D4D4'], '\\n\\n', ['main', '#DCDCAA'], ['();', '#D4D4D4'], '\\n'],\n                  value: 'import OpenAI from \"openai\";\\n\\nconst openai = new OpenAI();\\n\\nasync function main() {\\n  const completion = await openai.chat.completions.create({\\n    messages: [{ role: \"user\", content: \"Hello!\" }],\\n    model: \"VAR_chat_model_id\",\\n    logprobs: true,\\n    top_logprobs: 2,\\n  });\\n\\n  console.log(completion.choices[0]);\\n}\\n\\nmain();\\n'\n                },\n                language: 'js',\n                title: 'node.js'\n              }, {\n                code: 'using System;\\nusing System.Collections.Generic;\\n\\nusing OpenAI.Chat;\\n\\nChatClient client = new(\\n    model: \"gpt-4.1\",\\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\\n);\\n\\nList<ChatMessage> messages =\\n[\\n    new UserChatMessage(\"Hello!\")\\n];\\n\\nChatCompletionOptions options = new()\\n{\\n    IncludeLogProbabilities = true,\\n    TopLogProbabilityCount = 2\\n};\\n\\nChatCompletion completion = client.CompleteChat(messages, options);\\n\\nConsole.WriteLine(completion.Content[0].Text);\\n',\n                highlighted: {\n                  annotations: [],\n                  code: 'using System;\\nusing System.Collections.Generic;\\n\\nusing OpenAI.Chat;\\n\\nChatClient client = new(\\n    model: \"gpt-4.1\",\\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\\n);\\n\\nList<ChatMessage> messages =\\n[\\n    new UserChatMessage(\"Hello!\")\\n];\\n\\nChatCompletionOptions options = new()\\n{\\n    IncludeLogProbabilities = true,\\n    TopLogProbabilityCount = 2\\n};\\n\\nChatCompletion completion = client.CompleteChat(messages, options);\\n\\nConsole.WriteLine(completion.Content[0].Text);\\n',\n                  lang: 'csharp',\n                  meta: 'csharp',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['using', '#569CD6'], ' ', ['System', '#4EC9B0'], [';', '#D4D4D4'], '\\n', ['using', '#569CD6'], ' ', ['System', '#4EC9B0'], ['.', '#D4D4D4'], ['Collections', '#4EC9B0'], ['.', '#D4D4D4'], ['Generic', '#4EC9B0'], [';', '#D4D4D4'], '\\n\\n', ['using', '#569CD6'], ' ', ['OpenAI', '#4EC9B0'], ['.', '#D4D4D4'], ['Chat', '#4EC9B0'], [';', '#D4D4D4'], '\\n\\n', ['ChatClient', '#4EC9B0'], ' ', ['client', '#9CDCFE'], ' ', ['=', '#D4D4D4'], ' ', ['new', '#569CD6'], ['(', '#D4D4D4'], '\\n    ', ['model', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"gpt-4.1\"', '#CE9178'], [',', '#D4D4D4'], '\\n    ', ['apiKey', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['Environment', '#9CDCFE'], ['.', '#D4D4D4'], ['GetEnvironmentVariable', '#DCDCAA'], ['(', '#D4D4D4'], ['\"OPENAI_API_KEY\"', '#CE9178'], [')', '#D4D4D4'], '\\n', [');', '#D4D4D4'], '\\n\\n', ['List', '#4EC9B0'], ['<', '#D4D4D4'], ['ChatMessage', '#4EC9B0'], ['>', '#D4D4D4'], ' ', ['messages', '#9CDCFE'], ' ', ['=', '#D4D4D4'], '\\n', ['[', '#D4D4D4'], '\\n    ', ['new', '#569CD6'], ' ', ['UserChatMessage', '#4EC9B0'], ['(', '#D4D4D4'], ['\"Hello!\"', '#CE9178'], [')', '#D4D4D4'], '\\n', ['];', '#D4D4D4'], '\\n\\n', ['ChatCompletionOptions', '#4EC9B0'], ' ', ['options', '#9CDCFE'], ' ', ['=', '#D4D4D4'], ' ', ['new', '#569CD6'], ['()', '#D4D4D4'], '\\n', ['{', '#D4D4D4'], '\\n    ', ['IncludeLogProbabilities', '#9CDCFE'], ' ', ['=', '#D4D4D4'], ' ', ['true', '#569CD6'], [',', '#D4D4D4'], '\\n    ', ['TopLogProbabilityCount', '#9CDCFE'], ' ', ['=', '#D4D4D4'], ' ', ['2', '#B5CEA8'], '\\n', ['};', '#D4D4D4'], '\\n\\n', ['ChatCompletion', '#4EC9B0'], ' ', ['completion', '#9CDCFE'], ' ', ['=', '#D4D4D4'], ' ', ['client', '#9CDCFE'], ['.', '#D4D4D4'], ['CompleteChat', '#DCDCAA'], ['(', '#D4D4D4'], ['messages', '#9CDCFE'], [',', '#D4D4D4'], ' ', ['options', '#9CDCFE'], [');', '#D4D4D4'], '\\n\\n', ['Console', '#9CDCFE'], ['.', '#D4D4D4'], ['WriteLine', '#DCDCAA'], ['(', '#D4D4D4'], ['completion', '#9CDCFE'], ['.', '#D4D4D4'], ['Content', '#9CDCFE'], ['[', '#D4D4D4'], ['0', '#B5CEA8'], ['].', '#D4D4D4'], ['Text', '#9CDCFE'], [');', '#D4D4D4'], '\\n'],\n                  value: 'using System;\\nusing System.Collections.Generic;\\n\\nusing OpenAI.Chat;\\n\\nChatClient client = new(\\n    model: \"gpt-4.1\",\\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\\n);\\n\\nList<ChatMessage> messages =\\n[\\n    new UserChatMessage(\"Hello!\")\\n];\\n\\nChatCompletionOptions options = new()\\n{\\n    IncludeLogProbabilities = true,\\n    TopLogProbabilityCount = 2\\n};\\n\\nChatCompletion completion = client.CompleteChat(messages, options);\\n\\nConsole.WriteLine(completion.Content[0].Text);\\n'\n                },\n                language: 'csharp',\n                title: 'csharp'\n              }],\n              title: 'Logprobs'\n            },\n            description: 'Logprobs'\n          }]\n        }, {\n          description: 'Example response',\n          examples: [{\n            codeblock: {\n              tabs: [{\n                code: '{\\n  \"id\": \"chatcmpl-B9MBs8CjcvOU2jLn4n570S5qMJKcT\",\\n  \"object\": \"chat.completion\",\\n  \"created\": 1741569952,\\n  \"model\": \"gpt-4.1-2025-04-14\",\\n  \"choices\": [\\n    {\\n      \"index\": 0,\\n      \"message\": {\\n        \"role\": \"assistant\",\\n        \"content\": \"Hello! How can I assist you today?\",\\n        \"refusal\": null,\\n        \"annotations\": []\\n      },\\n      \"logprobs\": null,\\n      \"finish_reason\": \"stop\"\\n    }\\n  ],\\n  \"usage\": {\\n    \"prompt_tokens\": 19,\\n    \"completion_tokens\": 10,\\n    \"total_tokens\": 29,\\n    \"prompt_tokens_details\": {\\n      \"cached_tokens\": 0,\\n      \"audio_tokens\": 0\\n    },\\n    \"completion_tokens_details\": {\\n      \"reasoning_tokens\": 0,\\n      \"audio_tokens\": 0,\\n      \"accepted_prediction_tokens\": 0,\\n      \"rejected_prediction_tokens\": 0\\n    }\\n  },\\n  \"service_tier\": \"default\"\\n}\\n',\n                highlighted: {\n                  annotations: [],\n                  code: '{\\n  \"id\": \"chatcmpl-B9MBs8CjcvOU2jLn4n570S5qMJKcT\",\\n  \"object\": \"chat.completion\",\\n  \"created\": 1741569952,\\n  \"model\": \"gpt-4.1-2025-04-14\",\\n  \"choices\": [\\n    {\\n      \"index\": 0,\\n      \"message\": {\\n        \"role\": \"assistant\",\\n        \"content\": \"Hello! How can I assist you today?\",\\n        \"refusal\": null,\\n        \"annotations\": []\\n      },\\n      \"logprobs\": null,\\n      \"finish_reason\": \"stop\"\\n    }\\n  ],\\n  \"usage\": {\\n    \"prompt_tokens\": 19,\\n    \"completion_tokens\": 10,\\n    \"total_tokens\": 29,\\n    \"prompt_tokens_details\": {\\n      \"cached_tokens\": 0,\\n      \"audio_tokens\": 0\\n    },\\n    \"completion_tokens_details\": {\\n      \"reasoning_tokens\": 0,\\n      \"audio_tokens\": 0,\\n      \"accepted_prediction_tokens\": 0,\\n      \"rejected_prediction_tokens\": 0\\n    }\\n  },\\n  \"service_tier\": \"default\"\\n}\\n',\n                  lang: 'json',\n                  meta: '',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['{', '#D4D4D4'], '\\n  ', ['\"id\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"chatcmpl-B9MBs8CjcvOU2jLn4n570S5qMJKcT\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['\"object\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"chat.completion\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['\"created\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['1741569952', '#B5CEA8'], [',', '#D4D4D4'], '\\n  ', ['\"model\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"gpt-4.1-2025-04-14\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['\"choices\"', '#9CDCFE'], [': [', '#D4D4D4'], '\\n    ', ['{', '#D4D4D4'], '\\n      ', ['\"index\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], [',', '#D4D4D4'], '\\n      ', ['\"message\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n        ', ['\"role\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"assistant\"', '#CE9178'], [',', '#D4D4D4'], '\\n        ', ['\"content\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"Hello! How can I assist you today?\"', '#CE9178'], [',', '#D4D4D4'], '\\n        ', ['\"refusal\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['null', '#569CD6'], [',', '#D4D4D4'], '\\n        ', ['\"annotations\"', '#9CDCFE'], [': []', '#D4D4D4'], '\\n      ', ['},', '#D4D4D4'], '\\n      ', ['\"logprobs\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['null', '#569CD6'], [',', '#D4D4D4'], '\\n      ', ['\"finish_reason\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"stop\"', '#CE9178'], '\\n    ', ['}', '#D4D4D4'], '\\n  ', ['],', '#D4D4D4'], '\\n  ', ['\"usage\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n    ', ['\"prompt_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['19', '#B5CEA8'], [',', '#D4D4D4'], '\\n    ', ['\"completion_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['10', '#B5CEA8'], [',', '#D4D4D4'], '\\n    ', ['\"total_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['29', '#B5CEA8'], [',', '#D4D4D4'], '\\n    ', ['\"prompt_tokens_details\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n      ', ['\"cached_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], [',', '#D4D4D4'], '\\n      ', ['\"audio_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], '\\n    ', ['},', '#D4D4D4'], '\\n    ', ['\"completion_tokens_details\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n      ', ['\"reasoning_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], [',', '#D4D4D4'], '\\n      ', ['\"audio_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], [',', '#D4D4D4'], '\\n      ', ['\"accepted_prediction_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], [',', '#D4D4D4'], '\\n      ', ['\"rejected_prediction_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], '\\n    ', ['}', '#D4D4D4'], '\\n  ', ['},', '#D4D4D4'], '\\n  ', ['\"service_tier\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"default\"', '#CE9178'], '\\n', ['}', '#D4D4D4'], '\\n'],\n                  value: '{\\n  \"id\": \"chatcmpl-B9MBs8CjcvOU2jLn4n570S5qMJKcT\",\\n  \"object\": \"chat.completion\",\\n  \"created\": 1741569952,\\n  \"model\": \"gpt-4.1-2025-04-14\",\\n  \"choices\": [\\n    {\\n      \"index\": 0,\\n      \"message\": {\\n        \"role\": \"assistant\",\\n        \"content\": \"Hello! How can I assist you today?\",\\n        \"refusal\": null,\\n        \"annotations\": []\\n      },\\n      \"logprobs\": null,\\n      \"finish_reason\": \"stop\"\\n    }\\n  ],\\n  \"usage\": {\\n    \"prompt_tokens\": 19,\\n    \"completion_tokens\": 10,\\n    \"total_tokens\": 29,\\n    \"prompt_tokens_details\": {\\n      \"cached_tokens\": 0,\\n      \"audio_tokens\": 0\\n    },\\n    \"completion_tokens_details\": {\\n      \"reasoning_tokens\": 0,\\n      \"audio_tokens\": 0,\\n      \"accepted_prediction_tokens\": 0,\\n      \"rejected_prediction_tokens\": 0\\n    }\\n  },\\n  \"service_tier\": \"default\"\\n}\\n'\n                },\n                language: 'json',\n                title: ''\n              }],\n              title: 'Default'\n            },\n            description: 'Default'\n          }, {\n            codeblock: {\n              tabs: [{\n                code: '{\\n  \"id\": \"chatcmpl-B9MHDbslfkBeAs8l4bebGdFOJ6PeG\",\\n  \"object\": \"chat.completion\",\\n  \"created\": 1741570283,\\n  \"model\": \"gpt-4.1-2025-04-14\",\\n  \"choices\": [\\n    {\\n      \"index\": 0,\\n      \"message\": {\\n        \"role\": \"assistant\",\\n        \"content\": \"The image shows a wooden boardwalk path running through a lush green field or meadow. The sky is bright blue with some scattered clouds, giving the scene a serene and peaceful atmosphere. Trees and shrubs are visible in the background.\",\\n        \"refusal\": null,\\n        \"annotations\": []\\n      },\\n      \"logprobs\": null,\\n      \"finish_reason\": \"stop\"\\n    }\\n  ],\\n  \"usage\": {\\n    \"prompt_tokens\": 1117,\\n    \"completion_tokens\": 46,\\n    \"total_tokens\": 1163,\\n    \"prompt_tokens_details\": {\\n      \"cached_tokens\": 0,\\n      \"audio_tokens\": 0\\n    },\\n    \"completion_tokens_details\": {\\n      \"reasoning_tokens\": 0,\\n      \"audio_tokens\": 0,\\n      \"accepted_prediction_tokens\": 0,\\n      \"rejected_prediction_tokens\": 0\\n    }\\n  },\\n  \"service_tier\": \"default\"\\n}\\n',\n                highlighted: {\n                  annotations: [],\n                  code: '{\\n  \"id\": \"chatcmpl-B9MHDbslfkBeAs8l4bebGdFOJ6PeG\",\\n  \"object\": \"chat.completion\",\\n  \"created\": 1741570283,\\n  \"model\": \"gpt-4.1-2025-04-14\",\\n  \"choices\": [\\n    {\\n      \"index\": 0,\\n      \"message\": {\\n        \"role\": \"assistant\",\\n        \"content\": \"The image shows a wooden boardwalk path running through a lush green field or meadow. The sky is bright blue with some scattered clouds, giving the scene a serene and peaceful atmosphere. Trees and shrubs are visible in the background.\",\\n        \"refusal\": null,\\n        \"annotations\": []\\n      },\\n      \"logprobs\": null,\\n      \"finish_reason\": \"stop\"\\n    }\\n  ],\\n  \"usage\": {\\n    \"prompt_tokens\": 1117,\\n    \"completion_tokens\": 46,\\n    \"total_tokens\": 1163,\\n    \"prompt_tokens_details\": {\\n      \"cached_tokens\": 0,\\n      \"audio_tokens\": 0\\n    },\\n    \"completion_tokens_details\": {\\n      \"reasoning_tokens\": 0,\\n      \"audio_tokens\": 0,\\n      \"accepted_prediction_tokens\": 0,\\n      \"rejected_prediction_tokens\": 0\\n    }\\n  },\\n  \"service_tier\": \"default\"\\n}\\n',\n                  lang: 'json',\n                  meta: '',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['{', '#D4D4D4'], '\\n  ', ['\"id\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"chatcmpl-B9MHDbslfkBeAs8l4bebGdFOJ6PeG\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['\"object\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"chat.completion\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['\"created\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['1741570283', '#B5CEA8'], [',', '#D4D4D4'], '\\n  ', ['\"model\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"gpt-4.1-2025-04-14\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['\"choices\"', '#9CDCFE'], [': [', '#D4D4D4'], '\\n    ', ['{', '#D4D4D4'], '\\n      ', ['\"index\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], [',', '#D4D4D4'], '\\n      ', ['\"message\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n        ', ['\"role\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"assistant\"', '#CE9178'], [',', '#D4D4D4'], '\\n        ', ['\"content\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"The image shows a wooden boardwalk path running through a lush green field or meadow. The sky is bright blue with some scattered clouds, giving the scene a serene and peaceful atmosphere. Trees and shrubs are visible in the background.\"', '#CE9178'], [',', '#D4D4D4'], '\\n        ', ['\"refusal\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['null', '#569CD6'], [',', '#D4D4D4'], '\\n        ', ['\"annotations\"', '#9CDCFE'], [': []', '#D4D4D4'], '\\n      ', ['},', '#D4D4D4'], '\\n      ', ['\"logprobs\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['null', '#569CD6'], [',', '#D4D4D4'], '\\n      ', ['\"finish_reason\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"stop\"', '#CE9178'], '\\n    ', ['}', '#D4D4D4'], '\\n  ', ['],', '#D4D4D4'], '\\n  ', ['\"usage\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n    ', ['\"prompt_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['1117', '#B5CEA8'], [',', '#D4D4D4'], '\\n    ', ['\"completion_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['46', '#B5CEA8'], [',', '#D4D4D4'], '\\n    ', ['\"total_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['1163', '#B5CEA8'], [',', '#D4D4D4'], '\\n    ', ['\"prompt_tokens_details\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n      ', ['\"cached_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], [',', '#D4D4D4'], '\\n      ', ['\"audio_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], '\\n    ', ['},', '#D4D4D4'], '\\n    ', ['\"completion_tokens_details\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n      ', ['\"reasoning_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], [',', '#D4D4D4'], '\\n      ', ['\"audio_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], [',', '#D4D4D4'], '\\n      ', ['\"accepted_prediction_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], [',', '#D4D4D4'], '\\n      ', ['\"rejected_prediction_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], '\\n    ', ['}', '#D4D4D4'], '\\n  ', ['},', '#D4D4D4'], '\\n  ', ['\"service_tier\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"default\"', '#CE9178'], '\\n', ['}', '#D4D4D4'], '\\n'],\n                  value: '{\\n  \"id\": \"chatcmpl-B9MHDbslfkBeAs8l4bebGdFOJ6PeG\",\\n  \"object\": \"chat.completion\",\\n  \"created\": 1741570283,\\n  \"model\": \"gpt-4.1-2025-04-14\",\\n  \"choices\": [\\n    {\\n      \"index\": 0,\\n      \"message\": {\\n        \"role\": \"assistant\",\\n        \"content\": \"The image shows a wooden boardwalk path running through a lush green field or meadow. The sky is bright blue with some scattered clouds, giving the scene a serene and peaceful atmosphere. Trees and shrubs are visible in the background.\",\\n        \"refusal\": null,\\n        \"annotations\": []\\n      },\\n      \"logprobs\": null,\\n      \"finish_reason\": \"stop\"\\n    }\\n  ],\\n  \"usage\": {\\n    \"prompt_tokens\": 1117,\\n    \"completion_tokens\": 46,\\n    \"total_tokens\": 1163,\\n    \"prompt_tokens_details\": {\\n      \"cached_tokens\": 0,\\n      \"audio_tokens\": 0\\n    },\\n    \"completion_tokens_details\": {\\n      \"reasoning_tokens\": 0,\\n      \"audio_tokens\": 0,\\n      \"accepted_prediction_tokens\": 0,\\n      \"rejected_prediction_tokens\": 0\\n    }\\n  },\\n  \"service_tier\": \"default\"\\n}\\n'\n                },\n                language: 'json',\n                title: ''\n              }],\n              title: 'Image input'\n            },\n            description: 'Image input'\n          }, {\n            codeblock: {\n              tabs: [{\n                code: '{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-4o-mini\", \"system_fingerprint\": \"fp_44709d6fcb\", \"choices\":[{\"index\":0,\"delta\":{\"role\":\"assistant\",\"content\":\"\"},\"logprobs\":null,\"finish_reason\":null}]}\\n\\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-4o-mini\", \"system_fingerprint\": \"fp_44709d6fcb\", \"choices\":[{\"index\":0,\"delta\":{\"content\":\"Hello\"},\"logprobs\":null,\"finish_reason\":null}]}\\n\\n....\\n\\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-4o-mini\", \"system_fingerprint\": \"fp_44709d6fcb\", \"choices\":[{\"index\":0,\"delta\":{},\"logprobs\":null,\"finish_reason\":\"stop\"}]}\\n',\n                highlighted: {\n                  annotations: [],\n                  code: '{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-4o-mini\", \"system_fingerprint\": \"fp_44709d6fcb\", \"choices\":[{\"index\":0,\"delta\":{\"role\":\"assistant\",\"content\":\"\"},\"logprobs\":null,\"finish_reason\":null}]}\\n\\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-4o-mini\", \"system_fingerprint\": \"fp_44709d6fcb\", \"choices\":[{\"index\":0,\"delta\":{\"content\":\"Hello\"},\"logprobs\":null,\"finish_reason\":null}]}\\n\\n....\\n\\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-4o-mini\", \"system_fingerprint\": \"fp_44709d6fcb\", \"choices\":[{\"index\":0,\"delta\":{},\"logprobs\":null,\"finish_reason\":\"stop\"}]}\\n',\n                  lang: 'json',\n                  meta: '',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['{', '#D4D4D4'], ['\"id\"', '#9CDCFE'], [':', '#D4D4D4'], ['\"chatcmpl-123\"', '#CE9178'], [',', '#D4D4D4'], ['\"object\"', '#9CDCFE'], [':', '#D4D4D4'], ['\"chat.completion.chunk\"', '#CE9178'], [',', '#D4D4D4'], ['\"created\"', '#9CDCFE'], [':', '#D4D4D4'], ['1694268190', '#B5CEA8'], [',', '#D4D4D4'], ['\"model\"', '#9CDCFE'], [':', '#D4D4D4'], ['\"gpt-4o-mini\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['\"system_fingerprint\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"fp_44709d6fcb\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['\"choices\"', '#9CDCFE'], [':[{', '#D4D4D4'], ['\"index\"', '#9CDCFE'], [':', '#D4D4D4'], ['0', '#B5CEA8'], [',', '#D4D4D4'], ['\"delta\"', '#9CDCFE'], [':{', '#D4D4D4'], ['\"role\"', '#9CDCFE'], [':', '#D4D4D4'], ['\"assistant\"', '#CE9178'], [',', '#D4D4D4'], ['\"content\"', '#9CDCFE'], [':', '#D4D4D4'], ['\"\"', '#CE9178'], ['},', '#D4D4D4'], ['\"logprobs\"', '#9CDCFE'], [':', '#D4D4D4'], ['null', '#569CD6'], [',', '#D4D4D4'], ['\"finish_reason\"', '#9CDCFE'], [':', '#D4D4D4'], ['null', '#569CD6'], ['}]}', '#D4D4D4'], '\\n\\n', ['{', '#D4D4D4'], ['\"id\"', '#9CDCFE'], [':', '#D4D4D4'], ['\"chatcmpl-123\"', '#CE9178'], [',', '#D4D4D4'], ['\"object\"', '#9CDCFE'], [':', '#D4D4D4'], ['\"chat.completion.chunk\"', '#CE9178'], [',', '#D4D4D4'], ['\"created\"', '#9CDCFE'], [':', '#D4D4D4'], ['1694268190', '#B5CEA8'], [',', '#D4D4D4'], ['\"model\"', '#9CDCFE'], [':', '#D4D4D4'], ['\"gpt-4o-mini\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['\"system_fingerprint\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"fp_44709d6fcb\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['\"choices\"', '#9CDCFE'], [':[{', '#D4D4D4'], ['\"index\"', '#9CDCFE'], [':', '#D4D4D4'], ['0', '#B5CEA8'], [',', '#D4D4D4'], ['\"delta\"', '#9CDCFE'], [':{', '#D4D4D4'], ['\"content\"', '#9CDCFE'], [':', '#D4D4D4'], ['\"Hello\"', '#CE9178'], ['},', '#D4D4D4'], ['\"logprobs\"', '#9CDCFE'], [':', '#D4D4D4'], ['null', '#569CD6'], [',', '#D4D4D4'], ['\"finish_reason\"', '#9CDCFE'], [':', '#D4D4D4'], ['null', '#569CD6'], ['}]}', '#D4D4D4'], '\\n\\n', ['....', '#D4D4D4'], '\\n\\n', ['{', '#D4D4D4'], ['\"id\"', '#9CDCFE'], [':', '#D4D4D4'], ['\"chatcmpl-123\"', '#CE9178'], [',', '#D4D4D4'], ['\"object\"', '#9CDCFE'], [':', '#D4D4D4'], ['\"chat.completion.chunk\"', '#CE9178'], [',', '#D4D4D4'], ['\"created\"', '#9CDCFE'], [':', '#D4D4D4'], ['1694268190', '#B5CEA8'], [',', '#D4D4D4'], ['\"model\"', '#9CDCFE'], [':', '#D4D4D4'], ['\"gpt-4o-mini\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['\"system_fingerprint\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"fp_44709d6fcb\"', '#CE9178'], [',', '#D4D4D4'], ' ', ['\"choices\"', '#9CDCFE'], [':[{', '#D4D4D4'], ['\"index\"', '#9CDCFE'], [':', '#D4D4D4'], ['0', '#B5CEA8'], [',', '#D4D4D4'], ['\"delta\"', '#9CDCFE'], [':{},', '#D4D4D4'], ['\"logprobs\"', '#9CDCFE'], [':', '#D4D4D4'], ['null', '#569CD6'], [',', '#D4D4D4'], ['\"finish_reason\"', '#9CDCFE'], [':', '#D4D4D4'], ['\"stop\"', '#CE9178'], ['}]}', '#D4D4D4'], '\\n'],\n                  value: '{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-4o-mini\", \"system_fingerprint\": \"fp_44709d6fcb\", \"choices\":[{\"index\":0,\"delta\":{\"role\":\"assistant\",\"content\":\"\"},\"logprobs\":null,\"finish_reason\":null}]}\\n\\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-4o-mini\", \"system_fingerprint\": \"fp_44709d6fcb\", \"choices\":[{\"index\":0,\"delta\":{\"content\":\"Hello\"},\"logprobs\":null,\"finish_reason\":null}]}\\n\\n....\\n\\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-4o-mini\", \"system_fingerprint\": \"fp_44709d6fcb\", \"choices\":[{\"index\":0,\"delta\":{},\"logprobs\":null,\"finish_reason\":\"stop\"}]}\\n'\n                },\n                language: 'json',\n                title: ''\n              }],\n              title: 'Streaming'\n            },\n            description: 'Streaming'\n          }, {\n            codeblock: {\n              tabs: [{\n                code: '{\\n  \"id\": \"chatcmpl-abc123\",\\n  \"object\": \"chat.completion\",\\n  \"created\": 1699896916,\\n  \"model\": \"gpt-4o-mini\",\\n  \"choices\": [\\n    {\\n      \"index\": 0,\\n      \"message\": {\\n        \"role\": \"assistant\",\\n        \"content\": null,\\n        \"tool_calls\": [\\n          {\\n            \"id\": \"call_abc123\",\\n            \"type\": \"function\",\\n            \"function\": {\\n              \"name\": \"get_current_weather\",\\n              \"arguments\": \"{\\\\n\\\\\"location\\\\\": \\\\\"Boston, MA\\\\\"\\\\n}\"\\n            }\\n          }\\n        ]\\n      },\\n      \"logprobs\": null,\\n      \"finish_reason\": \"tool_calls\"\\n    }\\n  ],\\n  \"usage\": {\\n    \"prompt_tokens\": 82,\\n    \"completion_tokens\": 17,\\n    \"total_tokens\": 99,\\n    \"completion_tokens_details\": {\\n      \"reasoning_tokens\": 0,\\n      \"accepted_prediction_tokens\": 0,\\n      \"rejected_prediction_tokens\": 0\\n    }\\n  }\\n}\\n',\n                highlighted: {\n                  annotations: [],\n                  code: '{\\n  \"id\": \"chatcmpl-abc123\",\\n  \"object\": \"chat.completion\",\\n  \"created\": 1699896916,\\n  \"model\": \"gpt-4o-mini\",\\n  \"choices\": [\\n    {\\n      \"index\": 0,\\n      \"message\": {\\n        \"role\": \"assistant\",\\n        \"content\": null,\\n        \"tool_calls\": [\\n          {\\n            \"id\": \"call_abc123\",\\n            \"type\": \"function\",\\n            \"function\": {\\n              \"name\": \"get_current_weather\",\\n              \"arguments\": \"{\\\\n\\\\\"location\\\\\": \\\\\"Boston, MA\\\\\"\\\\n}\"\\n            }\\n          }\\n        ]\\n      },\\n      \"logprobs\": null,\\n      \"finish_reason\": \"tool_calls\"\\n    }\\n  ],\\n  \"usage\": {\\n    \"prompt_tokens\": 82,\\n    \"completion_tokens\": 17,\\n    \"total_tokens\": 99,\\n    \"completion_tokens_details\": {\\n      \"reasoning_tokens\": 0,\\n      \"accepted_prediction_tokens\": 0,\\n      \"rejected_prediction_tokens\": 0\\n    }\\n  }\\n}\\n',\n                  lang: 'json',\n                  meta: '',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['{', '#D4D4D4'], '\\n  ', ['\"id\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"chatcmpl-abc123\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['\"object\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"chat.completion\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['\"created\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['1699896916', '#B5CEA8'], [',', '#D4D4D4'], '\\n  ', ['\"model\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"gpt-4o-mini\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['\"choices\"', '#9CDCFE'], [': [', '#D4D4D4'], '\\n    ', ['{', '#D4D4D4'], '\\n      ', ['\"index\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], [',', '#D4D4D4'], '\\n      ', ['\"message\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n        ', ['\"role\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"assistant\"', '#CE9178'], [',', '#D4D4D4'], '\\n        ', ['\"content\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['null', '#569CD6'], [',', '#D4D4D4'], '\\n        ', ['\"tool_calls\"', '#9CDCFE'], [': [', '#D4D4D4'], '\\n          ', ['{', '#D4D4D4'], '\\n            ', ['\"id\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"call_abc123\"', '#CE9178'], [',', '#D4D4D4'], '\\n            ', ['\"type\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"function\"', '#CE9178'], [',', '#D4D4D4'], '\\n            ', ['\"function\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n              ', ['\"name\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"get_current_weather\"', '#CE9178'], [',', '#D4D4D4'], '\\n              ', ['\"arguments\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"{', '#CE9178'], ['\\\\n\\\\\"', '#D7BA7D'], ['location', '#CE9178'], ['\\\\\"', '#D7BA7D'], [':', '#CE9178'], ' ', ['\\\\\"', '#D7BA7D'], ['Boston, MA', '#CE9178'], ['\\\\\"\\\\n', '#D7BA7D'], ['}\"', '#CE9178'], '\\n            ', ['}', '#D4D4D4'], '\\n          ', ['}', '#D4D4D4'], '\\n        ', [']', '#D4D4D4'], '\\n      ', ['},', '#D4D4D4'], '\\n      ', ['\"logprobs\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['null', '#569CD6'], [',', '#D4D4D4'], '\\n      ', ['\"finish_reason\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"tool_calls\"', '#CE9178'], '\\n    ', ['}', '#D4D4D4'], '\\n  ', ['],', '#D4D4D4'], '\\n  ', ['\"usage\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n    ', ['\"prompt_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['82', '#B5CEA8'], [',', '#D4D4D4'], '\\n    ', ['\"completion_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['17', '#B5CEA8'], [',', '#D4D4D4'], '\\n    ', ['\"total_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['99', '#B5CEA8'], [',', '#D4D4D4'], '\\n    ', ['\"completion_tokens_details\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n      ', ['\"reasoning_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], [',', '#D4D4D4'], '\\n      ', ['\"accepted_prediction_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], [',', '#D4D4D4'], '\\n      ', ['\"rejected_prediction_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], '\\n    ', ['}', '#D4D4D4'], '\\n  ', ['}', '#D4D4D4'], '\\n', ['}', '#D4D4D4'], '\\n'],\n                  value: '{\\n  \"id\": \"chatcmpl-abc123\",\\n  \"object\": \"chat.completion\",\\n  \"created\": 1699896916,\\n  \"model\": \"gpt-4o-mini\",\\n  \"choices\": [\\n    {\\n      \"index\": 0,\\n      \"message\": {\\n        \"role\": \"assistant\",\\n        \"content\": null,\\n        \"tool_calls\": [\\n          {\\n            \"id\": \"call_abc123\",\\n            \"type\": \"function\",\\n            \"function\": {\\n              \"name\": \"get_current_weather\",\\n              \"arguments\": \"{\\\\n\\\\\"location\\\\\": \\\\\"Boston, MA\\\\\"\\\\n}\"\\n            }\\n          }\\n        ]\\n      },\\n      \"logprobs\": null,\\n      \"finish_reason\": \"tool_calls\"\\n    }\\n  ],\\n  \"usage\": {\\n    \"prompt_tokens\": 82,\\n    \"completion_tokens\": 17,\\n    \"total_tokens\": 99,\\n    \"completion_tokens_details\": {\\n      \"reasoning_tokens\": 0,\\n      \"accepted_prediction_tokens\": 0,\\n      \"rejected_prediction_tokens\": 0\\n    }\\n  }\\n}\\n'\n                },\n                language: 'json',\n                title: ''\n              }],\n              title: 'Functions'\n            },\n            description: 'Functions'\n          }, {\n            codeblock: {\n              tabs: [{\n                code: '{\\n  \"id\": \"chatcmpl-123\",\\n  \"object\": \"chat.completion\",\\n  \"created\": 1702685778,\\n  \"model\": \"gpt-4o-mini\",\\n  \"choices\": [\\n    {\\n      \"index\": 0,\\n      \"message\": {\\n        \"role\": \"assistant\",\\n        \"content\": \"Hello! How can I assist you today?\"\\n      },\\n      \"logprobs\": {\\n        \"content\": [\\n          {\\n            \"token\": \"Hello\",\\n            \"logprob\": -0.31725305,\\n            \"bytes\": [72, 101, 108, 108, 111],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \"Hello\",\\n                \"logprob\": -0.31725305,\\n                \"bytes\": [72, 101, 108, 108, 111]\\n              },\\n              {\\n                \"token\": \"Hi\",\\n                \"logprob\": -1.3190403,\\n                \"bytes\": [72, 105]\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \"!\",\\n            \"logprob\": -0.02380986,\\n            \"bytes\": [\\n              33\\n            ],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \"!\",\\n                \"logprob\": -0.02380986,\\n                \"bytes\": [33]\\n              },\\n              {\\n                \"token\": \" there\",\\n                \"logprob\": -3.787621,\\n                \"bytes\": [32, 116, 104, 101, 114, 101]\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \" How\",\\n            \"logprob\": -0.000054669687,\\n            \"bytes\": [32, 72, 111, 119],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \" How\",\\n                \"logprob\": -0.000054669687,\\n                \"bytes\": [32, 72, 111, 119]\\n              },\\n              {\\n                \"token\": \"<|end|>\",\\n                \"logprob\": -10.953937,\\n                \"bytes\": null\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \" can\",\\n            \"logprob\": -0.015801601,\\n            \"bytes\": [32, 99, 97, 110],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \" can\",\\n                \"logprob\": -0.015801601,\\n                \"bytes\": [32, 99, 97, 110]\\n              },\\n              {\\n                \"token\": \" may\",\\n                \"logprob\": -4.161023,\\n                \"bytes\": [32, 109, 97, 121]\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \" I\",\\n            \"logprob\": -3.7697225e-6,\\n            \"bytes\": [\\n              32,\\n              73\\n            ],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \" I\",\\n                \"logprob\": -3.7697225e-6,\\n                \"bytes\": [32, 73]\\n              },\\n              {\\n                \"token\": \" assist\",\\n                \"logprob\": -13.596657,\\n                \"bytes\": [32, 97, 115, 115, 105, 115, 116]\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \" assist\",\\n            \"logprob\": -0.04571125,\\n            \"bytes\": [32, 97, 115, 115, 105, 115, 116],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \" assist\",\\n                \"logprob\": -0.04571125,\\n                \"bytes\": [32, 97, 115, 115, 105, 115, 116]\\n              },\\n              {\\n                \"token\": \" help\",\\n                \"logprob\": -3.1089056,\\n                \"bytes\": [32, 104, 101, 108, 112]\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \" you\",\\n            \"logprob\": -5.4385737e-6,\\n            \"bytes\": [32, 121, 111, 117],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \" you\",\\n                \"logprob\": -5.4385737e-6,\\n                \"bytes\": [32, 121, 111, 117]\\n              },\\n              {\\n                \"token\": \" today\",\\n                \"logprob\": -12.807695,\\n                \"bytes\": [32, 116, 111, 100, 97, 121]\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \" today\",\\n            \"logprob\": -0.0040071653,\\n            \"bytes\": [32, 116, 111, 100, 97, 121],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \" today\",\\n                \"logprob\": -0.0040071653,\\n                \"bytes\": [32, 116, 111, 100, 97, 121]\\n              },\\n              {\\n                \"token\": \"?\",\\n                \"logprob\": -5.5247097,\\n                \"bytes\": [63]\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \"?\",\\n            \"logprob\": -0.0008108172,\\n            \"bytes\": [63],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \"?\",\\n                \"logprob\": -0.0008108172,\\n                \"bytes\": [63]\\n              },\\n              {\\n                \"token\": \"?\\\\n\",\\n                \"logprob\": -7.184561,\\n                \"bytes\": [63, 10]\\n              }\\n            ]\\n          }\\n        ]\\n      },\\n      \"finish_reason\": \"stop\"\\n    }\\n  ],\\n  \"usage\": {\\n    \"prompt_tokens\": 9,\\n    \"completion_tokens\": 9,\\n    \"total_tokens\": 18,\\n    \"completion_tokens_details\": {\\n      \"reasoning_tokens\": 0,\\n      \"accepted_prediction_tokens\": 0,\\n      \"rejected_prediction_tokens\": 0\\n    }\\n  },\\n  \"system_fingerprint\": null\\n}\\n',\n                highlighted: {\n                  annotations: [],\n                  code: '{\\n  \"id\": \"chatcmpl-123\",\\n  \"object\": \"chat.completion\",\\n  \"created\": 1702685778,\\n  \"model\": \"gpt-4o-mini\",\\n  \"choices\": [\\n    {\\n      \"index\": 0,\\n      \"message\": {\\n        \"role\": \"assistant\",\\n        \"content\": \"Hello! How can I assist you today?\"\\n      },\\n      \"logprobs\": {\\n        \"content\": [\\n          {\\n            \"token\": \"Hello\",\\n            \"logprob\": -0.31725305,\\n            \"bytes\": [72, 101, 108, 108, 111],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \"Hello\",\\n                \"logprob\": -0.31725305,\\n                \"bytes\": [72, 101, 108, 108, 111]\\n              },\\n              {\\n                \"token\": \"Hi\",\\n                \"logprob\": -1.3190403,\\n                \"bytes\": [72, 105]\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \"!\",\\n            \"logprob\": -0.02380986,\\n            \"bytes\": [\\n              33\\n            ],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \"!\",\\n                \"logprob\": -0.02380986,\\n                \"bytes\": [33]\\n              },\\n              {\\n                \"token\": \" there\",\\n                \"logprob\": -3.787621,\\n                \"bytes\": [32, 116, 104, 101, 114, 101]\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \" How\",\\n            \"logprob\": -0.000054669687,\\n            \"bytes\": [32, 72, 111, 119],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \" How\",\\n                \"logprob\": -0.000054669687,\\n                \"bytes\": [32, 72, 111, 119]\\n              },\\n              {\\n                \"token\": \"<|end|>\",\\n                \"logprob\": -10.953937,\\n                \"bytes\": null\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \" can\",\\n            \"logprob\": -0.015801601,\\n            \"bytes\": [32, 99, 97, 110],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \" can\",\\n                \"logprob\": -0.015801601,\\n                \"bytes\": [32, 99, 97, 110]\\n              },\\n              {\\n                \"token\": \" may\",\\n                \"logprob\": -4.161023,\\n                \"bytes\": [32, 109, 97, 121]\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \" I\",\\n            \"logprob\": -3.7697225e-6,\\n            \"bytes\": [\\n              32,\\n              73\\n            ],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \" I\",\\n                \"logprob\": -3.7697225e-6,\\n                \"bytes\": [32, 73]\\n              },\\n              {\\n                \"token\": \" assist\",\\n                \"logprob\": -13.596657,\\n                \"bytes\": [32, 97, 115, 115, 105, 115, 116]\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \" assist\",\\n            \"logprob\": -0.04571125,\\n            \"bytes\": [32, 97, 115, 115, 105, 115, 116],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \" assist\",\\n                \"logprob\": -0.04571125,\\n                \"bytes\": [32, 97, 115, 115, 105, 115, 116]\\n              },\\n              {\\n                \"token\": \" help\",\\n                \"logprob\": -3.1089056,\\n                \"bytes\": [32, 104, 101, 108, 112]\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \" you\",\\n            \"logprob\": -5.4385737e-6,\\n            \"bytes\": [32, 121, 111, 117],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \" you\",\\n                \"logprob\": -5.4385737e-6,\\n                \"bytes\": [32, 121, 111, 117]\\n              },\\n              {\\n                \"token\": \" today\",\\n                \"logprob\": -12.807695,\\n                \"bytes\": [32, 116, 111, 100, 97, 121]\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \" today\",\\n            \"logprob\": -0.0040071653,\\n            \"bytes\": [32, 116, 111, 100, 97, 121],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \" today\",\\n                \"logprob\": -0.0040071653,\\n                \"bytes\": [32, 116, 111, 100, 97, 121]\\n              },\\n              {\\n                \"token\": \"?\",\\n                \"logprob\": -5.5247097,\\n                \"bytes\": [63]\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \"?\",\\n            \"logprob\": -0.0008108172,\\n            \"bytes\": [63],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \"?\",\\n                \"logprob\": -0.0008108172,\\n                \"bytes\": [63]\\n              },\\n              {\\n                \"token\": \"?\\\\n\",\\n                \"logprob\": -7.184561,\\n                \"bytes\": [63, 10]\\n              }\\n            ]\\n          }\\n        ]\\n      },\\n      \"finish_reason\": \"stop\"\\n    }\\n  ],\\n  \"usage\": {\\n    \"prompt_tokens\": 9,\\n    \"completion_tokens\": 9,\\n    \"total_tokens\": 18,\\n    \"completion_tokens_details\": {\\n      \"reasoning_tokens\": 0,\\n      \"accepted_prediction_tokens\": 0,\\n      \"rejected_prediction_tokens\": 0\\n    }\\n  },\\n  \"system_fingerprint\": null\\n}\\n',\n                  lang: 'json',\n                  meta: '',\n                  style: {\n                    background: '#1E1E1E',\n                    color: '#D4D4D4',\n                    colorScheme: 'dark'\n                  },\n                  themeName: 'dark-plus',\n                  tokens: [['{', '#D4D4D4'], '\\n  ', ['\"id\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"chatcmpl-123\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['\"object\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"chat.completion\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['\"created\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['1702685778', '#B5CEA8'], [',', '#D4D4D4'], '\\n  ', ['\"model\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"gpt-4o-mini\"', '#CE9178'], [',', '#D4D4D4'], '\\n  ', ['\"choices\"', '#9CDCFE'], [': [', '#D4D4D4'], '\\n    ', ['{', '#D4D4D4'], '\\n      ', ['\"index\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], [',', '#D4D4D4'], '\\n      ', ['\"message\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n        ', ['\"role\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"assistant\"', '#CE9178'], [',', '#D4D4D4'], '\\n        ', ['\"content\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"Hello! How can I assist you today?\"', '#CE9178'], '\\n      ', ['},', '#D4D4D4'], '\\n      ', ['\"logprobs\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n        ', ['\"content\"', '#9CDCFE'], [': [', '#D4D4D4'], '\\n          ', ['{', '#D4D4D4'], '\\n            ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"Hello\"', '#CE9178'], [',', '#D4D4D4'], '\\n            ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-0.31725305', '#B5CEA8'], [',', '#D4D4D4'], '\\n            ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['72', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['101', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['108', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['108', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['111', '#B5CEA8'], ['],', '#D4D4D4'], '\\n            ', ['\"top_logprobs\"', '#9CDCFE'], [': [', '#D4D4D4'], '\\n              ', ['{', '#D4D4D4'], '\\n                ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"Hello\"', '#CE9178'], [',', '#D4D4D4'], '\\n                ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-0.31725305', '#B5CEA8'], [',', '#D4D4D4'], '\\n                ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['72', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['101', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['108', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['108', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['111', '#B5CEA8'], [']', '#D4D4D4'], '\\n              ', ['},', '#D4D4D4'], '\\n              ', ['{', '#D4D4D4'], '\\n                ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"Hi\"', '#CE9178'], [',', '#D4D4D4'], '\\n                ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-1.3190403', '#B5CEA8'], [',', '#D4D4D4'], '\\n                ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['72', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['105', '#B5CEA8'], [']', '#D4D4D4'], '\\n              ', ['}', '#D4D4D4'], '\\n            ', [']', '#D4D4D4'], '\\n          ', ['},', '#D4D4D4'], '\\n          ', ['{', '#D4D4D4'], '\\n            ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"!\"', '#CE9178'], [',', '#D4D4D4'], '\\n            ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-0.02380986', '#B5CEA8'], [',', '#D4D4D4'], '\\n            ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], '\\n              ', ['33', '#B5CEA8'], '\\n            ', ['],', '#D4D4D4'], '\\n            ', ['\"top_logprobs\"', '#9CDCFE'], [': [', '#D4D4D4'], '\\n              ', ['{', '#D4D4D4'], '\\n                ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"!\"', '#CE9178'], [',', '#D4D4D4'], '\\n                ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-0.02380986', '#B5CEA8'], [',', '#D4D4D4'], '\\n                ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['33', '#B5CEA8'], [']', '#D4D4D4'], '\\n              ', ['},', '#D4D4D4'], '\\n              ', ['{', '#D4D4D4'], '\\n                ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\" there\"', '#CE9178'], [',', '#D4D4D4'], '\\n                ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-3.787621', '#B5CEA8'], [',', '#D4D4D4'], '\\n                ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['32', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['116', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['104', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['101', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['114', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['101', '#B5CEA8'], [']', '#D4D4D4'], '\\n              ', ['}', '#D4D4D4'], '\\n            ', [']', '#D4D4D4'], '\\n          ', ['},', '#D4D4D4'], '\\n          ', ['{', '#D4D4D4'], '\\n            ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\" How\"', '#CE9178'], [',', '#D4D4D4'], '\\n            ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-0.000054669687', '#B5CEA8'], [',', '#D4D4D4'], '\\n            ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['32', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['72', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['111', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['119', '#B5CEA8'], ['],', '#D4D4D4'], '\\n            ', ['\"top_logprobs\"', '#9CDCFE'], [': [', '#D4D4D4'], '\\n              ', ['{', '#D4D4D4'], '\\n                ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\" How\"', '#CE9178'], [',', '#D4D4D4'], '\\n                ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-0.000054669687', '#B5CEA8'], [',', '#D4D4D4'], '\\n                ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['32', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['72', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['111', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['119', '#B5CEA8'], [']', '#D4D4D4'], '\\n              ', ['},', '#D4D4D4'], '\\n              ', ['{', '#D4D4D4'], '\\n                ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"<|end|>\"', '#CE9178'], [',', '#D4D4D4'], '\\n                ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-10.953937', '#B5CEA8'], [',', '#D4D4D4'], '\\n                ', ['\"bytes\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['null', '#569CD6'], '\\n              ', ['}', '#D4D4D4'], '\\n            ', [']', '#D4D4D4'], '\\n          ', ['},', '#D4D4D4'], '\\n          ', ['{', '#D4D4D4'], '\\n            ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\" can\"', '#CE9178'], [',', '#D4D4D4'], '\\n            ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-0.015801601', '#B5CEA8'], [',', '#D4D4D4'], '\\n            ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['32', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['99', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['97', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['110', '#B5CEA8'], ['],', '#D4D4D4'], '\\n            ', ['\"top_logprobs\"', '#9CDCFE'], [': [', '#D4D4D4'], '\\n              ', ['{', '#D4D4D4'], '\\n                ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\" can\"', '#CE9178'], [',', '#D4D4D4'], '\\n                ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-0.015801601', '#B5CEA8'], [',', '#D4D4D4'], '\\n                ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['32', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['99', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['97', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['110', '#B5CEA8'], [']', '#D4D4D4'], '\\n              ', ['},', '#D4D4D4'], '\\n              ', ['{', '#D4D4D4'], '\\n                ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\" may\"', '#CE9178'], [',', '#D4D4D4'], '\\n                ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-4.161023', '#B5CEA8'], [',', '#D4D4D4'], '\\n                ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['32', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['109', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['97', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['121', '#B5CEA8'], [']', '#D4D4D4'], '\\n              ', ['}', '#D4D4D4'], '\\n            ', [']', '#D4D4D4'], '\\n          ', ['},', '#D4D4D4'], '\\n          ', ['{', '#D4D4D4'], '\\n            ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\" I\"', '#CE9178'], [',', '#D4D4D4'], '\\n            ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-3.7697225e-6', '#B5CEA8'], [',', '#D4D4D4'], '\\n            ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], '\\n              ', ['32', '#B5CEA8'], [',', '#D4D4D4'], '\\n              ', ['73', '#B5CEA8'], '\\n            ', ['],', '#D4D4D4'], '\\n            ', ['\"top_logprobs\"', '#9CDCFE'], [': [', '#D4D4D4'], '\\n              ', ['{', '#D4D4D4'], '\\n                ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\" I\"', '#CE9178'], [',', '#D4D4D4'], '\\n                ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-3.7697225e-6', '#B5CEA8'], [',', '#D4D4D4'], '\\n                ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['32', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['73', '#B5CEA8'], [']', '#D4D4D4'], '\\n              ', ['},', '#D4D4D4'], '\\n              ', ['{', '#D4D4D4'], '\\n                ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\" assist\"', '#CE9178'], [',', '#D4D4D4'], '\\n                ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-13.596657', '#B5CEA8'], [',', '#D4D4D4'], '\\n                ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['32', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['97', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['115', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['115', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['105', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['115', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['116', '#B5CEA8'], [']', '#D4D4D4'], '\\n              ', ['}', '#D4D4D4'], '\\n            ', [']', '#D4D4D4'], '\\n          ', ['},', '#D4D4D4'], '\\n          ', ['{', '#D4D4D4'], '\\n            ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\" assist\"', '#CE9178'], [',', '#D4D4D4'], '\\n            ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-0.04571125', '#B5CEA8'], [',', '#D4D4D4'], '\\n            ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['32', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['97', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['115', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['115', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['105', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['115', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['116', '#B5CEA8'], ['],', '#D4D4D4'], '\\n            ', ['\"top_logprobs\"', '#9CDCFE'], [': [', '#D4D4D4'], '\\n              ', ['{', '#D4D4D4'], '\\n                ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\" assist\"', '#CE9178'], [',', '#D4D4D4'], '\\n                ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-0.04571125', '#B5CEA8'], [',', '#D4D4D4'], '\\n                ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['32', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['97', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['115', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['115', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['105', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['115', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['116', '#B5CEA8'], [']', '#D4D4D4'], '\\n              ', ['},', '#D4D4D4'], '\\n              ', ['{', '#D4D4D4'], '\\n                ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\" help\"', '#CE9178'], [',', '#D4D4D4'], '\\n                ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-3.1089056', '#B5CEA8'], [',', '#D4D4D4'], '\\n                ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['32', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['104', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['101', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['108', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['112', '#B5CEA8'], [']', '#D4D4D4'], '\\n              ', ['}', '#D4D4D4'], '\\n            ', [']', '#D4D4D4'], '\\n          ', ['},', '#D4D4D4'], '\\n          ', ['{', '#D4D4D4'], '\\n            ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\" you\"', '#CE9178'], [',', '#D4D4D4'], '\\n            ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-5.4385737e-6', '#B5CEA8'], [',', '#D4D4D4'], '\\n            ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['32', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['121', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['111', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['117', '#B5CEA8'], ['],', '#D4D4D4'], '\\n            ', ['\"top_logprobs\"', '#9CDCFE'], [': [', '#D4D4D4'], '\\n              ', ['{', '#D4D4D4'], '\\n                ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\" you\"', '#CE9178'], [',', '#D4D4D4'], '\\n                ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-5.4385737e-6', '#B5CEA8'], [',', '#D4D4D4'], '\\n                ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['32', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['121', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['111', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['117', '#B5CEA8'], [']', '#D4D4D4'], '\\n              ', ['},', '#D4D4D4'], '\\n              ', ['{', '#D4D4D4'], '\\n                ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\" today\"', '#CE9178'], [',', '#D4D4D4'], '\\n                ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-12.807695', '#B5CEA8'], [',', '#D4D4D4'], '\\n                ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['32', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['116', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['111', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['100', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['97', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['121', '#B5CEA8'], [']', '#D4D4D4'], '\\n              ', ['}', '#D4D4D4'], '\\n            ', [']', '#D4D4D4'], '\\n          ', ['},', '#D4D4D4'], '\\n          ', ['{', '#D4D4D4'], '\\n            ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\" today\"', '#CE9178'], [',', '#D4D4D4'], '\\n            ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-0.0040071653', '#B5CEA8'], [',', '#D4D4D4'], '\\n            ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['32', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['116', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['111', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['100', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['97', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['121', '#B5CEA8'], ['],', '#D4D4D4'], '\\n            ', ['\"top_logprobs\"', '#9CDCFE'], [': [', '#D4D4D4'], '\\n              ', ['{', '#D4D4D4'], '\\n                ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\" today\"', '#CE9178'], [',', '#D4D4D4'], '\\n                ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-0.0040071653', '#B5CEA8'], [',', '#D4D4D4'], '\\n                ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['32', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['116', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['111', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['100', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['97', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['121', '#B5CEA8'], [']', '#D4D4D4'], '\\n              ', ['},', '#D4D4D4'], '\\n              ', ['{', '#D4D4D4'], '\\n                ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"?\"', '#CE9178'], [',', '#D4D4D4'], '\\n                ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-5.5247097', '#B5CEA8'], [',', '#D4D4D4'], '\\n                ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['63', '#B5CEA8'], [']', '#D4D4D4'], '\\n              ', ['}', '#D4D4D4'], '\\n            ', [']', '#D4D4D4'], '\\n          ', ['},', '#D4D4D4'], '\\n          ', ['{', '#D4D4D4'], '\\n            ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"?\"', '#CE9178'], [',', '#D4D4D4'], '\\n            ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-0.0008108172', '#B5CEA8'], [',', '#D4D4D4'], '\\n            ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['63', '#B5CEA8'], ['],', '#D4D4D4'], '\\n            ', ['\"top_logprobs\"', '#9CDCFE'], [': [', '#D4D4D4'], '\\n              ', ['{', '#D4D4D4'], '\\n                ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"?\"', '#CE9178'], [',', '#D4D4D4'], '\\n                ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-0.0008108172', '#B5CEA8'], [',', '#D4D4D4'], '\\n                ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['63', '#B5CEA8'], [']', '#D4D4D4'], '\\n              ', ['},', '#D4D4D4'], '\\n              ', ['{', '#D4D4D4'], '\\n                ', ['\"token\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"?', '#CE9178'], ['\\\\n', '#D7BA7D'], ['\"', '#CE9178'], [',', '#D4D4D4'], '\\n                ', ['\"logprob\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['-7.184561', '#B5CEA8'], [',', '#D4D4D4'], '\\n                ', ['\"bytes\"', '#9CDCFE'], [': [', '#D4D4D4'], ['63', '#B5CEA8'], [',', '#D4D4D4'], ' ', ['10', '#B5CEA8'], [']', '#D4D4D4'], '\\n              ', ['}', '#D4D4D4'], '\\n            ', [']', '#D4D4D4'], '\\n          ', ['}', '#D4D4D4'], '\\n        ', [']', '#D4D4D4'], '\\n      ', ['},', '#D4D4D4'], '\\n      ', ['\"finish_reason\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['\"stop\"', '#CE9178'], '\\n    ', ['}', '#D4D4D4'], '\\n  ', ['],', '#D4D4D4'], '\\n  ', ['\"usage\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n    ', ['\"prompt_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['9', '#B5CEA8'], [',', '#D4D4D4'], '\\n    ', ['\"completion_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['9', '#B5CEA8'], [',', '#D4D4D4'], '\\n    ', ['\"total_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['18', '#B5CEA8'], [',', '#D4D4D4'], '\\n    ', ['\"completion_tokens_details\"', '#9CDCFE'], [': {', '#D4D4D4'], '\\n      ', ['\"reasoning_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], [',', '#D4D4D4'], '\\n      ', ['\"accepted_prediction_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], [',', '#D4D4D4'], '\\n      ', ['\"rejected_prediction_tokens\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['0', '#B5CEA8'], '\\n    ', ['}', '#D4D4D4'], '\\n  ', ['},', '#D4D4D4'], '\\n  ', ['\"system_fingerprint\"', '#9CDCFE'], [':', '#D4D4D4'], ' ', ['null', '#569CD6'], '\\n', ['}', '#D4D4D4'], '\\n'],\n                  value: '{\\n  \"id\": \"chatcmpl-123\",\\n  \"object\": \"chat.completion\",\\n  \"created\": 1702685778,\\n  \"model\": \"gpt-4o-mini\",\\n  \"choices\": [\\n    {\\n      \"index\": 0,\\n      \"message\": {\\n        \"role\": \"assistant\",\\n        \"content\": \"Hello! How can I assist you today?\"\\n      },\\n      \"logprobs\": {\\n        \"content\": [\\n          {\\n            \"token\": \"Hello\",\\n            \"logprob\": -0.31725305,\\n            \"bytes\": [72, 101, 108, 108, 111],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \"Hello\",\\n                \"logprob\": -0.31725305,\\n                \"bytes\": [72, 101, 108, 108, 111]\\n              },\\n              {\\n                \"token\": \"Hi\",\\n                \"logprob\": -1.3190403,\\n                \"bytes\": [72, 105]\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \"!\",\\n            \"logprob\": -0.02380986,\\n            \"bytes\": [\\n              33\\n            ],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \"!\",\\n                \"logprob\": -0.02380986,\\n                \"bytes\": [33]\\n              },\\n              {\\n                \"token\": \" there\",\\n                \"logprob\": -3.787621,\\n                \"bytes\": [32, 116, 104, 101, 114, 101]\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \" How\",\\n            \"logprob\": -0.000054669687,\\n            \"bytes\": [32, 72, 111, 119],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \" How\",\\n                \"logprob\": -0.000054669687,\\n                \"bytes\": [32, 72, 111, 119]\\n              },\\n              {\\n                \"token\": \"<|end|>\",\\n                \"logprob\": -10.953937,\\n                \"bytes\": null\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \" can\",\\n            \"logprob\": -0.015801601,\\n            \"bytes\": [32, 99, 97, 110],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \" can\",\\n                \"logprob\": -0.015801601,\\n                \"bytes\": [32, 99, 97, 110]\\n              },\\n              {\\n                \"token\": \" may\",\\n                \"logprob\": -4.161023,\\n                \"bytes\": [32, 109, 97, 121]\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \" I\",\\n            \"logprob\": -3.7697225e-6,\\n            \"bytes\": [\\n              32,\\n              73\\n            ],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \" I\",\\n                \"logprob\": -3.7697225e-6,\\n                \"bytes\": [32, 73]\\n              },\\n              {\\n                \"token\": \" assist\",\\n                \"logprob\": -13.596657,\\n                \"bytes\": [32, 97, 115, 115, 105, 115, 116]\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \" assist\",\\n            \"logprob\": -0.04571125,\\n            \"bytes\": [32, 97, 115, 115, 105, 115, 116],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \" assist\",\\n                \"logprob\": -0.04571125,\\n                \"bytes\": [32, 97, 115, 115, 105, 115, 116]\\n              },\\n              {\\n                \"token\": \" help\",\\n                \"logprob\": -3.1089056,\\n                \"bytes\": [32, 104, 101, 108, 112]\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \" you\",\\n            \"logprob\": -5.4385737e-6,\\n            \"bytes\": [32, 121, 111, 117],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \" you\",\\n                \"logprob\": -5.4385737e-6,\\n                \"bytes\": [32, 121, 111, 117]\\n              },\\n              {\\n                \"token\": \" today\",\\n                \"logprob\": -12.807695,\\n                \"bytes\": [32, 116, 111, 100, 97, 121]\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \" today\",\\n            \"logprob\": -0.0040071653,\\n            \"bytes\": [32, 116, 111, 100, 97, 121],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \" today\",\\n                \"logprob\": -0.0040071653,\\n                \"bytes\": [32, 116, 111, 100, 97, 121]\\n              },\\n              {\\n                \"token\": \"?\",\\n                \"logprob\": -5.5247097,\\n                \"bytes\": [63]\\n              }\\n            ]\\n          },\\n          {\\n            \"token\": \"?\",\\n            \"logprob\": -0.0008108172,\\n            \"bytes\": [63],\\n            \"top_logprobs\": [\\n              {\\n                \"token\": \"?\",\\n                \"logprob\": -0.0008108172,\\n                \"bytes\": [63]\\n              },\\n              {\\n                \"token\": \"?\\\\n\",\\n                \"logprob\": -7.184561,\\n                \"bytes\": [63, 10]\\n              }\\n            ]\\n          }\\n        ]\\n      },\\n      \"finish_reason\": \"stop\"\\n    }\\n  ],\\n  \"usage\": {\\n    \"prompt_tokens\": 9,\\n    \"completion_tokens\": 9,\\n    \"total_tokens\": 18,\\n    \"completion_tokens_details\": {\\n      \"reasoning_tokens\": 0,\\n      \"accepted_prediction_tokens\": 0,\\n      \"rejected_prediction_tokens\": 0\\n    }\\n  },\\n  \"system_fingerprint\": null\\n}\\n'\n                },\n                language: 'json',\n                title: ''\n              }],\n              title: 'Logprobs'\n            },\n            description: 'Logprobs'\n          }]\n        }]\n      },\n      title: 'Create chat completion',\n      type: 'rest_post'\n    }]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  toc,\n  frontmatter,\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",{"_13":53,"_773":774,"_775":776},"rawPage","---\ntitle: Create chat completion\nlayout: wide\nopenapi: ~/openapi.yaml#POST /chat/completions\n---\n\n"]
